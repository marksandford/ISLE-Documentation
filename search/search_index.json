{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Islandora Enterprise (ISLE) ISLE is a community developed open-source project that bundles the Islandora stack into a set of Docker images that are easy to install and update. ISLE allows for persistent customizations and provides a fully functioning Islandora platform for production, staging, and development digital repositories. This documentation provides friendly and clear instructions on how to do the following types of installations and updates: Demo ISLE Installation : Quickly create a new Islandora platform on your personal computer for testing or local development. Remote Server ISLE Installation : Create a new Islandora platform that can be used as a production, staging, or development environment. This process assumes you are starting fresh and do not have an existing Islandora installation you wish to migrate. Update ISLE : Update your version of ISLE to the latest release and receive improvements and security updates. Migrate to ISLE Environment : Migrate a non-ISLE Islandora 7.x platform to ISLE for use as a production, staging, or development environment. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Get Started"},{"location":"#islandora-enterprise-isle","text":"ISLE is a community developed open-source project that bundles the Islandora stack into a set of Docker images that are easy to install and update. ISLE allows for persistent customizations and provides a fully functioning Islandora platform for production, staging, and development digital repositories. This documentation provides friendly and clear instructions on how to do the following types of installations and updates: Demo ISLE Installation : Quickly create a new Islandora platform on your personal computer for testing or local development. Remote Server ISLE Installation : Create a new Islandora platform that can be used as a production, staging, or development environment. This process assumes you are starting fresh and do not have an existing Islandora installation you wish to migrate. Update ISLE : Update your version of ISLE to the latest release and receive improvements and security updates. Migrate to ISLE Environment : Migrate a non-ISLE Islandora 7.x platform to ISLE for use as a production, staging, or development environment. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Islandora Enterprise (ISLE)"},{"location":"about/about-isle/","text":"Islandora Enterprise (ISLE) is a new project in development that will address two of the most significant pain-points in Islandora: installation and maintenance. Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. ISLE is an orchestrated group of Docker containers to be run on a server, laptop or cloud instance with a minimal suite of tools enabling an efficient deploy and release of an updated production-ready Islandora environment. ISLE functions as both an initial installer and maintenance updater with the ability to build new production, staging, or development environments as distributable, lightweight and fast \u201ccontainers\u201d in a Docker Engine environment. This process allows folks to choose between hosting: locally on a laptop for development work on site in an institutional data center in a cloud environment such as Amazon Web Services or Google Cloud Platform . ISLE\u2019s production-ready platform will be updated monthly with: critical security patches full stack software updates a suite of commonly installed features and solution packs. ISLE is designed to be an evolving but trusted environment to help create a managed process for migrating to the next major release of Islandora (termed CLAW). Project Overview ISLE public repository: https://github.com/Islandora-Collaboration-Group/ISLE How Does It Work? ISLE separates an institution\u2019s customizations from core code, and moves that core code into containers that are easily updated, simplifying and largely automating the process of installation and updates of Islandora. ISLE also bundles together the best shared modules into a common, production-ready and security-hardened platform. Why Is It Needed? Islandora is a powerful digital repository comprised of more than 80 different open-source software libraries. This complex ecosystem makes Islandora difficult and expensive to install, maintain and customize. ISLE lowers the barrier to entry for new schools while allowing existing institutions to reallocate funds towards development or ingestion instead of maintenance. High Level Objective To deliver a secure and production-ready Islandora stack (\u201cISLE\u201d) that reduces the involved support time and effort for installation, maintenance and customization. ISLE Functional Definition By ISLE, it is meant a system that will: Function as both an initial installer and maintenance updater for Islandora stacks with up-to-date components suitable for use as staging, development or production environments, as well as for use on personal computers for development work. Consist of a public, tagged set of Docker containers. Include use of an orchestration tool such as Docker Composer. Allow for the replacement of older containers with newer versions. Be updated to include new component security patch releases within one calendar month. Support institution-specific customizations (XSLTs/Islandora Transforms, Solr, schemas, config.xml, MODS configurations/forms, XACML policies) able to persist through container upgrades and replacements. These will be stored in a git repository and a mechanism will be provided to reintegrate with the installed Docker containers as part of an upgrade. Support for either institutional hosting or Amazon Web Services (AWS) for the Docker host server. Support data store flexibility on institutional hosting or an AWS cloud environment. Encompass critical security patches, and full stack software updates, plus dependencies for commonly installed features and all available solution packs. Include an integrated ISLE/Islandora test suite (expected to utilize TravisCI) to be utilized, developed in conjunction with the Islandora Foundation and the current Islandora release managers Include documentation that covers end usage, a how-to guide to set up an initial ISLE installation, a how-to guide for an established installation to upgrade containers to the latest versions, and a functional description of mechanics, administrative system management and the process for future ISLE development ISLE Documents ISLE Executive Summary (a concise overview and history of the ISLE project) ISLE Specifications (based on the older, now closed, ISLE MVP doc) ISLE Supporters (list of institutions)","title":"About ISLE"},{"location":"about/about-isle/#project-overview","text":"ISLE public repository: https://github.com/Islandora-Collaboration-Group/ISLE","title":"Project Overview"},{"location":"about/about-isle/#how-does-it-work","text":"ISLE separates an institution\u2019s customizations from core code, and moves that core code into containers that are easily updated, simplifying and largely automating the process of installation and updates of Islandora. ISLE also bundles together the best shared modules into a common, production-ready and security-hardened platform.","title":"How Does It Work?"},{"location":"about/about-isle/#why-is-it-needed","text":"Islandora is a powerful digital repository comprised of more than 80 different open-source software libraries. This complex ecosystem makes Islandora difficult and expensive to install, maintain and customize. ISLE lowers the barrier to entry for new schools while allowing existing institutions to reallocate funds towards development or ingestion instead of maintenance.","title":"Why Is It Needed?"},{"location":"about/about-isle/#high-level-objective","text":"To deliver a secure and production-ready Islandora stack (\u201cISLE\u201d) that reduces the involved support time and effort for installation, maintenance and customization.","title":"High Level Objective"},{"location":"about/about-isle/#isle-functional-definition","text":"By ISLE, it is meant a system that will: Function as both an initial installer and maintenance updater for Islandora stacks with up-to-date components suitable for use as staging, development or production environments, as well as for use on personal computers for development work. Consist of a public, tagged set of Docker containers. Include use of an orchestration tool such as Docker Composer. Allow for the replacement of older containers with newer versions. Be updated to include new component security patch releases within one calendar month. Support institution-specific customizations (XSLTs/Islandora Transforms, Solr, schemas, config.xml, MODS configurations/forms, XACML policies) able to persist through container upgrades and replacements. These will be stored in a git repository and a mechanism will be provided to reintegrate with the installed Docker containers as part of an upgrade. Support for either institutional hosting or Amazon Web Services (AWS) for the Docker host server. Support data store flexibility on institutional hosting or an AWS cloud environment. Encompass critical security patches, and full stack software updates, plus dependencies for commonly installed features and all available solution packs. Include an integrated ISLE/Islandora test suite (expected to utilize TravisCI) to be utilized, developed in conjunction with the Islandora Foundation and the current Islandora release managers Include documentation that covers end usage, a how-to guide to set up an initial ISLE installation, a how-to guide for an established installation to upgrade containers to the latest versions, and a functional description of mechanics, administrative system management and the process for future ISLE development","title":"ISLE Functional Definition"},{"location":"about/about-isle/#isle-documents","text":"ISLE Executive Summary (a concise overview and history of the ISLE project) ISLE Specifications (based on the older, now closed, ISLE MVP doc) ISLE Supporters (list of institutions)","title":"ISLE Documents"},{"location":"about/committers/","text":"Please see the ISLE Committers draft document for more information","title":"About Committers"},{"location":"about/contributing/","text":"How to contribute to ISLE We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group meetings are open to everybody! Schedule is every other Wednesday at 3:00pm EST. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The ISLE Executive Summary provides a concise overview and history of the ISLE project.","title":"Contributing to ISLE"},{"location":"about/contributing/#how-to-contribute-to-isle","text":"We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group meetings are open to everybody! Schedule is every other Wednesday at 3:00pm EST. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The ISLE Executive Summary provides a concise overview and history of the ISLE project.","title":"How to contribute to ISLE"},{"location":"about/get-help/","text":"Getting Help with ISLE Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Get Help"},{"location":"about/get-help/#getting-help-with-isle","text":"Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Getting Help with ISLE"},{"location":"appendices/configuring-lets-encrypt/","text":"Using Let's Encrypt with ISLE Utilizing Let's Encrypt for SSL certificates for your ISLE stack. Time required: approximately 30 minutes Prerequisites An internet accessible ISLE server with a fully qualified domain name (FQDN). The FQDN set in your .env file's BASE_DOMAIN is the FQDN we're requesting SSL certificates. Steps On the server (host) hosting your ISLE instance Note: These commands are run on a shell (terminal). Note: You do not need to stop your stack to complete these steps. Change to the directory with your docker-compose.yml Change to the config/proxy directory cd config/proxy Create a blank file called acme.json touch acme.json Modify the permissions of acme.json to be user read-write ONLY. chmod 600 acme.json Using your favorite text editor open traefik.toml ( note: this file is in your config/proxy folder) Locate the following lines [[entryPoints.https.tls.certificates]] certFile = \"/certs/isle.localdomain.cert\" keyFile = \"/certs/isle.localdomain.key\" Comment the three lines out by adding a # to the beginning of the line: # [[entryPoints.https.tls.certificates]] # certFile = \"/certs/isle.localdomain.cert\" # keyFile = \"/certs/isle.localdomain.key\" On a new line add the following, substituting in your email address: [acme] email = \"your-email@my-institution.org/edu\" storage = \"acme.json\" entryPoint = \"https\" onHostRule = true onDemand = false [acme.httpChallenge] entryPoint = \"http\" Save and close the file. Change back to the directory with your docker-compose.yml in terminal. Using your favorite text editor open docker-compose.yml . Locate the section for traefik and under the volumes area for traefik add: - ./config/proxy/acme.json:/acme.json ## Automated cert storage. Save and close the file. Reload your ISLE instance by running docker-compose up -d . Visit your website and inspect your certificates. Resources https://docs.traefik.io/user-guide/docker-and-lets-encrypt/","title":"Using Let's Encrypt with ISLE"},{"location":"appendices/configuring-lets-encrypt/#using-lets-encrypt-with-isle","text":"Utilizing Let's Encrypt for SSL certificates for your ISLE stack. Time required: approximately 30 minutes","title":"Using Let's Encrypt with ISLE"},{"location":"appendices/configuring-lets-encrypt/#prerequisites","text":"An internet accessible ISLE server with a fully qualified domain name (FQDN). The FQDN set in your .env file's BASE_DOMAIN is the FQDN we're requesting SSL certificates.","title":"Prerequisites"},{"location":"appendices/configuring-lets-encrypt/#steps","text":"On the server (host) hosting your ISLE instance Note: These commands are run on a shell (terminal). Note: You do not need to stop your stack to complete these steps. Change to the directory with your docker-compose.yml Change to the config/proxy directory cd config/proxy Create a blank file called acme.json touch acme.json Modify the permissions of acme.json to be user read-write ONLY. chmod 600 acme.json Using your favorite text editor open traefik.toml ( note: this file is in your config/proxy folder) Locate the following lines [[entryPoints.https.tls.certificates]] certFile = \"/certs/isle.localdomain.cert\" keyFile = \"/certs/isle.localdomain.key\" Comment the three lines out by adding a # to the beginning of the line: # [[entryPoints.https.tls.certificates]] # certFile = \"/certs/isle.localdomain.cert\" # keyFile = \"/certs/isle.localdomain.key\" On a new line add the following, substituting in your email address: [acme] email = \"your-email@my-institution.org/edu\" storage = \"acme.json\" entryPoint = \"https\" onHostRule = true onDemand = false [acme.httpChallenge] entryPoint = \"http\" Save and close the file. Change back to the directory with your docker-compose.yml in terminal. Using your favorite text editor open docker-compose.yml . Locate the section for traefik and under the volumes area for traefik add: - ./config/proxy/acme.json:/acme.json ## Automated cert storage. Save and close the file. Reload your ISLE instance by running docker-compose up -d . Visit your website and inspect your certificates.","title":"Steps"},{"location":"appendices/configuring-lets-encrypt/#resources","text":"https://docs.traefik.io/user-guide/docker-and-lets-encrypt/","title":"Resources"},{"location":"appendices/data-persistence/","text":"Data Persistence in Docker Please note this is a simplified explanation of how Docker stores data in relation to a typical ISLE installation. This document assumes the use of the docker-compose command and docker-compose.yml, though there are other ways to specify how docker uses volumes and bind mounts. For more complete descriptions of bind mounts and volumes, and their management, please see the official docker documentation. Data , in this context, can include digital objects, files, logs, code, or information stored in mysql, solr, or fedora. Essentially, anything typically written to or read from disk in some format, is data. By default, each time a docker container is brought up using a command like docker-compose up -d the container is recreated using the base container image. When a process in the container creates or changes a file (for example, an apache log file) those changes only exist while the container is running. If the container is brought down and back up again, it is recreated using the base image, which will not include the apache log. In order to preserve certain data--for example, the Fedora datastore, Drupal\u2019s database and files, etc, ISLE uses volumes and/or bind mounts defined in 'docker-compose.yml'. Data written to volumes and bind mounts are different to other data in Docker in two important ways: It is persistent, so it will survive when there is an update to the base ISLE docker images It can be read and written from the host easily and safely Bind mounts vs volumes: Docker provides two different ways to persist data: Volumes and bind mounts , described below. For simplicity, in this document, persisted refers to any data or directory stored in either a bind mount or volume. Volumes Volumes can be named in the docker-compose.yml file and are managed by docker. In the host system, the directories will be created in the Docker store (on Linux, usually /var/lib/docker). If the volume does not already exist, it will be created on docker-compose up. Below is an example docker-compose.yml directive for an apache container using a volume: volumes: apache-data:/var/www/html Explanation: If not already created, docker will create a directory on the host at '/var/lib/docker' and use that for the apache container\u2019s '/var/www/html' directory. Bind Mounts Bind mounts map a directory in the container to a directory anywhere on the host and are not managed directly by docker. Below is an example 'docker-compose.yml' directive for an apache container using a bind mount: volumes: /opt/ISLE/apache/html:/var/www/html Explanation: Data in the host\u2019s /opt/ISLE/apache/html directory will be in the apache container\u2019s /var/www/html. If the directory does not exist on the host, it will NOT be created on docker-compose up -d , so be sure to create any necessary directories on the host manually. If the container\u2019s '/var/www/html/' directory has content, it will be masked by the contents of the host\u2019s '/opt/ISLE/apache/html/' directory. What should be persisted this way? Data and directories that store data unique to your Islandora, such as the Fedora datastore, Solr index, and the full Drupal directory, should be persisted, as should the mysql data directories and some configuration files (those not generated via the .env files). This will ensure that your customizations and content remain even after ISLE containers are updated. It may be useful to write logs to a persisted directory to make accessing and managing the logs easier, and to provide sufficient capacity for log storage. If your workflows involve moving digital objects onto the Islandora server for local ingest, it may be useful to have a persisted directory designated for those objects. The alternative is to put them on the host server, then use scp or docker cp to copy them into the container, which adds steps to the process. What should NOT be persisted? Application data that is not meant to be customized or unique to your institution should not be persisted, but instead managed within the docker container (as it is by default). Example: The ISLE team updates the apache container to apache2\u2019s latest security release. If the directory containing apache\u2019s binary is in a persisted directory, then updating ISLE will NOT automatically provide the latest apache, and you will continue to run the older, insecure apache until you manually update it inside the container. This negates many of the benefits of using ISLE. Which should I use, bind mounts or volumes? The answer for this is \u201cit depends\u201d. Bind mounts may be easier to get to on a host machine as you have more control over where they are. If you are migrating an existing installation, you will almost certainly want to copy over things like your /var/www/html directory and Fedora store and use a bind mount to point to them. The solr index, however, should not be migrated over but rather rebuilt. It doesn\u2019t need to exist before the containers do. It is also unlikely that a user would want to navigate to the solr directory via command line on the host and edit files directly. A named volume would probably work fine in this case, and be more easily managed by docker.","title":"Data persistence"},{"location":"appendices/data-persistence/#data-persistence-in-docker","text":"Please note this is a simplified explanation of how Docker stores data in relation to a typical ISLE installation. This document assumes the use of the docker-compose command and docker-compose.yml, though there are other ways to specify how docker uses volumes and bind mounts. For more complete descriptions of bind mounts and volumes, and their management, please see the official docker documentation. Data , in this context, can include digital objects, files, logs, code, or information stored in mysql, solr, or fedora. Essentially, anything typically written to or read from disk in some format, is data. By default, each time a docker container is brought up using a command like docker-compose up -d the container is recreated using the base container image. When a process in the container creates or changes a file (for example, an apache log file) those changes only exist while the container is running. If the container is brought down and back up again, it is recreated using the base image, which will not include the apache log. In order to preserve certain data--for example, the Fedora datastore, Drupal\u2019s database and files, etc, ISLE uses volumes and/or bind mounts defined in 'docker-compose.yml'. Data written to volumes and bind mounts are different to other data in Docker in two important ways: It is persistent, so it will survive when there is an update to the base ISLE docker images It can be read and written from the host easily and safely","title":"Data Persistence in Docker"},{"location":"appendices/data-persistence/#bind-mounts-vs-volumes","text":"Docker provides two different ways to persist data: Volumes and bind mounts , described below. For simplicity, in this document, persisted refers to any data or directory stored in either a bind mount or volume.","title":"Bind mounts vs volumes:"},{"location":"appendices/data-persistence/#volumes","text":"Volumes can be named in the docker-compose.yml file and are managed by docker. In the host system, the directories will be created in the Docker store (on Linux, usually /var/lib/docker). If the volume does not already exist, it will be created on docker-compose up. Below is an example docker-compose.yml directive for an apache container using a volume: volumes: apache-data:/var/www/html Explanation: If not already created, docker will create a directory on the host at '/var/lib/docker' and use that for the apache container\u2019s '/var/www/html' directory.","title":"Volumes"},{"location":"appendices/data-persistence/#bind-mounts","text":"Bind mounts map a directory in the container to a directory anywhere on the host and are not managed directly by docker. Below is an example 'docker-compose.yml' directive for an apache container using a bind mount: volumes: /opt/ISLE/apache/html:/var/www/html Explanation: Data in the host\u2019s /opt/ISLE/apache/html directory will be in the apache container\u2019s /var/www/html. If the directory does not exist on the host, it will NOT be created on docker-compose up -d , so be sure to create any necessary directories on the host manually. If the container\u2019s '/var/www/html/' directory has content, it will be masked by the contents of the host\u2019s '/opt/ISLE/apache/html/' directory.","title":"Bind Mounts"},{"location":"appendices/data-persistence/#what-should-be-persisted-this-way","text":"Data and directories that store data unique to your Islandora, such as the Fedora datastore, Solr index, and the full Drupal directory, should be persisted, as should the mysql data directories and some configuration files (those not generated via the .env files). This will ensure that your customizations and content remain even after ISLE containers are updated. It may be useful to write logs to a persisted directory to make accessing and managing the logs easier, and to provide sufficient capacity for log storage. If your workflows involve moving digital objects onto the Islandora server for local ingest, it may be useful to have a persisted directory designated for those objects. The alternative is to put them on the host server, then use scp or docker cp to copy them into the container, which adds steps to the process.","title":"What should be persisted this way?"},{"location":"appendices/data-persistence/#what-should-not-be-persisted","text":"Application data that is not meant to be customized or unique to your institution should not be persisted, but instead managed within the docker container (as it is by default). Example: The ISLE team updates the apache container to apache2\u2019s latest security release. If the directory containing apache\u2019s binary is in a persisted directory, then updating ISLE will NOT automatically provide the latest apache, and you will continue to run the older, insecure apache until you manually update it inside the container. This negates many of the benefits of using ISLE.","title":"What should NOT be persisted?"},{"location":"appendices/data-persistence/#which-should-i-use-bind-mounts-or-volumes","text":"The answer for this is \u201cit depends\u201d. Bind mounts may be easier to get to on a host machine as you have more control over where they are. If you are migrating an existing installation, you will almost certainly want to copy over things like your /var/www/html directory and Fedora store and use a bind mount to point to them. The solr index, however, should not be migrated over but rather rebuilt. It doesn\u2019t need to exist before the containers do. It is also unlikely that a user would want to navigate to the solr directory via command line on the host and edit files directly. A named volume would probably work fine in this case, and be more easily managed by docker.","title":"Which should I use, bind mounts or volumes?"},{"location":"appendices/environment-files/","text":"The ISLE Environment Files and Settings The .env and tomcat.env files located in the folder with the docker-comopse.yml are key to configuring the ISLE stack to suit your needs. Here are the variables and their job: Master Section * COMPOSE_PROJECT_NAME to something unique (e.g. `COMPOSE_PROJECT_NAME=isle-production-collections`) * This variable is appended to Docker objects like: volume names, network names. * BASE_DOMAIN to your domainname (e.g. `BASE_DOMAIN=project-name.yourdomain.edu`) * This variable specifies your domain name! * CONTAINER_SHORT_ID to something unique (e.g. `CONTAINER_SHORT_ID=prod`). * This variable is appended to the end of all running containers, keep it _short_! Database Section .env Variable Purpose ISLE Services updated What it does MYSQL_ROOT_PASSWORD Set the root password for MySQL MySQL, Fedora, Apache Allows Fedora and Apache to update their relevant databases as well as to configure themselves to work together. FEDORA_DB Set the name of Fedora database MySQL, Fedora Specifies which database to create or use for Fedora data. DRUPAL_DB Set the name of the Drupal database MySQL, Apache, Fedora Specifies which database to create or use for Fedora data. Updates components of Fedora so it can read the Drupal database for users. FEDORA_DB_USER DRUPAL_DB_USER Sets the MySQL user MySQL, Apache, Fedora Specifies names of Database users. FEDORA_DB_PASS DRUPAL_DB_PASS Sets MySQL user passwords MySQL, Apache, Fedora Specifies passwords of Database users. Islandora (Drupal) Section .env Variable Purpose ISLE Services updated What it does DRUPAL_SITE_NAME Sets the Drupal Site Name variable Drupal Sets the name of your Islandora Website; e.g.: \"Your Project Name\" DRUPAL_ADMIN_USER Set the name of Drupal admin Drupal Specifies the 'admin user' for your Islandora website. DRUPAL_ADMIN_PASS Set the password of Drupal admin Drupal Specifies the password of 'admin user' for your Islandora website. DRUPAL_ADMIN_EMAIL Set the email of Drupal admin Drupal Specifies the email address of the 'admin user' for your Islandora site. DRUPAL_HASH_SALT Secures your installation by hashing data Drupal Secures your install of Drupal (Islandora) by hashing (obscuring) key data. Use password generator tool to create a HASH_SALT, remember alphanumeric characters ONLY (no special characters). Fedora Repository Section .env Variable Purpose ISLE Services updated What it does FEDORA_ADMIN_USER Set the name of Fedora admin Fedora Sets the master administrator username to login to the Fedora repository. You login with this user. FEDORA_ADMIN_PASS Set the password of Fedora admin Fedora Sets the master administrator password to login to the Fedora repository. FEDORA_GSEARCH_USER Sets the username for FGS Fedora, Fedora Generic Search Sets the Fedora Generic Search (FGS) username used to login to the Fedora repository. FGS uses this user to connect to Fedora to update your search index. FEDORA_GSEARCH_PASS Sets the password for FGS Fedora, Fedora Generic Search Sets the password for FGS to gain access to your repository. FEDORA_INTCALL_USER Sets the internal call user Fedora The internal call username FEDORA_INTCALL_PASS Sets the internal call password Fedora The internal call password Image Services Section .env Variable ISLE Services updated What it does CANTALOUPE_ADMIN_INTERFACE_ENABLE ImageServices Enables or Disables the Cantaloupe IIIF /admin control panel. Locatied at http://hostip:8083/cantaloupe/admin when true, else false. CANTALOUPE_ADMIN_USER ImageServices Set the admin username to login to the admin panel. CANTALOUPE_ADMIN_PASS ImageServices Set the admin password to login to the admin panel. Tomcat.env Applies to All Tomcat Instances Tomcat.env Variable ISLE Services updated What it does TOMCAT_ADMIN_USER Fedora, Solr, ImageServices Set the admin username to login to the admin panel. TOMCAT_ADMIN_PASS Fedora, Solr, ImageServices Set the admin password to login to the admin panel. TOMCAT_MANAGER_USER Fedora, Solr, ImageServices Set the manager username to login to the admin panel. TOMCAT_MANAGER_PASS Fedora, Solr, ImageServices Set the manager password to login to the admin panel.","title":"Environment files"},{"location":"appendices/environment-files/#the-isle-environment-files-and-settings","text":"The .env and tomcat.env files located in the folder with the docker-comopse.yml are key to configuring the ISLE stack to suit your needs. Here are the variables and their job:","title":"The ISLE Environment Files and Settings"},{"location":"appendices/environment-files/#master-section","text":"* COMPOSE_PROJECT_NAME to something unique (e.g. `COMPOSE_PROJECT_NAME=isle-production-collections`) * This variable is appended to Docker objects like: volume names, network names. * BASE_DOMAIN to your domainname (e.g. `BASE_DOMAIN=project-name.yourdomain.edu`) * This variable specifies your domain name! * CONTAINER_SHORT_ID to something unique (e.g. `CONTAINER_SHORT_ID=prod`). * This variable is appended to the end of all running containers, keep it _short_!","title":"Master Section"},{"location":"appendices/environment-files/#database-section","text":".env Variable Purpose ISLE Services updated What it does MYSQL_ROOT_PASSWORD Set the root password for MySQL MySQL, Fedora, Apache Allows Fedora and Apache to update their relevant databases as well as to configure themselves to work together. FEDORA_DB Set the name of Fedora database MySQL, Fedora Specifies which database to create or use for Fedora data. DRUPAL_DB Set the name of the Drupal database MySQL, Apache, Fedora Specifies which database to create or use for Fedora data. Updates components of Fedora so it can read the Drupal database for users. FEDORA_DB_USER DRUPAL_DB_USER Sets the MySQL user MySQL, Apache, Fedora Specifies names of Database users. FEDORA_DB_PASS DRUPAL_DB_PASS Sets MySQL user passwords MySQL, Apache, Fedora Specifies passwords of Database users.","title":"Database Section"},{"location":"appendices/environment-files/#islandora-drupal-section","text":".env Variable Purpose ISLE Services updated What it does DRUPAL_SITE_NAME Sets the Drupal Site Name variable Drupal Sets the name of your Islandora Website; e.g.: \"Your Project Name\" DRUPAL_ADMIN_USER Set the name of Drupal admin Drupal Specifies the 'admin user' for your Islandora website. DRUPAL_ADMIN_PASS Set the password of Drupal admin Drupal Specifies the password of 'admin user' for your Islandora website. DRUPAL_ADMIN_EMAIL Set the email of Drupal admin Drupal Specifies the email address of the 'admin user' for your Islandora site. DRUPAL_HASH_SALT Secures your installation by hashing data Drupal Secures your install of Drupal (Islandora) by hashing (obscuring) key data. Use password generator tool to create a HASH_SALT, remember alphanumeric characters ONLY (no special characters).","title":"Islandora (Drupal) Section"},{"location":"appendices/environment-files/#fedora-repository-section","text":".env Variable Purpose ISLE Services updated What it does FEDORA_ADMIN_USER Set the name of Fedora admin Fedora Sets the master administrator username to login to the Fedora repository. You login with this user. FEDORA_ADMIN_PASS Set the password of Fedora admin Fedora Sets the master administrator password to login to the Fedora repository. FEDORA_GSEARCH_USER Sets the username for FGS Fedora, Fedora Generic Search Sets the Fedora Generic Search (FGS) username used to login to the Fedora repository. FGS uses this user to connect to Fedora to update your search index. FEDORA_GSEARCH_PASS Sets the password for FGS Fedora, Fedora Generic Search Sets the password for FGS to gain access to your repository. FEDORA_INTCALL_USER Sets the internal call user Fedora The internal call username FEDORA_INTCALL_PASS Sets the internal call password Fedora The internal call password","title":"Fedora Repository Section"},{"location":"appendices/environment-files/#image-services-section","text":".env Variable ISLE Services updated What it does CANTALOUPE_ADMIN_INTERFACE_ENABLE ImageServices Enables or Disables the Cantaloupe IIIF /admin control panel. Locatied at http://hostip:8083/cantaloupe/admin when true, else false. CANTALOUPE_ADMIN_USER ImageServices Set the admin username to login to the admin panel. CANTALOUPE_ADMIN_PASS ImageServices Set the admin password to login to the admin panel.","title":"Image Services Section"},{"location":"appendices/environment-files/#tomcatenv-applies-to-all-tomcat-instances","text":"Tomcat.env Variable ISLE Services updated What it does TOMCAT_ADMIN_USER Fedora, Solr, ImageServices Set the admin username to login to the admin panel. TOMCAT_ADMIN_PASS Fedora, Solr, ImageServices Set the admin password to login to the admin panel. TOMCAT_MANAGER_USER Fedora, Solr, ImageServices Set the manager username to login to the admin panel. TOMCAT_MANAGER_PASS Fedora, Solr, ImageServices Set the manager password to login to the admin panel.","title":"Tomcat.env Applies to All Tomcat Instances"},{"location":"appendices/glossary/","text":"Glossary Topics ISLE Docker Documentation / Development Solr Systems Virtualization ISLE ISLE : In simple terms, ISLE is a set of resources that allows one to build a fully functioning Islandora system fairly quickly using a system building tool called Docker . Docker Containers : Docker containers are lightweight, stand-alone, executable packages of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. Each major component of Islandora runs in its own container. Docker : used to build ISLE - Docker is used to create containers (similar to virtual servers) based on pre-built images. A \"recipe\" file called docker-compose.yml orchestrates the setting up and networking of the containers. Dockerfile : Docker can build images automatically by reading the instructions from a Dockerfile . A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. Docker for Mac : Docker for Mac is an easy-to-install desktop app for building, debugging and testing Dockerized apps on a Mac. Docker for Mac is a complete development environment deeply integrated with the MacOS Hypervisor framework, networking and filesystem Dockerhub : website / repository that provides access to the latest Docker images for the ISLE containers. Host Server : Also called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a laptop (LOCAL), or a server you connected to via ssh (REMOTE). Images : Docker images - source for the containers - these are built with installed software and updated by ISLE developers and stored on Dockerhub. You can see what software is used in each of the image's Dockerfiles e.g. apache/Dockerfile etc. This will contain additional information on official Docker images used as a Docker base image ISLE on GitHub : the ISLE repository on github.com contains documentation and configuration files necessary to build ISLE. Network refers to a defined Docker network that is controlled by docker. This has powerful implications in production. ISLE services: fedora , solr , apache , mysql , and proxy communicate using an internal private stack network. The service proxy also joins an insecure network that is accessible to the WAN (or for testing \"WAN\" likely means a smaller internal network). Why two networks? Swarms, scaling, replicating. Volume a Docker controlled place to hold data on the local file system. Used to persist data across containers. Documentation / Development CLI / cli - A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface[1] and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). A program which handles the interface is called a command language interpreter or shell. Git - A free and open source distributed software version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. https://git-scm.com/ The ISLE project and its documentation is hosted by an online git service called Github.com Git branches - Branching means you diverge from the main line of development and continue to do work without messing with that main line. Learn more about branching here Markdown is a lightweight markup language with plain text formatting syntax. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). https://en.wikipedia.org/wiki/Markdown https://daringfireball.net/projects/markdown/syntax http://kirkstrobeck.github.io/whatismarkdown.com/ https://help.github.com/categories/writing-on-github/ TL;DR - \"Too long; didn't read.\" - used to indicate a large post, article etc. that has a brief summary of said post, article etc. as it might be too long to read. YAML (YAML Ain't Markup Language) is a human-readable data serialization language. It is commonly used for configuration files, but could be used in many applications where data is being stored (e.g. debugging output) or transmitted (e.g. document headers). https://en.wikipedia.org/wiki/YAML http://yaml.org/ Solr Please note: Online versions of the SOLR documentation are for 6.6+ or higher, ISLE currently users version 4.10.4 only. Solr - an open source enterprise search platform with the such features as full-text search, hit highlighting, faceted search, real-time indexing, dynamic clustering, database integration, NoSQL features[1] and rich document (e.g., Word, PDF) handling. Providing distributed search and index replication, Solr is designed for scalability and fault tolerance. Learn more about Solr here Learn more about using Solr 4.10.4 Core - In Solr, the term core is used to refer to a single index and associated transaction log and configuration files (including the solrconfig.xml and Schema files, among others). Your Solr installation can have multiple cores if needed, which allows you to index data with different structures in the same server, and maintain more control over how your data is presented to different audiences. schema.xml - Solr organizes its data into documents, which consist of fields. The schema.xml file contains information about these fields, how they are analyzed and then filtered during searches. Different field types can contain different types of data so Solr uses the schema.xml file to determine how to build indexes from these input documents, and how to perform index and query time processing. solr.xml - The solr.xml file specifies configuration options for each Solr core, including configuration options for multiple cores. The file also contains mappings for request URLs, and indicates which cores to load when the server starts. solrconfig.xml - The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, you configure important features such as: request handlers, which process the requests to Solr, such as requests to add documents to the index or requests to return results for a query listeners processes that \"listen\" for particular query-related events. Listeners can be used to trigger the execution of special code, such as invoking some common queries to warm-up caches and much more... stopwords.txt - The stopwords.txt file is a configuration file that lists the words to be used by the Solr stop filter to be excluded from appearing or being used for searches. Examples of these common words are a large list that can include \"a\", \"the\", or \"is\" which in a page could easily appear hundreds of times or more. When a user performs a search, an algorithm calculates the relevancy of any document in the search index by counting the number of times a word appears in the text being searched and since words like \"the\" have no bearing on a document's actual relevancy; they are then excluded from this ranking algorithm's results. Systems cronjob - The software utility cron is a time-based job scheduler in Unix-like computer operating systems. People who set up and maintain software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration Learn more here . This is used by such utilities like tmpreaper and the Drupal site on the apache container. domain - A domain name is your website name for the IP address where Internet users can access your website. A domain name is used for finding and identifying computers on the Internet. Computers use IP addresses, which are a series of numbers. However, it is difficult for humans to remember strings of numbers. Because of this, domain names were developed and used to identify entities on the Internet rather than using IP addresses. Learn more about domains here or here dhparam - A script to create this file can be found in the /config/isle-newsite-sample/proxy/config/ssl-certs directory. This file is used in conjunction with the nginx reverse proxy on the proxy container to further secure the communication / traffic between the external network (ISLE Host) and the internal ISLE network (other four containers.) The Diffie\u2013Hellman key exchange is an alternative to RSA-based key exchange using an ephemeral but slower Diffie-Hellman algorithm which generates session keys in such a way that only the two parties involved in the communication can obtain them. No one else can, even if they have access to the server's private key. After the session is complete, and both parties destroy the session keys, the only way to decrypt the communication is to break the session keys themselves. This protocol feature is known as Forward Secrecy. Learn more about Diffie-Hellman parameters environment - An ISLE environment can be a production, development or staging environment. However ISLE is flexible and can be named anything using any convention of the end user's desire, one is not forced to do the following. Following a recommended workflow of \"code up, data down\" for Islandora development typically: a production ISLE environment is a separate ISLE instance running all production (final and tested) potentially public facing code, themes, databases and a full amount of collection data or objects. a staging ISLE environment is a separate ISLE instance running all running all pre-production (final and tested) private (non-public) facing code, themes, databases and a full amount of collection data or objects. staging should be an exact mirror of production (RAM, CPU, storage etc) with the exception of new code to be reviewed and tested internally prior to pushing to production. a development ISLE environment is a separate ISLE instance running all development (experimental and untested) private (non-public) facing code, themes, databases and a limited amount of collection data or objects. development should not be a mirror of production and can be greatly limited and underpowered in its resource footprint e.g. less RAM, CPU, HD etc. Root User - the user name or account that by default has access to all commands and files on a Linux or other Unix-like operating system. It is also referred to as the root account, root, root user and the superuser. Learn more about root user SSH - is a cryptographic network protocol for operating network services securely over an unsecured network. The best known example application is for remote login to computer systems by users. Learn more about SSH SSL certificates - files that digitally bind a cryptographic key to an organization\u2019s web domain (URL). When installed on a web server, it can display a green padlock and https appears in the browser path which allow secure connections from a web server to a user's browser. Typically, SSL certificates are used to secure credit card transactions, data transfer and logins, and more. Learn more about SSL Certificates These certificates are used in new or migrated ISLE sites by the apache & proxy containers and copied into their respective new or migrated ISLE config directories. Read more about SSL Chaining In order to provision a full chain SSL certificate for the proxy container config directory and usage. Provision full chain cert for Nginx link 1: https://support.comodo.com/index.php?/comodo/Knowledgebase/Article/View/1091/0/certificate-installation--nginx Provision full chain cert for Nginx link 2: https://futurestud.io/tutorials/how-to-configure-nginx-ssl-certifcate-chain In order to determine if a SSL Certificate ChainFile is warranted for your apache container config directory and usage. In most cases one can use the intermediate and root certs separately for the apache container. Read more about a SSL Certificate File e.g. /certs/newsite-sample.pem used as an example in later documentation. This file is required in all setups. Read more about a SSL Certificate ChainFile e.g. /certs/newsite-sample-interm.pem used as an example in later documentation. This file may be optional in some setups but is generally recommended for use by the apache container when available. Read more about a SSL Certificate Key File e.g. /certs/newsite-sample-key.pem used as an example in later documentation. This file is required in all setups. sudo - short for \"substitute user do\" and it allows the user to have root permissions when entered in front of a command. Learn more about sudo workstation - a workstation represents a personal laptop or desk computer. Virtualization Vagrant : Vagrant provides easy to configure, reproducible, and portable work environments. Vagrant works on Mac, Linux, Windows, and more. Within the ISLE project there is a vagrant folder. Vagrantfile : Vagrantfile used to describe the type of virtual machine required for the ISLE project, and how to configure and provision these virtual machines. Vagrantfiles are called Vagrantfiles because the actual literal filename for the file is Vagrantfile. Vagrant is meant to run with one Vagrantfile per project which allows endusers to check out the code, run vagrant up, and be on their way. Vagrantfiles are used primarily for use on local workstations and laptops running a Ubuntu or CentOS ISLE Host server. Virtualbox : VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. VM : Virtual Machine - A virtual machine is a software computer that, similar to a physical computer, runs an operating system and applications comprised of specification and configuration files backed by the resources of a host (the physical computer).","title":"Glossary"},{"location":"appendices/glossary/#isle","text":"ISLE : In simple terms, ISLE is a set of resources that allows one to build a fully functioning Islandora system fairly quickly using a system building tool called Docker .","title":"ISLE"},{"location":"appendices/glossary/#docker","text":"Containers : Docker containers are lightweight, stand-alone, executable packages of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. Each major component of Islandora runs in its own container. Docker : used to build ISLE - Docker is used to create containers (similar to virtual servers) based on pre-built images. A \"recipe\" file called docker-compose.yml orchestrates the setting up and networking of the containers. Dockerfile : Docker can build images automatically by reading the instructions from a Dockerfile . A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. Docker for Mac : Docker for Mac is an easy-to-install desktop app for building, debugging and testing Dockerized apps on a Mac. Docker for Mac is a complete development environment deeply integrated with the MacOS Hypervisor framework, networking and filesystem Dockerhub : website / repository that provides access to the latest Docker images for the ISLE containers. Host Server : Also called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a laptop (LOCAL), or a server you connected to via ssh (REMOTE). Images : Docker images - source for the containers - these are built with installed software and updated by ISLE developers and stored on Dockerhub. You can see what software is used in each of the image's Dockerfiles e.g. apache/Dockerfile etc. This will contain additional information on official Docker images used as a Docker base image ISLE on GitHub : the ISLE repository on github.com contains documentation and configuration files necessary to build ISLE. Network refers to a defined Docker network that is controlled by docker. This has powerful implications in production. ISLE services: fedora , solr , apache , mysql , and proxy communicate using an internal private stack network. The service proxy also joins an insecure network that is accessible to the WAN (or for testing \"WAN\" likely means a smaller internal network). Why two networks? Swarms, scaling, replicating. Volume a Docker controlled place to hold data on the local file system. Used to persist data across containers.","title":"Docker"},{"location":"appendices/glossary/#documentation-development","text":"CLI / cli - A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface[1] and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). A program which handles the interface is called a command language interpreter or shell. Git - A free and open source distributed software version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. https://git-scm.com/ The ISLE project and its documentation is hosted by an online git service called Github.com Git branches - Branching means you diverge from the main line of development and continue to do work without messing with that main line. Learn more about branching here Markdown is a lightweight markup language with plain text formatting syntax. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). https://en.wikipedia.org/wiki/Markdown https://daringfireball.net/projects/markdown/syntax http://kirkstrobeck.github.io/whatismarkdown.com/ https://help.github.com/categories/writing-on-github/ TL;DR - \"Too long; didn't read.\" - used to indicate a large post, article etc. that has a brief summary of said post, article etc. as it might be too long to read. YAML (YAML Ain't Markup Language) is a human-readable data serialization language. It is commonly used for configuration files, but could be used in many applications where data is being stored (e.g. debugging output) or transmitted (e.g. document headers). https://en.wikipedia.org/wiki/YAML http://yaml.org/","title":"Documentation / Development"},{"location":"appendices/glossary/#solr","text":"Please note: Online versions of the SOLR documentation are for 6.6+ or higher, ISLE currently users version 4.10.4 only. Solr - an open source enterprise search platform with the such features as full-text search, hit highlighting, faceted search, real-time indexing, dynamic clustering, database integration, NoSQL features[1] and rich document (e.g., Word, PDF) handling. Providing distributed search and index replication, Solr is designed for scalability and fault tolerance. Learn more about Solr here Learn more about using Solr 4.10.4 Core - In Solr, the term core is used to refer to a single index and associated transaction log and configuration files (including the solrconfig.xml and Schema files, among others). Your Solr installation can have multiple cores if needed, which allows you to index data with different structures in the same server, and maintain more control over how your data is presented to different audiences. schema.xml - Solr organizes its data into documents, which consist of fields. The schema.xml file contains information about these fields, how they are analyzed and then filtered during searches. Different field types can contain different types of data so Solr uses the schema.xml file to determine how to build indexes from these input documents, and how to perform index and query time processing. solr.xml - The solr.xml file specifies configuration options for each Solr core, including configuration options for multiple cores. The file also contains mappings for request URLs, and indicates which cores to load when the server starts. solrconfig.xml - The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, you configure important features such as: request handlers, which process the requests to Solr, such as requests to add documents to the index or requests to return results for a query listeners processes that \"listen\" for particular query-related events. Listeners can be used to trigger the execution of special code, such as invoking some common queries to warm-up caches and much more... stopwords.txt - The stopwords.txt file is a configuration file that lists the words to be used by the Solr stop filter to be excluded from appearing or being used for searches. Examples of these common words are a large list that can include \"a\", \"the\", or \"is\" which in a page could easily appear hundreds of times or more. When a user performs a search, an algorithm calculates the relevancy of any document in the search index by counting the number of times a word appears in the text being searched and since words like \"the\" have no bearing on a document's actual relevancy; they are then excluded from this ranking algorithm's results.","title":"Solr"},{"location":"appendices/glossary/#systems","text":"cronjob - The software utility cron is a time-based job scheduler in Unix-like computer operating systems. People who set up and maintain software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration Learn more here . This is used by such utilities like tmpreaper and the Drupal site on the apache container. domain - A domain name is your website name for the IP address where Internet users can access your website. A domain name is used for finding and identifying computers on the Internet. Computers use IP addresses, which are a series of numbers. However, it is difficult for humans to remember strings of numbers. Because of this, domain names were developed and used to identify entities on the Internet rather than using IP addresses. Learn more about domains here or here dhparam - A script to create this file can be found in the /config/isle-newsite-sample/proxy/config/ssl-certs directory. This file is used in conjunction with the nginx reverse proxy on the proxy container to further secure the communication / traffic between the external network (ISLE Host) and the internal ISLE network (other four containers.) The Diffie\u2013Hellman key exchange is an alternative to RSA-based key exchange using an ephemeral but slower Diffie-Hellman algorithm which generates session keys in such a way that only the two parties involved in the communication can obtain them. No one else can, even if they have access to the server's private key. After the session is complete, and both parties destroy the session keys, the only way to decrypt the communication is to break the session keys themselves. This protocol feature is known as Forward Secrecy. Learn more about Diffie-Hellman parameters environment - An ISLE environment can be a production, development or staging environment. However ISLE is flexible and can be named anything using any convention of the end user's desire, one is not forced to do the following. Following a recommended workflow of \"code up, data down\" for Islandora development typically: a production ISLE environment is a separate ISLE instance running all production (final and tested) potentially public facing code, themes, databases and a full amount of collection data or objects. a staging ISLE environment is a separate ISLE instance running all running all pre-production (final and tested) private (non-public) facing code, themes, databases and a full amount of collection data or objects. staging should be an exact mirror of production (RAM, CPU, storage etc) with the exception of new code to be reviewed and tested internally prior to pushing to production. a development ISLE environment is a separate ISLE instance running all development (experimental and untested) private (non-public) facing code, themes, databases and a limited amount of collection data or objects. development should not be a mirror of production and can be greatly limited and underpowered in its resource footprint e.g. less RAM, CPU, HD etc. Root User - the user name or account that by default has access to all commands and files on a Linux or other Unix-like operating system. It is also referred to as the root account, root, root user and the superuser. Learn more about root user SSH - is a cryptographic network protocol for operating network services securely over an unsecured network. The best known example application is for remote login to computer systems by users. Learn more about SSH SSL certificates - files that digitally bind a cryptographic key to an organization\u2019s web domain (URL). When installed on a web server, it can display a green padlock and https appears in the browser path which allow secure connections from a web server to a user's browser. Typically, SSL certificates are used to secure credit card transactions, data transfer and logins, and more. Learn more about SSL Certificates These certificates are used in new or migrated ISLE sites by the apache & proxy containers and copied into their respective new or migrated ISLE config directories. Read more about SSL Chaining In order to provision a full chain SSL certificate for the proxy container config directory and usage. Provision full chain cert for Nginx link 1: https://support.comodo.com/index.php?/comodo/Knowledgebase/Article/View/1091/0/certificate-installation--nginx Provision full chain cert for Nginx link 2: https://futurestud.io/tutorials/how-to-configure-nginx-ssl-certifcate-chain In order to determine if a SSL Certificate ChainFile is warranted for your apache container config directory and usage. In most cases one can use the intermediate and root certs separately for the apache container. Read more about a SSL Certificate File e.g. /certs/newsite-sample.pem used as an example in later documentation. This file is required in all setups. Read more about a SSL Certificate ChainFile e.g. /certs/newsite-sample-interm.pem used as an example in later documentation. This file may be optional in some setups but is generally recommended for use by the apache container when available. Read more about a SSL Certificate Key File e.g. /certs/newsite-sample-key.pem used as an example in later documentation. This file is required in all setups. sudo - short for \"substitute user do\" and it allows the user to have root permissions when entered in front of a command. Learn more about sudo workstation - a workstation represents a personal laptop or desk computer.","title":"Systems"},{"location":"appendices/glossary/#virtualization","text":"Vagrant : Vagrant provides easy to configure, reproducible, and portable work environments. Vagrant works on Mac, Linux, Windows, and more. Within the ISLE project there is a vagrant folder. Vagrantfile : Vagrantfile used to describe the type of virtual machine required for the ISLE project, and how to configure and provision these virtual machines. Vagrantfiles are called Vagrantfiles because the actual literal filename for the file is Vagrantfile. Vagrant is meant to run with one Vagrantfile per project which allows endusers to check out the code, run vagrant up, and be on their way. Vagrantfiles are used primarily for use on local workstations and laptops running a Ubuntu or CentOS ISLE Host server. Virtualbox : VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. VM : Virtual Machine - A virtual machine is a software computer that, similar to a physical computer, runs an operating system and applications comprised of specification and configuration files backed by the resources of a host (the physical computer).","title":"Virtualization"},{"location":"appendices/install-troubleshooting/","text":"This is a basic guide / area that includes some general troubleshooting tips, techniques, thoughts towards helping ISLE users. This section is to grow over time. Docker Service and Firewalls While it is best practice to run the Docker service with a firewall like iptables , some cases, issues can arise depending on which service has been restarted and configured. Ensure that all ports exposed on containers and hosts (see your docker-compose.yml for these ports) are added to the iptables rules and persistent. Do note that only ports 80 & 443 should ever be open to the public Internet. Suggested service start order: The firewall be started / restart first The Docker service started / restarted second ISLE containers started / restart third Some errors like \"Failed to find document http://www.loc.gov/standards/mods/v3/mods-3-4.xsd\" are an indication of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues. On occasion, being unable to import an object, or edit a mods datastream are indications of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues.","title":"Troubleshooting"},{"location":"appendices/install-troubleshooting/#docker-service-and-firewalls","text":"While it is best practice to run the Docker service with a firewall like iptables , some cases, issues can arise depending on which service has been restarted and configured. Ensure that all ports exposed on containers and hosts (see your docker-compose.yml for these ports) are added to the iptables rules and persistent. Do note that only ports 80 & 443 should ever be open to the public Internet. Suggested service start order: The firewall be started / restart first The Docker service started / restarted second ISLE containers started / restart third Some errors like \"Failed to find document http://www.loc.gov/standards/mods/v3/mods-3-4.xsd\" are an indication of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues. On occasion, being unable to import an object, or edit a mods datastream are indications of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues.","title":"Docker Service and Firewalls"},{"location":"appendices/installing-module-with-composer/","text":"Installing a Module with Composer Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Composer. Composer is a PHP package/dependency manager employed in Drupal 8 and many other PHP-based applications. Some Drupal 7, and subsequently Islandora 7.x, modules may also employ Composer to assist with installation and module management. Composer is included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container ( see these instructions for opening a terminal in a container to use it. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, Composer should not be run as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Composer is installed and accessible by entering composer --version , and you should see something like this in response: Composer version 1.6.3 2018-01-31 16:28:17 . Example: Islandora Multi-Importer (IMI) The Islandora Multi-Importer (https://github.com/mnylc/islandora_multi_importer) module uses Composer for installation. The remainder of this guide will demonstrate how to install and enable the Islandora Multi-Importer or IMI . The installation instructions for the IMI module tell us to do the following in the container shell: cd /var/www/html/sites/all/modules git clone https://github.com/mnylc/islandora_multi_importer cd islandora_multi_importer/ composer install If all goes as planned your container now has the Islandora_Multi-Importer installed, but not enabled. To enable the module use Drush like so: drush en islandora_multi_importer -y It's also a good idea to flush Drupal's cache after installing and enabling new modules. You can also do this using Drush like so: drush cc all Other modules which use Composer for installation can be obtained in a similar manner. Persistent Changes Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. IMI's compose specification builds all of the module's components in subdirectories below /var/www/html , and the effect is that IMI will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Installing a Drupal Module with Composer"},{"location":"appendices/installing-module-with-composer/#installing-a-module-with-composer","text":"Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Composer. Composer is a PHP package/dependency manager employed in Drupal 8 and many other PHP-based applications. Some Drupal 7, and subsequently Islandora 7.x, modules may also employ Composer to assist with installation and module management. Composer is included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container ( see these instructions for opening a terminal in a container to use it. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, Composer should not be run as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Composer is installed and accessible by entering composer --version , and you should see something like this in response: Composer version 1.6.3 2018-01-31 16:28:17 .","title":"Installing a Module with Composer"},{"location":"appendices/installing-module-with-composer/#example-islandora-multi-importer-imi","text":"The Islandora Multi-Importer (https://github.com/mnylc/islandora_multi_importer) module uses Composer for installation. The remainder of this guide will demonstrate how to install and enable the Islandora Multi-Importer or IMI . The installation instructions for the IMI module tell us to do the following in the container shell: cd /var/www/html/sites/all/modules git clone https://github.com/mnylc/islandora_multi_importer cd islandora_multi_importer/ composer install If all goes as planned your container now has the Islandora_Multi-Importer installed, but not enabled. To enable the module use Drush like so: drush en islandora_multi_importer -y It's also a good idea to flush Drupal's cache after installing and enabling new modules. You can also do this using Drush like so: drush cc all Other modules which use Composer for installation can be obtained in a similar manner.","title":"Example: Islandora Multi-Importer (IMI)"},{"location":"appendices/installing-module-with-composer/#persistent-changes","text":"Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. IMI's compose specification builds all of the module's components in subdirectories below /var/www/html , and the effect is that IMI will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Persistent Changes"},{"location":"appendices/installing-module-with-drush/","text":"Installing a Module with Drush (and Git) Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Drush, and in some cases, Git. This technique works, in Islandora version 7.x, for most Drupal and Islandora modules. Drush , a \"Command Line Shell for Drupal\", provides convenient means of installing, configuring, and maintaining a Drupal site (like Islandora). Please see http://www.drush.org/ for much more detail regarding Drush. Git is a version control tool that I hope all readers of this document are already familiar with. If you are not, please consider studying up on it at https://git-scm.com/. Drush and Git are included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container ( see these instructions ) to use them. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, most Drush and Git operations should not be performed as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Drush is installed and accessible by entering drush --version , and you should see something like this in response: Drush Version : 7.4.0 . Likewise, you can confirm that Git is installed and working by entering git --version , and you should see something like this in response: git version 1.9.1 . Two Kinds of Drush Module Installations There may be many kinds of modules that can be installed and configured using Drush, but the most popular are: Drupal Contributed Modules - These are modules developed specifically for Drupal and made available from a repository maintained by Drupal.org. Documentation for all such Drupal 7.x modules can be found at https://www.drupal.org/docs/7/modules. Note that all modules are version-specific, so you can find Drupal 8.x module documentation at https://www.drupal.org/docs/8/modules. Non-Contributed Modules - Modules that are not offered to, or accepted by, Drupal.org may reside in repositories maintained by the module's author and/or maintainer. Most Islandora-specific modules take this form. These two kinds of modules generally employ different techniques for installation and maintenance. One example of each is presented in the sections that follow. Example: Devel - A Drupal Contributed Module Devel is a Drupal contributed module maintained and distributed by Drupal.org. Its stated purpose, taken directly from the module's README file is: \"...contains helper functions and pages for Drupal developers and inquisitive admins...\". The installation instructions for Devel simply tell us to \"install as usual\", that is generally true of most Drupal.org contributed modules, and the process is extremely simple using Drush. From a terminal in the container shell: cd /var/www/html/web/sites/default drush dl devel drush en devel drush cc all In this command sequence, the cd /var/www/html/sites/default command sets our working directory to correspond with the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The drush dl devel command instructs our container to download, dl is Drush shorthand for 'download', the module identified as devel . Drush will automatically determine where to put the downloaded module, but it may prompt you for confirmation of location depending on your circumstances. The third command, drush en devel , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as devel . This command, as specified, must be run from a particular working directory so that Drush can determine in which Drupal/Islandora site the module should be applied. Like the dl command, drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Example: Oral Histories Solution Pack - A Non-Contrib Islandora Module According to its README.md file, the Oral Histories Solution Pack \"Provides a content model for Oral Histories and a viewer for displaying timed text content (XML or WebVTT) alongside video and audio files.\" The remainder of this guide will demonstrate how to install and enable the Oral Histories Solution Pack inside your running Apache container using Git and Drush. The full installation instructions for the Oral Histories Solution Pack are relatively complex since there are a number of dependencies, and some necessary Solr configuration in order to be fully functional. Please see the README for complete details. To begin the process of downloading, installing and configuring the Oral History Solution Pack do the following at the terminal inside your container: cd /var/www/html/sites/all/modules/contrib git clone https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories.git cd /var/www/html/sites/default drush en islandora_oralhistories -y drush cc all In this command sequence, the cd /var/www/html/sites/all/modules/contrib command sets our working directory to correspond with the location where we want our module to reside. The git clone... command downloads the Oral History solution pack code from its repository on GitHub. If all goes smoothly this step will create a new islandora_solution_pack_oralhistories directory. The cd /var/www/html/sites/default command sets our working directory to the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The command, drush en islandora_oralhistories -y , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as islandora_oralhistories . This command, as specified, must be run from a particular working directory so that Drush can determine in which Drupal/Islandora site the module should be applied. Note that drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Other modules which use Git and Drush for installation can be obtained in a similar manner. Persistent Changes Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. Devel and Islandora_Oral_History_Solution_Pack , like most modules, build all of the module's components and dependencies in subdirectories below /var/www/html , and the effect is that these modules will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Installing a Drupal Module with Drush"},{"location":"appendices/installing-module-with-drush/#installing-a-module-with-drush-and-git","text":"Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Drush, and in some cases, Git. This technique works, in Islandora version 7.x, for most Drupal and Islandora modules. Drush , a \"Command Line Shell for Drupal\", provides convenient means of installing, configuring, and maintaining a Drupal site (like Islandora). Please see http://www.drush.org/ for much more detail regarding Drush. Git is a version control tool that I hope all readers of this document are already familiar with. If you are not, please consider studying up on it at https://git-scm.com/. Drush and Git are included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container ( see these instructions ) to use them. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, most Drush and Git operations should not be performed as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Drush is installed and accessible by entering drush --version , and you should see something like this in response: Drush Version : 7.4.0 . Likewise, you can confirm that Git is installed and working by entering git --version , and you should see something like this in response: git version 1.9.1 .","title":"Installing a Module with Drush (and Git)"},{"location":"appendices/installing-module-with-drush/#two-kinds-of-drush-module-installations","text":"There may be many kinds of modules that can be installed and configured using Drush, but the most popular are: Drupal Contributed Modules - These are modules developed specifically for Drupal and made available from a repository maintained by Drupal.org. Documentation for all such Drupal 7.x modules can be found at https://www.drupal.org/docs/7/modules. Note that all modules are version-specific, so you can find Drupal 8.x module documentation at https://www.drupal.org/docs/8/modules. Non-Contributed Modules - Modules that are not offered to, or accepted by, Drupal.org may reside in repositories maintained by the module's author and/or maintainer. Most Islandora-specific modules take this form. These two kinds of modules generally employ different techniques for installation and maintenance. One example of each is presented in the sections that follow.","title":"Two Kinds of Drush Module Installations"},{"location":"appendices/installing-module-with-drush/#example-devel-a-drupal-contributed-module","text":"Devel is a Drupal contributed module maintained and distributed by Drupal.org. Its stated purpose, taken directly from the module's README file is: \"...contains helper functions and pages for Drupal developers and inquisitive admins...\". The installation instructions for Devel simply tell us to \"install as usual\", that is generally true of most Drupal.org contributed modules, and the process is extremely simple using Drush. From a terminal in the container shell: cd /var/www/html/web/sites/default drush dl devel drush en devel drush cc all In this command sequence, the cd /var/www/html/sites/default command sets our working directory to correspond with the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The drush dl devel command instructs our container to download, dl is Drush shorthand for 'download', the module identified as devel . Drush will automatically determine where to put the downloaded module, but it may prompt you for confirmation of location depending on your circumstances. The third command, drush en devel , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as devel . This command, as specified, must be run from a particular working directory so that Drush can determine in which Drupal/Islandora site the module should be applied. Like the dl command, drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more.","title":"Example: Devel - A Drupal Contributed Module"},{"location":"appendices/installing-module-with-drush/#example-oral-histories-solution-pack-a-non-contrib-islandora-module","text":"According to its README.md file, the Oral Histories Solution Pack \"Provides a content model for Oral Histories and a viewer for displaying timed text content (XML or WebVTT) alongside video and audio files.\" The remainder of this guide will demonstrate how to install and enable the Oral Histories Solution Pack inside your running Apache container using Git and Drush. The full installation instructions for the Oral Histories Solution Pack are relatively complex since there are a number of dependencies, and some necessary Solr configuration in order to be fully functional. Please see the README for complete details. To begin the process of downloading, installing and configuring the Oral History Solution Pack do the following at the terminal inside your container: cd /var/www/html/sites/all/modules/contrib git clone https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories.git cd /var/www/html/sites/default drush en islandora_oralhistories -y drush cc all In this command sequence, the cd /var/www/html/sites/all/modules/contrib command sets our working directory to correspond with the location where we want our module to reside. The git clone... command downloads the Oral History solution pack code from its repository on GitHub. If all goes smoothly this step will create a new islandora_solution_pack_oralhistories directory. The cd /var/www/html/sites/default command sets our working directory to the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The command, drush en islandora_oralhistories -y , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as islandora_oralhistories . This command, as specified, must be run from a particular working directory so that Drush can determine in which Drupal/Islandora site the module should be applied. Note that drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Other modules which use Git and Drush for installation can be obtained in a similar manner.","title":"Example: Oral Histories Solution Pack - A Non-Contrib Islandora Module"},{"location":"appendices/installing-module-with-drush/#persistent-changes","text":"Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. Devel and Islandora_Oral_History_Solution_Pack , like most modules, build all of the module's components and dependencies in subdirectories below /var/www/html , and the effect is that these modules will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Persistent Changes"},{"location":"appendices/open-terminal-in-running-container/","text":"Opening a Terminal/Shell Inside a Running Container At times you may find it necessary to open a terminal window or 'shell' inside a running container. In ISLE this will usually involve the 'Apache' container. In a terminal window on your host , enter docker ps to show a list of all running containers. Each container's NAME should appear in the right-most column of the output. In an isle.localdomain environment the name of the Apache container will be isle-apache-ld . In other configurations the container name may be different. Use docker exec -it isle-apache-ld bash , where 'isle-apache-ld' represents the name of the target container, to open a bash shell inside the isle-apache-ld container. No password will be required. If successful, your terminal prompt will look something like this: root@dd9ee02aa718:/# .","title":"Opening a Terminal in a Running Container"},{"location":"appendices/open-terminal-in-running-container/#opening-a-terminalshell-inside-a-running-container","text":"At times you may find it necessary to open a terminal window or 'shell' inside a running container. In ISLE this will usually involve the 'Apache' container. In a terminal window on your host , enter docker ps to show a list of all running containers. Each container's NAME should appear in the right-most column of the output. In an isle.localdomain environment the name of the Apache container will be isle-apache-ld . In other configurations the container name may be different. Use docker exec -it isle-apache-ld bash , where 'isle-apache-ld' represents the name of the target container, to open a bash shell inside the isle-apache-ld container. No password will be required. If successful, your terminal prompt will look something like this: root@dd9ee02aa718:/# .","title":"Opening a Terminal/Shell Inside a Running Container"},{"location":"appendices/redhat/","text":"The ISLE Maintainers do not recommend using Red Hat at this time for the following reason: Red Hat Enterprise Linux (RHEL) seems to not support the free Docker Community Edition (CE), although RHEL does seem to support Docker Enterprise Edition (Docker EE) although the latter must be purchased. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. Additional information: https://docs.docker.com/install/ https://www.docker.com/products/docker-engine https://www.docker.com/enterprise-edition https://docs.docker.com/engine/release-notes/ https://access.redhat.com/articles/2317361","title":"Warning about Installing on Red Hat"},{"location":"appendices/sample-it-department-request/","text":"Sample IT Department Request Letter Dear IT Dept, Our digital collections team will be testing a Docker implementation of the Islandora digital repository system called ISLE . We require access to a server meeting the following Hardware Requirements : Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (w/1-4 cores each) Sufficient hard drive or attached storage to hold your collection 30 - 50GB for the server OS and overhead 16 - 32 GB of RAM Our team will either need root access, or a user called \"islandora\" that has sudo privileges. We will need the above hardware so that the automated ISLE installation process can install the following Software Dependencies : Git, Docker, Docker-Compose, openssl, git, htop, ntp, curl Thank you,","title":"Sample IT Department Request Letter"},{"location":"appendices/sample-it-department-request/#sample-it-department-request-letter","text":"Dear IT Dept, Our digital collections team will be testing a Docker implementation of the Islandora digital repository system called ISLE . We require access to a server meeting the following Hardware Requirements : Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (w/1-4 cores each) Sufficient hard drive or attached storage to hold your collection 30 - 50GB for the server OS and overhead 16 - 32 GB of RAM Our team will either need root access, or a user called \"islandora\" that has sudo privileges. We will need the above hardware so that the automated ISLE installation process can install the following Software Dependencies : Git, Docker, Docker-Compose, openssl, git, htop, ntp, curl Thank you,","title":"Sample IT Department Request Letter"},{"location":"appendices/user-story-demo-site/","text":"User Story: Demo ISLE Installation Alice is curious about ISLE and wants to know more about using Islandora for her university's digital collections. She does not have access to a server and would like to test drive Islandora before deciding whether or not to move forward with it. Alice has a Windows 10 laptop and she has confirmed that it meets the Hardware Requirements for testing ISLE. She also has Administrator rights on her laptop. She begins by installing Docker for Windows and configuring her system so ISLE can run on it by following the Software Dependencies instructions. Next, Alice starts the services that make up ISLE and installs Islandora on a virtual machine running on her laptop using the Demo ISLE Installation Guide . Because this is a test site that can only be viewed on Alice's laptop, she does not need to make many config file changes and is safe using default settings. Alice now has a working version of ISLE running on her laptop! She can ingest new objects, view and edit existing objects, and safely test new settings. When she is done testing, she can easily shut down ISLE with a single command, then start it again just as easily at another time to continue testing or demo it to colleagues. If she decides to wipe out all of the changes she has made and start over with a fresh installation, she just has to delete the ISLE directory on her laptop and download the ISLE containers again--a process that usually takes no more than several minutes.","title":"Demo ISLE Installation Example User Story"},{"location":"appendices/user-story-demo-site/#user-story-demo-isle-installation","text":"Alice is curious about ISLE and wants to know more about using Islandora for her university's digital collections. She does not have access to a server and would like to test drive Islandora before deciding whether or not to move forward with it. Alice has a Windows 10 laptop and she has confirmed that it meets the Hardware Requirements for testing ISLE. She also has Administrator rights on her laptop. She begins by installing Docker for Windows and configuring her system so ISLE can run on it by following the Software Dependencies instructions. Next, Alice starts the services that make up ISLE and installs Islandora on a virtual machine running on her laptop using the Demo ISLE Installation Guide . Because this is a test site that can only be viewed on Alice's laptop, she does not need to make many config file changes and is safe using default settings. Alice now has a working version of ISLE running on her laptop! She can ingest new objects, view and edit existing objects, and safely test new settings. When she is done testing, she can easily shut down ISLE with a single command, then start it again just as easily at another time to continue testing or demo it to colleagues. If she decides to wipe out all of the changes she has made and start over with a fresh installation, she just has to delete the ISLE directory on her laptop and download the ISLE containers again--a process that usually takes no more than several minutes.","title":"User Story: Demo ISLE Installation"},{"location":"appendices/user-story-migration-site/","text":"User Story: Migrating an Islandora Site to ISLE Laverne's college archive runs an Islandora site on a server in the college IT data center. The site was installed and set up by a colleague who has since left. Some components are outdated and the work of maintaining the server and software stack is taking up a lot of Laverne's time. She's decided to try migrating the site to a new one built with ISLE. She begins by requesting a second server from IT - based on the [System_Requirements]. IT prefers not to give clients root-level access so they agree to make Laverne a user called islandora according to the [Host_Server_Setup] instructions and provide her with the SSH login instructions. The new server has attached storage large enough to hold a copy of the existing Fedora data store from the old server. Additionally, Laverne requests a new URL for the ISLE-based Islandora site \"https://digital.university-college.edu\" and ensures that IT has created DNS records so that this URL directs to the new server. Once she has access to the server and has installed the necessary software including the ISLE repository files from GitHub [Host_Server_Setup], Larverne is ready for the step-by-step [Migration_Guide]. She begins by creating a place-holder directory in the new server for all the existing Islandora site data - and copying that data over from the old server using the [migration_export_checklist] as a guide. This data will be left in the place-holder directory as a backup during the coming migration process. Laverne now creates the permanent directory structure for ISLE to use in customizing the Islandora install and re-copies the data into this structure from the place-holder directory. Since this is merely a test, she's going to skip the process of setting up an institutional Git Repository for her customization files and move on to the merge section of the guide. Working through the [migration_merge_checklist], Laverne ensures that the directories and files listed have been copied into the ISLE directory structure created above. As specified in the checklist, some of these files are slightly different in her current production Islandora. For example, the and that they have been compared to (and in some cases merged by hand) with the stock up-to-date versions of these files that come with ISLE. This turns out to be the most complex part of the entire migration process and Laverne reaches out to the [ISLE_Group_List] for assistance with a couple of the configuration files that had been edited in the past by the colleague who set up the original Islandora system. Finally, she makes the necessary edits to the docker-compose.yml file to add the necessary connection specific information. This is where she will insert the new URL and IP addresses along with a number of other site-specific customizations [migration_docker_compose_checklist]. Now she can enter the commands from the [Migration_Guide] to download the container images from Dockerhub and start them according to the instructions. After the Fedora container is up and running, Laverne follows the steps to test that all is well and sees a running Tomcat server w/ a list of running applications including fedora and Fedoragsearch. After starting the remaining containers, Laverne runs the Apache install script. If all goes well the next step will be to point a browser at the new URL and see a working Islandora site!","title":"Migration Example User Story"},{"location":"appendices/user-story-migration-site/#user-story-migrating-an-islandora-site-to-isle","text":"Laverne's college archive runs an Islandora site on a server in the college IT data center. The site was installed and set up by a colleague who has since left. Some components are outdated and the work of maintaining the server and software stack is taking up a lot of Laverne's time. She's decided to try migrating the site to a new one built with ISLE. She begins by requesting a second server from IT - based on the [System_Requirements]. IT prefers not to give clients root-level access so they agree to make Laverne a user called islandora according to the [Host_Server_Setup] instructions and provide her with the SSH login instructions. The new server has attached storage large enough to hold a copy of the existing Fedora data store from the old server. Additionally, Laverne requests a new URL for the ISLE-based Islandora site \"https://digital.university-college.edu\" and ensures that IT has created DNS records so that this URL directs to the new server. Once she has access to the server and has installed the necessary software including the ISLE repository files from GitHub [Host_Server_Setup], Larverne is ready for the step-by-step [Migration_Guide]. She begins by creating a place-holder directory in the new server for all the existing Islandora site data - and copying that data over from the old server using the [migration_export_checklist] as a guide. This data will be left in the place-holder directory as a backup during the coming migration process. Laverne now creates the permanent directory structure for ISLE to use in customizing the Islandora install and re-copies the data into this structure from the place-holder directory. Since this is merely a test, she's going to skip the process of setting up an institutional Git Repository for her customization files and move on to the merge section of the guide. Working through the [migration_merge_checklist], Laverne ensures that the directories and files listed have been copied into the ISLE directory structure created above. As specified in the checklist, some of these files are slightly different in her current production Islandora. For example, the and that they have been compared to (and in some cases merged by hand) with the stock up-to-date versions of these files that come with ISLE. This turns out to be the most complex part of the entire migration process and Laverne reaches out to the [ISLE_Group_List] for assistance with a couple of the configuration files that had been edited in the past by the colleague who set up the original Islandora system. Finally, she makes the necessary edits to the docker-compose.yml file to add the necessary connection specific information. This is where she will insert the new URL and IP addresses along with a number of other site-specific customizations [migration_docker_compose_checklist]. Now she can enter the commands from the [Migration_Guide] to download the container images from Dockerhub and start them according to the instructions. After the Fedora container is up and running, Laverne follows the steps to test that all is well and sees a running Tomcat server w/ a list of running applications including fedora and Fedoragsearch. After starting the remaining containers, Laverne runs the Apache install script. If all goes well the next step will be to point a browser at the new URL and see a working Islandora site!","title":"User Story: Migrating an Islandora Site to ISLE"},{"location":"appendices/user-story-new-site/","text":"User Story: Building a New Islandora Site Using ISLE Sam wants to spin up Islandora on an Ubuntu Linux server she has in the institutional data center. She accesses the server using ssh and determines that it meets the Hardware Requirements (basically - has enough processor, memory, and storage space). Sam already has a domain name she wants to use for this Islandora instance - https://islandoratest.university.edu (note: this is a made up sample URL) and has requested the DNS update from IT so the name resolves to the IP address of her server. Next Sam follows the Software Dependencies instructions to setup the Ubuntu server to be a host for ISLE (install some software including docker, download/clone the ISLE repository, create and configure a Linux user for islandora). Because Sam is building a new site with her own URL, she will need to edit a number of the included ISLE configuration files and folders found in the config directory of the cloned ISLE repository per the detailed instructions in the Remote Server ISLE Installation . Once all the configurations have been set, Sam is ready to install ISLE itself - she connects to the server via ssh as the islandora user she just created and follows the steps in the Remote Server ISLE Installation to copy over the configuration changes and pull down the Dockerhub images one-by-one and start. The final step involves running a provisioning script from the ISLE repository folder. At this point, Sam should be able to point a browser at her URL and see a functioning Islandora install!","title":"New Site Example User Story"},{"location":"appendices/user-story-new-site/#user-story-building-a-new-islandora-site-using-isle","text":"Sam wants to spin up Islandora on an Ubuntu Linux server she has in the institutional data center. She accesses the server using ssh and determines that it meets the Hardware Requirements (basically - has enough processor, memory, and storage space). Sam already has a domain name she wants to use for this Islandora instance - https://islandoratest.university.edu (note: this is a made up sample URL) and has requested the DNS update from IT so the name resolves to the IP address of her server. Next Sam follows the Software Dependencies instructions to setup the Ubuntu server to be a host for ISLE (install some software including docker, download/clone the ISLE repository, create and configure a Linux user for islandora). Because Sam is building a new site with her own URL, she will need to edit a number of the included ISLE configuration files and folders found in the config directory of the cloned ISLE repository per the detailed instructions in the Remote Server ISLE Installation . Once all the configurations have been set, Sam is ready to install ISLE itself - she connects to the server via ssh as the islandora user she just created and follows the steps in the Remote Server ISLE Installation to copy over the configuration changes and pull down the Dockerhub images one-by-one and start. The final step involves running a provisioning script from the ISLE repository folder. At this point, Sam should be able to point a browser at her URL and see a functioning Islandora install!","title":"User Story: Building a New Islandora Site Using ISLE"},{"location":"contributor-docs/ansible-guide/","text":"You have the choice of using Ansible to deploy the Docker Host server dependencies instead of performing manual commands on either a CentOS or Ubuntu OS. The Ansible script and configuration files can be found in the root folder of the ISLE git repository in a directory named ansible . Additionally, the Ansible script is designed to detect the chosen operating system and then install the appropriate dependencies with minimal user interaction or prior configuration. Ansible is an free open source automation platform / tool which runs on Linux, Mac or BSD, doesn\u2019t use local or remote agents and is relatively easy to setup. Ansible can help with server configuration management, application deployment, task automation and IT orchestration ( running tasks in sequence on several different servers or devices ). If you are not familiar with the Ansible, it is recommended to start with their documentation. Ansible website What is Ansible? Ansible Documentation Notes: For MacOS users using a local ISLE Host VM on their workstation, please scroll down to line 395 the section called Using Ansible on MacOS . Windows sadly as of yet cannot be used as a Ansible control machine Do not use this script if running Docker for Mac or Docker for Windows as the dependencies are not required. This script can be used with the supplied Vagrant profiles (Ubuntu or CentOS) found within the vagrant directory of the ISLE repository. Prerequisites / Assumptions Familiarity or knowledge of Ansible Ansible control workstation, laptop or server that runs only MacOs, BSD or Linux with the following: Ansible 2.2+ (choice of install methods ) openssh (2.2.x+) git (2.15.1+) python (2.7+) The ISLE project repository cloned to an appropriate location. A previously created ISLE Host Server running either of these operating systems: Ubuntu 16.04 LTS CentOS 7 An account with ssh access to the ISLE Host Server An account with password-less sudo access on the ISLE Host Server The IP of the ISLE Host server Ansible Deploy Script Explanation Within the docker_install.yml Ansible playbook, there are the following roles which perform different actions or cause different events on the ISLE Host server. Ansible Role Action / Event dependencies Installs software dependencies and tools users_groups Adds users, groups and updates permissions as described above docker Installs Docker docker_compose Installs Docker Compose git_clone Clones the current ISLE git repository to /opt/ISLE docker_images Pulls down the latest ISLE Docker Images from Dockerhub.com Installs Software Dependencies and Tools The Ansible script will deploy the following to the ISLE Host server: Ubuntu / Debian CentOS software-properties-common libselinux-python python-software-properties libsemanage-python -- yum-utils ntp ntp openssh-client openssh-clients rsync rsync curl curl wget wget git git zip zip unzip unzip vim vim nano nano emacs24-nox emacs htop htop apt-transport-https -- ca-certificates -- Makes ISLE Host Service Changes Please Note: Any of these services can be re-enabled post installation see appropriate documentation for opening ports on firewalls etc. Ubuntu / Debian CentOS enables ntp service enables ntp service disables ufw disables iptables -- sets selinux to permissive Adds Users, Groups and Updates Permissions Creates the islandora user Along with an appropriate password generates a ssh key bestows sudo password-less access Gives the islandora user the ability to run Docker & Docker Compose by adding the account to the Docker group. Disables root user access via ssh Disables use of passwords with ssh. key based access only to the ISLE Host server Installs Additional Software Docker Docker Compose Git clones the ISLE repository to /opt/ISLE Pulls down the most recent ISLE images Ansible Script Directory Structure ansible \u251c\u2500\u2500 docker_install.yml \u251c\u2500\u2500 host_vars \u2502 \u251c\u2500\u2500 host_local_macos_isle_localdomain.yml \u2502 \u2514\u2500\u2500 isle-prod-project.institution.yml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles \u251c\u2500\u2500 dependencies \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 ubuntu.yml \u2502 \u251c\u2500\u2500 main.yml \u2502 \u2514\u2500\u2500 centos.yml \u251c\u2500\u2500 docker \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 install.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 docker_compose \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 install.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 docker_images \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 images_pull.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 git_clone \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 git_clone.yml \u2502 \u2514\u2500\u2500 main.yml \u2514\u2500\u2500 users_groups \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 islandora \u2514\u2500\u2500 tasks \u251c\u2500\u2500 groups.yml \u251c\u2500\u2500 main.yml \u251c\u2500\u2500 secure.yml \u251c\u2500\u2500 ssh.yml \u2514\u2500\u2500 users.yml Configure Ansible Script to Deploy to ISLE Host To configure the Ansible script to deploy to one's institutional ISLE Host Server, please review and edit the following files within the ansible directory. ansible/docker_install.yml ansible/inventory ansible/host_vars/isle-prod-project.institution.yml Basically wherever isle-prod-project.institution appears as a value in these three files, please replace with the appropriate ISLE Host server fully qualified domain name ( fqdn ) e.g. yourislesite.institution.com One can open up and edit all files in a text editor e.g. Atom, Textedit, Textwrangler etc. ansible/docker_install.yml This is the Ansible playbook necessary to deploy software to the ISLE host server. At the top of the file remove isle-prod-project.institution and replace with the appropriate fqdn . ansible/inventory.yml This is the possible list of server(s) to deploy to using Ansible and its associated playbook(s). Please Note: These instructions below are repeated within the file itself. Line 7: remove isle-prod-project.institution from in between the brackets and replace with the appropriate fqdn Line 8: Add the appropriate ISLE Host server user account that has sudo passwordless permissions to the end of ansible_ssh_user= Example : ansible_ssh_user=janesmith Line 8: Add the appropriate path to this ISLE Host Server user accounts public ssh key to the end of ansible_ssh_private_key_file= Example of inventory using settings for local Ansible deploy laptop: ansible_ssh_private_key_file=/home/janesmith/.ssh/id_rsa.pub Please Note: This key is typically found on the local control (Ansible deploy laptop / workstation) system and should have been previously copied to the appropriate ISLE Host server user account's /home/islehostserver_user/.ssh/authorized_keys file. Final Example end result for inventory file with all settings above [yourislesite.institution.com] yourislesite.institution.com ansible_connection=ssh ansible_ssh_user=janesmith ansible_ssh_private_key_file=/home/janesmith/.ssh/id_rsa.pub ansible/isle-prod-project.institution.yml Copy this file and rename the copy to with the appropriate fqdn Example of how host_vars directory should now contain two files: ansible \u251c\u2500\u2500 docker_install.yml \u251c\u2500\u2500 host_vars \u2502 \u251c\u2500\u2500 isle-prod-project.institution.yml \u2502 \u2514\u2500\u2500 yourislesite.institution.com.yml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles Edit the following lines within the newly created file i.e. yourislesite.institution.com.yml and remove the comments (#) as asked Please Note: The fqdn in the inventory file should match this filename as well. Examples ONLY ( Do not enter these literal values ) Line 9: ansible_ssh_host: 192.168.1.16 This is the IP address of the ISLE Host server Line 10: ansible_ssh_user: janesmith This is the appropriate ISLE Host server user account that has sudo passwordless permissions. Line 15: pub_locale: /home/janesmith/.ssh/id_rsa.pub This is the key found on the local control (Ansible deploy laptop / workstation) system which has been previously copied to the appropriate ISLE Host server user account's /home/islehostserver_user/.ssh/authorized_keys file. Ansible Commands to Test Connection Test if the Ansible control laptop / workstation can connect to the ISLE Host server by running these commands. On the local Ansible control laptop / workstation, open a terminal window and enter the following: cd /path/to/ISLE/repo/ansible ansible -i inventory isle-host-server -m ping Example output of above command ( IGNORE THE WARNING ) [WARNING]: Found both group and host with same name: isle-host-server isle-host-server | SUCCESS => { \"changed\": false, \"ping\": \"pong\" } Please Note: If SUCCESS does not appear as a value or if the wording of the prompt is in RED with \"host does not exist ...\", review all steps above and check the settings. Do not advance until the Example output above matches. Ansible Commands for Deploy To deploy to the ISLE Host Server, run this command. ansible-playbook -i inventory docker_install.yml Ansible will start displaying output within the terminal. If any turn red and the script terminates, please review the above settings and connectivity to the server. Attempt to rerun the script. QC Review Checklist To ensure a successful deploy to the ISLE Server, please review the following to ensure that the deploy to the Islandora Host server was successful. Open a terminal window on the Ansible control laptop /workstation and ssh into the Islandora Host server using the appropriate end user account setup prior to the deploy. Example : ssh enduser@isle-prod-project.institution Docker To check where Docker has been installed to, enter: which docker Example output: /usr/bin/docker To check which version of Docker has been installed, enter: docker --version Example output: Docker version 17.12.0-ce, build c97c6d6 To check if Docker is running, enter: service docker status Example output: Redirecting to /bin/systemctl status docker.service \u25cf docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: active (running) since Thu 2018-03-18 14:36:55 EST; 1 weeks 4 days ago Docs: https://docs.docker.com Main PID: 23066 (dockerd) Memory: 55.3M .... To check if the ISLE images have been downloaded on the ISLE Host server, enter: docker image ls Example output: REPOSITORY TAG IMAGE ID CREATED SIZE islandoracollabgroup/isle-fedora latest 6e2749ca2c2f 2 weeks ago 2.43GB islandoracollabgroup/isle-apache latest 82fe4ae16932 2 weeks ago 2.18GB islandoracollabgroup/isle-solr latest 7fba26c10433 2 weeks ago 784MB islandoracollabgroup/isle-mysql latest f34162f1e0f8 2 weeks ago 299MB islandoracollabgroup/isle-proxy latest 5gdc45f1a074 2 weeks ago 199MB Docker Compose To check where Docker-compose has been installed to, enter: which docker-compose Example output: /usr/local/bin/docker-compose To check which version of Docker-compose has been installed, enter: docker-compose -version Example output: docker-compose version 1.20.1, build 1719ceb islandora User To check if the islandora user has been created, enter: cat /etc/passwd Example output: islandora:x:1002:1002::/home/islandora:/bin/bash ISLE Project Directory To check if the ISLE project git repository has been cloned to /opt/ISLE , enter: ls -lh /opt/ISLE Example output: total 24K drwxr-xr-x. 3 islandora islandora 110 Jan 17 09:17 apache drwxr-xr-x. 5 islandora islandora 84 Jan 23 13:44 config -rwxr-xr-x. 1 islandora islandora 2.0K Jan 18 16:58 docker-compose.yml drwxr-xr-x. 7 islandora islandora 143 Jan 17 09:17 docs drwxr-xr-x. 7 islandora islandora 102 Jan 17 09:17 fedora -rwxr-xr-x. 1 islandora islandora 12K Jan 17 09:17 mkdocs.yml drwxr-xr-x. 3 islandora islandora 54 Jan 17 09:17 mysql drwxr-xr-x. 3 islandora islandora 54 Jan 17 09:17 proxy -rwxr-xr-x. 1 islandora islandora 4.1K Jan 17 09:17 README.md drwxr-xr-x. 4 islandora islandora 50 Jan 17 09:17 solr Once this script has finished one can: Add any appropriate public ssh keys to /home/islandora/.ssh/authorized_keys prior to attempting to ssh to the Islandora Host server as the islandora user. Add the /home/islandora/.ssh/id_rsa.pub key to any git repository contained within the Migration Guide. (Additional instructions appear in that guide if this process is unfamiliar.) Proceed to bottom of this page for next steps. Walkthrough: Using Ansible on a MacOS Control Machine To install Ansible on the end user's MacOS laptop / workstation. Install Ansible via Python pip Follow here http://docs.ansible.com/ansible/latest/intro_installation.html#latest-releases-via-pip Or install Ansible via Homebrew (better) /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" brew install ansible There is a ready made Ansible script for the MacOS hosted isle.localdomain called ansible/host_vars/host_local_macos_isle_localdomain.yml Use vagrant for the ansible_ssh_user= value in the ansible/inventory file Use ~/Users/enduser/.vagrant.d/insecure_private_key for the ansible_ssh_private_key_file value in the ansible/inventory file Example [host_local_macos_isle_localdomain] host_local_macos_isle_localdomain ansible_connection=ssh ansible_ssh_user=vagrant ansible_ssh_private_key_file=/Users/enduser/.vagrant.d/insecure_private_key Line 13 in the ansible/host_vars/host_local_macos_isle_localdomain.yml file will need to be edited with the correct path to the end user's id_rsa.pub file. Change the enduser value to the real username. ( assumes the id_rsa.pub file exists! ) Line 3 in the ansible/docker_install.yml file will need to be edited, change the value of isle-prod-project.institution to host_local_macos_isle_localdomain Once these files have been edited, open a terminal and enter: cd path_to/ISLE/ansible/ Test the connection to the ISLE Host Vagrant Ubuntu VM ansible -i inventory host_local_macos_isle_localdomain -m ping Example output of above command ( IGNORE THE WARNING ) [WARNING]: Found both group and host with same name: host_local_macos_isle_localdomain host_local_macos_isle_localdomain | SUCCESS => { \"changed\": false, \"ping\": \"pong\" } Please Note: If SUCCESS does not appear as a value or if the wording of the prompt is in RED with \"host does not exist ...\", review all steps above and check the settings. Do not advance until the Example output above matches. To deploy to the ISLE Host Server, run this command. ansible-playbook -i inventory docker_install.yml Ansible will start displaying output within the terminal. If any turn red and the script terminates, please review the above settings and connectivity to the server. Attempt to rerun the script.","title":"Ansible guide"},{"location":"contributor-docs/ansible-guide/#prerequisites-assumptions","text":"Familiarity or knowledge of Ansible Ansible control workstation, laptop or server that runs only MacOs, BSD or Linux with the following: Ansible 2.2+ (choice of install methods ) openssh (2.2.x+) git (2.15.1+) python (2.7+) The ISLE project repository cloned to an appropriate location. A previously created ISLE Host Server running either of these operating systems: Ubuntu 16.04 LTS CentOS 7 An account with ssh access to the ISLE Host Server An account with password-less sudo access on the ISLE Host Server The IP of the ISLE Host server","title":"Prerequisites / Assumptions"},{"location":"contributor-docs/ansible-guide/#ansible-deploy-script-explanation","text":"Within the docker_install.yml Ansible playbook, there are the following roles which perform different actions or cause different events on the ISLE Host server. Ansible Role Action / Event dependencies Installs software dependencies and tools users_groups Adds users, groups and updates permissions as described above docker Installs Docker docker_compose Installs Docker Compose git_clone Clones the current ISLE git repository to /opt/ISLE docker_images Pulls down the latest ISLE Docker Images from Dockerhub.com","title":"Ansible Deploy Script Explanation"},{"location":"contributor-docs/ansible-guide/#installs-software-dependencies-and-tools","text":"The Ansible script will deploy the following to the ISLE Host server: Ubuntu / Debian CentOS software-properties-common libselinux-python python-software-properties libsemanage-python -- yum-utils ntp ntp openssh-client openssh-clients rsync rsync curl curl wget wget git git zip zip unzip unzip vim vim nano nano emacs24-nox emacs htop htop apt-transport-https -- ca-certificates --","title":"Installs Software Dependencies and Tools"},{"location":"contributor-docs/ansible-guide/#makes-isle-host-service-changes","text":"Please Note: Any of these services can be re-enabled post installation see appropriate documentation for opening ports on firewalls etc. Ubuntu / Debian CentOS enables ntp service enables ntp service disables ufw disables iptables -- sets selinux to permissive","title":"Makes ISLE Host Service Changes"},{"location":"contributor-docs/ansible-guide/#adds-users-groups-and-updates-permissions","text":"Creates the islandora user Along with an appropriate password generates a ssh key bestows sudo password-less access Gives the islandora user the ability to run Docker & Docker Compose by adding the account to the Docker group. Disables root user access via ssh Disables use of passwords with ssh. key based access only to the ISLE Host server","title":"Adds Users, Groups and Updates Permissions"},{"location":"contributor-docs/ansible-guide/#installs-additional-software","text":"Docker Docker Compose Git clones the ISLE repository to /opt/ISLE Pulls down the most recent ISLE images","title":"Installs Additional Software"},{"location":"contributor-docs/ansible-guide/#ansible-script-directory-structure","text":"ansible \u251c\u2500\u2500 docker_install.yml \u251c\u2500\u2500 host_vars \u2502 \u251c\u2500\u2500 host_local_macos_isle_localdomain.yml \u2502 \u2514\u2500\u2500 isle-prod-project.institution.yml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles \u251c\u2500\u2500 dependencies \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 ubuntu.yml \u2502 \u251c\u2500\u2500 main.yml \u2502 \u2514\u2500\u2500 centos.yml \u251c\u2500\u2500 docker \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 install.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 docker_compose \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 install.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 docker_images \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 images_pull.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 git_clone \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 git_clone.yml \u2502 \u2514\u2500\u2500 main.yml \u2514\u2500\u2500 users_groups \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 islandora \u2514\u2500\u2500 tasks \u251c\u2500\u2500 groups.yml \u251c\u2500\u2500 main.yml \u251c\u2500\u2500 secure.yml \u251c\u2500\u2500 ssh.yml \u2514\u2500\u2500 users.yml","title":"Ansible Script Directory Structure"},{"location":"contributor-docs/ansible-guide/#configure-ansible-script-to-deploy-to-isle-host","text":"To configure the Ansible script to deploy to one's institutional ISLE Host Server, please review and edit the following files within the ansible directory. ansible/docker_install.yml ansible/inventory ansible/host_vars/isle-prod-project.institution.yml Basically wherever isle-prod-project.institution appears as a value in these three files, please replace with the appropriate ISLE Host server fully qualified domain name ( fqdn ) e.g. yourislesite.institution.com One can open up and edit all files in a text editor e.g. Atom, Textedit, Textwrangler etc.","title":"Configure Ansible Script to Deploy to ISLE Host"},{"location":"contributor-docs/ansible-guide/#ansibledocker_installyml","text":"This is the Ansible playbook necessary to deploy software to the ISLE host server. At the top of the file remove isle-prod-project.institution and replace with the appropriate fqdn .","title":"ansible/docker_install.yml"},{"location":"contributor-docs/ansible-guide/#ansibleinventoryyml","text":"This is the possible list of server(s) to deploy to using Ansible and its associated playbook(s). Please Note: These instructions below are repeated within the file itself. Line 7: remove isle-prod-project.institution from in between the brackets and replace with the appropriate fqdn Line 8: Add the appropriate ISLE Host server user account that has sudo passwordless permissions to the end of ansible_ssh_user= Example : ansible_ssh_user=janesmith Line 8: Add the appropriate path to this ISLE Host Server user accounts public ssh key to the end of ansible_ssh_private_key_file= Example of inventory using settings for local Ansible deploy laptop: ansible_ssh_private_key_file=/home/janesmith/.ssh/id_rsa.pub Please Note: This key is typically found on the local control (Ansible deploy laptop / workstation) system and should have been previously copied to the appropriate ISLE Host server user account's /home/islehostserver_user/.ssh/authorized_keys file. Final Example end result for inventory file with all settings above [yourislesite.institution.com] yourislesite.institution.com ansible_connection=ssh ansible_ssh_user=janesmith ansible_ssh_private_key_file=/home/janesmith/.ssh/id_rsa.pub","title":"ansible/inventory.yml"},{"location":"contributor-docs/ansible-guide/#ansibleisle-prod-projectinstitutionyml","text":"Copy this file and rename the copy to with the appropriate fqdn Example of how host_vars directory should now contain two files: ansible \u251c\u2500\u2500 docker_install.yml \u251c\u2500\u2500 host_vars \u2502 \u251c\u2500\u2500 isle-prod-project.institution.yml \u2502 \u2514\u2500\u2500 yourislesite.institution.com.yml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles Edit the following lines within the newly created file i.e. yourislesite.institution.com.yml and remove the comments (#) as asked Please Note: The fqdn in the inventory file should match this filename as well. Examples ONLY ( Do not enter these literal values ) Line 9: ansible_ssh_host: 192.168.1.16 This is the IP address of the ISLE Host server Line 10: ansible_ssh_user: janesmith This is the appropriate ISLE Host server user account that has sudo passwordless permissions. Line 15: pub_locale: /home/janesmith/.ssh/id_rsa.pub This is the key found on the local control (Ansible deploy laptop / workstation) system which has been previously copied to the appropriate ISLE Host server user account's /home/islehostserver_user/.ssh/authorized_keys file.","title":"ansible/isle-prod-project.institution.yml"},{"location":"contributor-docs/ansible-guide/#ansible-commands-to-test-connection","text":"Test if the Ansible control laptop / workstation can connect to the ISLE Host server by running these commands. On the local Ansible control laptop / workstation, open a terminal window and enter the following: cd /path/to/ISLE/repo/ansible ansible -i inventory isle-host-server -m ping Example output of above command ( IGNORE THE WARNING ) [WARNING]: Found both group and host with same name: isle-host-server isle-host-server | SUCCESS => { \"changed\": false, \"ping\": \"pong\" } Please Note: If SUCCESS does not appear as a value or if the wording of the prompt is in RED with \"host does not exist ...\", review all steps above and check the settings. Do not advance until the Example output above matches.","title":"Ansible Commands to Test Connection"},{"location":"contributor-docs/ansible-guide/#ansible-commands-for-deploy","text":"To deploy to the ISLE Host Server, run this command. ansible-playbook -i inventory docker_install.yml Ansible will start displaying output within the terminal. If any turn red and the script terminates, please review the above settings and connectivity to the server. Attempt to rerun the script.","title":"Ansible Commands for Deploy"},{"location":"contributor-docs/ansible-guide/#qc-review-checklist","text":"To ensure a successful deploy to the ISLE Server, please review the following to ensure that the deploy to the Islandora Host server was successful. Open a terminal window on the Ansible control laptop /workstation and ssh into the Islandora Host server using the appropriate end user account setup prior to the deploy. Example : ssh enduser@isle-prod-project.institution","title":"QC Review Checklist"},{"location":"contributor-docs/ansible-guide/#docker","text":"To check where Docker has been installed to, enter: which docker Example output: /usr/bin/docker To check which version of Docker has been installed, enter: docker --version Example output: Docker version 17.12.0-ce, build c97c6d6 To check if Docker is running, enter: service docker status Example output: Redirecting to /bin/systemctl status docker.service \u25cf docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: active (running) since Thu 2018-03-18 14:36:55 EST; 1 weeks 4 days ago Docs: https://docs.docker.com Main PID: 23066 (dockerd) Memory: 55.3M .... To check if the ISLE images have been downloaded on the ISLE Host server, enter: docker image ls Example output: REPOSITORY TAG IMAGE ID CREATED SIZE islandoracollabgroup/isle-fedora latest 6e2749ca2c2f 2 weeks ago 2.43GB islandoracollabgroup/isle-apache latest 82fe4ae16932 2 weeks ago 2.18GB islandoracollabgroup/isle-solr latest 7fba26c10433 2 weeks ago 784MB islandoracollabgroup/isle-mysql latest f34162f1e0f8 2 weeks ago 299MB islandoracollabgroup/isle-proxy latest 5gdc45f1a074 2 weeks ago 199MB","title":"Docker"},{"location":"contributor-docs/ansible-guide/#docker-compose","text":"To check where Docker-compose has been installed to, enter: which docker-compose Example output: /usr/local/bin/docker-compose To check which version of Docker-compose has been installed, enter: docker-compose -version Example output: docker-compose version 1.20.1, build 1719ceb","title":"Docker Compose"},{"location":"contributor-docs/ansible-guide/#islandora-user","text":"To check if the islandora user has been created, enter: cat /etc/passwd Example output: islandora:x:1002:1002::/home/islandora:/bin/bash","title":"islandora User"},{"location":"contributor-docs/ansible-guide/#isle-project-directory","text":"To check if the ISLE project git repository has been cloned to /opt/ISLE , enter: ls -lh /opt/ISLE Example output: total 24K drwxr-xr-x. 3 islandora islandora 110 Jan 17 09:17 apache drwxr-xr-x. 5 islandora islandora 84 Jan 23 13:44 config -rwxr-xr-x. 1 islandora islandora 2.0K Jan 18 16:58 docker-compose.yml drwxr-xr-x. 7 islandora islandora 143 Jan 17 09:17 docs drwxr-xr-x. 7 islandora islandora 102 Jan 17 09:17 fedora -rwxr-xr-x. 1 islandora islandora 12K Jan 17 09:17 mkdocs.yml drwxr-xr-x. 3 islandora islandora 54 Jan 17 09:17 mysql drwxr-xr-x. 3 islandora islandora 54 Jan 17 09:17 proxy -rwxr-xr-x. 1 islandora islandora 4.1K Jan 17 09:17 README.md drwxr-xr-x. 4 islandora islandora 50 Jan 17 09:17 solr Once this script has finished one can: Add any appropriate public ssh keys to /home/islandora/.ssh/authorized_keys prior to attempting to ssh to the Islandora Host server as the islandora user. Add the /home/islandora/.ssh/id_rsa.pub key to any git repository contained within the Migration Guide. (Additional instructions appear in that guide if this process is unfamiliar.) Proceed to bottom of this page for next steps.","title":"ISLE Project Directory"},{"location":"contributor-docs/ansible-guide/#walkthrough-using-ansible-on-a-macos-control-machine","text":"To install Ansible on the end user's MacOS laptop / workstation. Install Ansible via Python pip Follow here http://docs.ansible.com/ansible/latest/intro_installation.html#latest-releases-via-pip Or install Ansible via Homebrew (better) /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" brew install ansible There is a ready made Ansible script for the MacOS hosted isle.localdomain called ansible/host_vars/host_local_macos_isle_localdomain.yml Use vagrant for the ansible_ssh_user= value in the ansible/inventory file Use ~/Users/enduser/.vagrant.d/insecure_private_key for the ansible_ssh_private_key_file value in the ansible/inventory file Example [host_local_macos_isle_localdomain] host_local_macos_isle_localdomain ansible_connection=ssh ansible_ssh_user=vagrant ansible_ssh_private_key_file=/Users/enduser/.vagrant.d/insecure_private_key Line 13 in the ansible/host_vars/host_local_macos_isle_localdomain.yml file will need to be edited with the correct path to the end user's id_rsa.pub file. Change the enduser value to the real username. ( assumes the id_rsa.pub file exists! ) Line 3 in the ansible/docker_install.yml file will need to be edited, change the value of isle-prod-project.institution to host_local_macos_isle_localdomain Once these files have been edited, open a terminal and enter: cd path_to/ISLE/ansible/ Test the connection to the ISLE Host Vagrant Ubuntu VM ansible -i inventory host_local_macos_isle_localdomain -m ping Example output of above command ( IGNORE THE WARNING ) [WARNING]: Found both group and host with same name: host_local_macos_isle_localdomain host_local_macos_isle_localdomain | SUCCESS => { \"changed\": false, \"ping\": \"pong\" } Please Note: If SUCCESS does not appear as a value or if the wording of the prompt is in RED with \"host does not exist ...\", review all steps above and check the settings. Do not advance until the Example output above matches. To deploy to the ISLE Host Server, run this command. ansible-playbook -i inventory docker_install.yml Ansible will start displaying output within the terminal. If any turn red and the script terminates, please review the above settings and connectivity to the server. Attempt to rerun the script.","title":"Walkthrough: Using Ansible on a MacOS Control Machine"},{"location":"contributor-docs/build-guide-v111/","text":"ISLE Build Process Build Setup Clear / prune old docker images from local docker image ls docker image rm -f <Docker IMAGE ID> Fork ISLE to personal / company github.com repo https://github.com/Islandora-Collaboration-Group/ISLE Fork ISLE-Documentation to personal / company github.com repo ISLE-Documentation https://github.com/Islandora-Collaboration-Group/ISLE-Documentation Fork all ISLE images to personal / company github.com repos isle-ubuntu-basebox https://github.com/Islandora-Collaboration-Group/isle-ubuntu-basebox isle-tomcat https://github.com/Islandora-Collaboration-Group/isle-tomcat isle-fedora https://github.com/Islandora-Collaboration-Group/isle-fedora isle-imageservices https://github.com/Islandora-Collaboration-Group/isle-imageservices isle-solr https://github.com/Islandora-Collaboration-Group/isle-solr isle-apache https://github.com/Islandora-Collaboration-Group/isle-apache isle-mysql https://github.com/Islandora-Collaboration-Group/isle-mysql Git clone the forked ISLE project git repo to your local development workstation. Git clone the forked ISLE images git repos into a sibling \"images\" directory Git clone the forked ISLE-Documentation git repo to your local development workstation. Git checkout (make new) release branch in each repo for each image starting with and descending in this order: isle-ubuntu-basebox isle-tomcat isle-fedora isle-imageservices isle-solr isle-apache isle-mysql ISLE (main project) ISLE-Documentation Build Steps ISLE ISLE - uncomment all build / context blocks in the main docker-compose.yml file ISLE - Edit the traefik magic number (Line 133) within the docker-compose.yml file All Images Images - update \"magic\" numbers within each Dockerfile. Images - Within a terminal, cd to each cloned forked image directory. Run build command per image one at a time: docker build - islandoracollabgroup/isle-image:1.1.1 If the build works without error, then the image is tagged, can be tested locally and move onto the next image in order. Repeat this process and command for each image (7 times) isle-ubuntu-basebox Start with this image first before all others. Image name: islandoracollabgroup / isle-ubuntu-basebox Last build: 1.1 / latest (Last built 4 months ago) Build date: Sept 27, 2018 This Dockerfile has the FROM: ubuntu:bionic which means it pulls from here: https://hub.docker.com/_/ubuntu https://github.com/tianon/docker-brew-ubuntu-core/blob/bfd753a747344ff1c6838a2c91ff0606e936f0d0/bionic/Dockerfile https://hub.docker.com/_/scratch isle-ubuntu-basebox - Software Dependencies The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/ca-certificates https://packages.ubuntu.com/bionic/dnsutils https://packages.ubuntu.com/bionic/curl https://packages.ubuntu.com/bionic/wget https://packages.ubuntu.com/bionic/rsync https://packages.ubuntu.com/bionic/git https://packages.ubuntu.com/bionic/unzip isle-ubuntu-basebox - Software updates requiring manual changes and/or lookups for recent versions. S6 Overlay https://github.com/just-containers/s6-overlay S6_OVERLAY_VERSION:-1.21.4.0 https://github.com/just-containers/s6-overlay/releases/download/v$S6_OVERLAY_VERSION/s6-overlay-amd64.tar.gz https://github.com/just-containers/s6-overlay/releases Java Version Lookup URLs: https://www.java.com/en/download/faq/release_dates.xml https://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html To determine the newest Java version and values to flow in: Visit https://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html Accept the License Agreement On the newest number e.g the bottom section i.e. Server JRE (Java SE Runtime Environment) 8u202 Right-click on the first Download link for Linux x64 e.g. server-jre-8u202-linux-x64.tar.gz and copy the link address. It should look like this: https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/server-jre-8u202-linux-x64.tar.gz ENV JAVA_VERSION=${JAVA_VERSION:-xxxxx} should be set to 8u202 ENV JAVA_BUILD=${JAVA_BUILD:-xxx} should be set to b08 ENV JAVA_SECURITY_BUILD=${JAVA_SECURITY_BUILD:-x.x.x_xxx} should be set to 1.8.0_202 This isn't particularly obvious from the URL per se. One can simply leave the 1.8.0_ alone and simply add the 202 as needed. ENV JAVA_SEC_HASH=${JAVA_SEC_HASH:-} - change or overwrite the value (random numbers) found between 8u202-b08/ & /server-jre-8u202-linux-x64.tar.gz in the written down URL from the look up process e.g. 1961070e4c9b4e26a04e7f5a083f551e after the - isle-ubuntu-basebox - Build Actions / Steps Start the update process with the isle-ubuntu-basebox image Clone down the FORKED isle-ubuntu-basebox to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 39: ENV S6_OVERLAY_VERSION=${S6_OVERLAY_VERSION:-x.xx.x.x} - change or overwrite with a value like 1.21.7.0 after the - Line 45: ENV JAVA_VERSION=${JAVA_VERSION:-xxxxx} - change or overwrite with a value like 8u202 after the - Line 46: ENV JAVA_BUILD=${JAVA_BUILD:-xxx} - change or overwrite with a value like b08 after the - Line 47: ENV JAVA_SECURITY_BUILD=${JAVA_SECURITY_BUILD:-x.x.x_xxx} - change or overwrite with a value like 1.8.0_202 after the - This isn't particularly obvious from the resource URL per se. One can simply leave the 1.8.0_ alone and simply add the 202 as needed. Line 48: ENV JAVA_SEC_HASH=${JAVA_SEC_HASH:-} - change or overwrite with a value like 1961070e4c9b4e26a04e7f5a083f551e after the - This is the random sequence of numbers from the URL e.g. https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/server-jre-8u202-linux-x64.tar.gz Makefile S6_OVERLAY_VERSION=x.xx.x.x - change or overwrite with a value like 1.21.7.0 after the = JAVA_VERSION=xxxxx - change or overwrite with a value like 8u202 after the = JAVA_BUILD=xxx - change or overwrite with a value like b08 after the = JAVA_SECURITY_BUILD=x.x.x_xxx - change or overwrite with a value like 1.8.0_202 after the = JAVA_SEC_HASH= - change or overwrite with a value like 1961070e4c9b4e26a04e7f5a083f551e after the - This is the random sequence of numbers from the URL e.g. https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/server-jre-8u202-linux-x64.tar.gz Commit the changes to git Build the image open a terminal cd ~/pathto/isle-ubuntu-basebox docker build -t islandoracollabgroup/isle-ubuntu-basebox:1.1.1 . Then move onto building the next image in the sequence prior to testing (Optional) Manual method of reviewing image docker run -it --rm islandoracollabgroup/isle-ubuntu-basebox bash isle-ubuntu-basebox - Post QC - Release build image open a terminal cd ~/pathto/isle-ubuntu-basebox EXAMPLE / REFERENCE COMMAND Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME . EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=a6f60de7619724485c287f19e7bd59d74190fd60 \\ --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t islandoracollabgroup/isle-ubuntu-basebox:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-ubuntu-basebox:1.1.1 Test with new images isle-ubuntu-basebox - Tagging outcome 1.1 (last image build from 9/27/2018) leave alone 1.1.1 (new image build with sec updates 3/22/2019) latest (new image build with sec updates 3/22/2019) deprecate for future removal serverjr8 ( last image build from 9/27/2018) isle-tomcat Image name: islandoracollabgroup / isle-tomcat Last build: 1.1 / latest (Last built 4 months ago) Build date: Sept 27, 2018 isle-tomcat - Software Dependencies The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/cron https://packages.ubuntu.com/bionic/tmpreaper https://packages.ubuntu.com/bionic/libapr1-dev https://packages.ubuntu.com/bionic/libssl-dev Notes gcc - is installed for building tomcat from source and then removed from the final image make - is installed for building tomcat from source and then removed from the final image gcc-7-base - is installed for building tomcat from source and then removed from the final image isle-tomcat - Software updates requiring manual changes and/or lookups for recent versions. confd https://github.com/kelseyhightower/confd/releases/download/v0.16.0 No upgrade available at this time. tomcat http://tomcat.apache.org/ https://tomcat.apache.org/download-80.cgi TOMCAT_MAJOR=${TOMCAT_MAJOR:-8} TOMCAT_VERSION=${TOMCAT_VERSION:-8.5.34} curl -O -L \"https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz\" && \\ isle-tomcat - Build Actions / Steps Assumptions: The isle-ubuntu-basebox has been already updated, built and pushed to Dockerhub. This image will work (build) from that foundational image. Start the update process with the isle-tomcat image Clone down the FORKED isle-tomcat to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: FROM islandoracollabgroup/isle-ubuntu-basebox:serverjre8 change the tag to 1.1.1 e.g. islandoracollabgroup/isle-ubuntu-basebox:1.1.1 Line 44: TOMCAT_VERSION=${TOMCAT_VERSION:-x.x.xx} - change or overwrite with a value like 8.5.39 after the - Commit the changes to git Build the image open a terminal cd ~/pathto/isle-tomcat docker build -t islandoracollabgroup/isle-tomcat:1.1.1 . Then move onto building the next image in the sequence prior to testing (Optional) Manual method of reviewing image docker run -p 8080:8080 -it --rm islandoracollabgroup/isle-tomcat:1.1.1 bash isle-tomcat - Post QC - Release Build image open a terminal cd ~/pathto/isle-tomcat EXAMPLE / REFERENCE COMMAND Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME . EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=6fb610e9ab1eab68f819fa9ded0bc678c4db385c --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-tomcat:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-tomcat:1.1.1 isle-tomcat - Tagging outcome Suggested outcome: 1.1 (last image build from 9/27/2018) 1.1.1 (new image build with sec updates 3/20/2019) * latest (new image build with sec updates 3/20/2019) deprecate serverjr8 (last image build from 9/27/2018) isle-fedora Image name: islandoracollabgroup / isle-fedora Last build: 1.1 (Last built 4 months ago) Build date: Oct 10, 2018 isle-fedora - Software Dependencies The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/mysql-client https://packages.ubuntu.com/bionic/python-mysqldb https://packages.ubuntu.com/bionic/default-libmysqlclient-dev https://packages.ubuntu.com/bionic/openssl https://packages.ubuntu.com/bionic/libxml2-dev isle-fedora - Software updates requiring manual changes and/or lookups for recent versions Fedora https://github.com/fcrepo3/fcrepo https://github.com/fcrepo3/fcrepo/releases/download/v3.8.1/fcrepo-installer-3.8.1.jar version 3.8.1 Not eligible for upgrade Gsearch v2.9.0 git clone https://github.com/discoverygarden/gsearch.git Latest commit 701400e on Dec 11, 2017 Not eligible for upgrade DGI Gsearch Extensions `https://github.com/discoverygarden/dgi_gsearch_extensions.git v.0.1.3 /usr/local/tomcat/webapps/fedoragsearch/WEB-INF/lib/gsearch_extensions-0.1.3-jar-with-dependencies.jar Last commit was June 16, 2017 https://github.com/discoverygarden/dgi_gsearch_extensions/commit/35f37a486cc5ba748fcee9a4f95b98187b1c6731 Not eligible for upgrade Islandora XACML policies https://github.com/Islandora/islandora-xacml-policies Previous build (Oct 10, 2018) uses this commit https://github.com/Islandora/islandora-xacml-policies/commit/40663fbb0f8de7e45d14fc1ebc6b7e8dc04cffb9 Latest is new commit Jan 2019 https://github.com/Islandora/islandora-xacml-policies/commit/73deba6b90f6de40d72c890233ba6ff0159031de Islandora Drupal Filter Built Oct 10, 2018 https://github.com/Islandora/islandora_drupal_filter Build uses this release * v7.1.9 https://github.com/Islandora/islandora_drupal_filter/releases/download/v7.1.9/fcrepo-drupalauthfilter-3.8.1.jar Latest is: 7.1.12 https://github.com/Islandora/islandora_drupal_filter/releases/tag/7.1.12 Apache Maven https://maven.apache.org/index.html version used 3.5.4 on Oct 10, 2018 curl -O -L \"https://www.apache.org/dyn/closer.cgi?action=download&filename=maven/maven-$MAVEN_MAJOR/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz\" Apache Ant https://ant.apache.org/ version used 1.10.5 on Oct 10, 2018 curl -O -L \"https://www.apache.org/dyn/closer.cgi?action=download&filename=ant/binaries/apache-ant-$ANT_VERSION-bin.tar.gz\" DGI Basic-Solr Config The git branch to clone from is: -b 4.10.x https://github.com/discoverygarden/basic-solr-config.git Oct 10 was build date so the last commit used (version) was on Sept 21, 2018 https://github.com/discoverygarden/basic-solr-config/commit/0282f703a486ab89c7bbded6af846540be234833 \"Magic number\" comparison process for release notes: cd /tmp git clone --recursive -b 4.10.x https://github.com/discoverygarden/basic-solr-config.git old git clone --recursive -b 4.10.x https://github.com/discoverygarden/basic-solr-config.git new Check build date on last Dockerhub push e.g. Oct 10, 2018 Check commits page https://github.com/discoverygarden/basic-solr-config/commits/4.10.x Determine which commit came on or before Oct 10, 2018 e.g. Sept 21, 2018 0282f703a486ab89c7bbded6af846540be234833 ( you can click the clipboard to copy this value ) cd /tmp/old git checkout last used build commit i.e. git checkout 0282f703a486ab89c7bbded6af846540be234833 Compare both directories using a visual diff tool like Kaleidoscope (MAC), diff or KDiff3 (Linux) Note the differences in files and the line numbers for inclusion in release notes. foxmlToSolr.xslt - Lines 47 & 48 - New lines added README.md - Lines 31 & 32 explanations for the line additions in foxmlToSolr.xslt DGI Islandora Transforms git submodule of DGI Basic-Solr Config https://github.com/discoverygarden/islandora_transforms Oct 10 was build date so the last commit used (version) was on Sept 21, 2018 https://github.com/discoverygarden/islandora_transforms/commit/ee7e9d32a71381abfa5c3ead13255c0c5b66ed45 Newest commit: March 19, 2019 https://github.com/discoverygarden/islandora_transforms/commit/cdfef63b7e2f6740c06e56bfa32d496c09837ae8 \"Magic number\" comparison process for release notes: cd /tmp git clone https://github.com/discoverygarden/islandora_transforms old git clone https://github.com/discoverygarden/islandora_transforms new Check build date on last Dockerhub push e.g. Oct 10, 2018 Check commits page https://github.com/discoverygarden/islandora_transforms/commits/master Determine which commit came on or before Oct 10, 2018 e.g. Sept 21, 2018 ee7e9d32a71381abfa5c3ead13255c0c5b66ed45 ( you can click the clipboard to copy this value ) cd /tmp/old git checkout last used build commit i.e. git checkout ee7e9d32a71381abfa5c3ead13255c0c5b66ed45 Compare both directories using a visual diff tool like Kaleidoscope (MAC), diff or KDiff3 (Linux) Note the differences in files and the line numbers for inclusion in release notes. datastream_info_to_solr.xslt - Lines 35 - 49 - new lines & content added RELS-EXT_to_solr.xslt Line 7 - modified Line 8 - new line & content added Line 42 - new line & content added Line 49 - new line & content added slurp_all_MODS_to_solr.xslt - Lines 289 - 300 new lines & content added isle-fedora - Build Actions / Steps Assumptions: The isle-ubuntu-basebox & isle-tomcat images have been already updated, built and pushed to Dockerhub. This image will work (build) from those foundational images. Start the update process with the isle-fedora image Clone down the FORKED isle-fedora to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: change the tag from FROM islandoracollabgroup/isle-tomcat:x to isle-tomcat:1.1.1 Line 53: change vx.x.x in the curl url to v.7.1.12 Line 62: change MAVEN_VERSION:-x.x.x to MAVEN_VERSION:-3.6.0 Line 63: change ANT_VERSION:-x.xx.x to ANT_VERSION:-1.9.14 Commit the changes to git Build the image open a terminal cd ~/pathto/isle-fedora docker build -t islandoracollabgroup/isle-fedora:1.1.1 . Then move onto building the next image in the sequence prior to testing isle-fedora - Post QC - Release Build Image EXAMPLE / REFERENCE COMMAND Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME . EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=180e2382626a6972b0251d18769c45e4a1e2d7cb --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-fedora:1.1.1 . (Optional) Manual method of reviewing image docker run -p 8080:8080 -it --rm islandoracollabgroup/isle-fedora:1.1 bash Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-fedora:1.1.1 Test with new images isle-fedora - Tagging Outcome Suggested outcome: 1.0 (9/7/2018) 1.1 (last image build from 10/10/2018) 1.1.1 (new image build with sec updates 3/20/2019) latest (new image build with sec updates 3/20/2019) leave blazegraph alone deprecate 1.dev what is this? Nov5th, 2018 deprecate 3.8.1 isle-imageservices Image name: islandoracollabgroup / isle-imageservices Last Build: 1.1 / latest (Last built 5 months ago) 1.11 is Sept 15, 2018 latest is Sept 7, 2018 ^ Needs fix isle-imageservices - Software Dependencies The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/ffmpeg https://packages.ubuntu.com/bionic/ffmpeg2theora https://packages.ubuntu.com/bionic/libavcodec-extra https://packages.ubuntu.com/bionic/ghostscript https://packages.ubuntu.com/bionic/xpdf https://packages.ubuntu.com/bionic/poppler-utils NOTE: $BUILD_DEPS means all dev tools are uninstalled after building openjpeg from source isle-imageservices - Software updates requiring manual changes and/or lookups openjpeg https://github.com/uclouvain/openjpeg Last commit used: Sept 5, 2018 https://github.com/uclouvain/openjpeg/commit/31a03b390a77bfbe4b0f140121d1296acb611f76 Upgraded openjpeg to latest Dec 21,2018 commit https://github.com/uclouvain/openjpeg/commit/51f097e6d5754ddae93e716276fe8176b44ec548 Imagemagick https://www.imagemagick.org curl -O https://www.imagemagick.org/download/ImageMagick.tar.gz / usr/local/bin/convert -v` Version: ImageMagick 7.0.8-11 Q16 x86_64 2018-09-15 https://www.imagemagick.org Adore-Djatoka https://sourceforge.mirrorservice.org/d/dj/djatoka/djatoka/1.1/adore-djatoka-1.1.tar.gz No upgrade possible Cantaloupe https://github.com/medusa-project/cantaloupe v4.0.1 Going to hold off on an update due to delegates.rb and cantaloupe.properties files not being fully tested in the Islandora community. Don't attempt to upgrade Cantaloupe to v4.0.3 DUE to potential key changes and confusion over version usage. isle-imageservices - Build Steps / Actions Assumptions: The isle-ubuntu-basebox & isle-tomcat images have been already updated, built and pushed to Dockerhub. This image will work (build) from those foundational images. Start the update process with the isle-image-services image Clone down the FORKED isle-image-services to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: change the tag from FROM islandoracollabgroup/isle-tomcat:x to isle-tomcat:1.1.1 Line 87: change vx.x.x in the curl url to v4.0.1 (Not done on March 25) Commit the changes to git Build the image open a terminal cd ~/pathto/isle-image-services docker build -t islandoracollabgroup/isle-imageservices:1.1.1 . Then move onto building the next image in the sequence prior to testing Test with new images (Optional) Manual method of reviewing image docker run -it -p \"8080:8080\" --rm islandoracollabgroup/isle-imageservices:1.1 bash isle-imageservices - Post QC - Release Build Image EXAMPLE / REFERENCE COMMAND Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME . EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=6e7f82aa405848e05771ff6e926c6dc0f73fbb8f --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-imageservices:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-imageservices:1.1.1 Tagging Suggested outcome: 1.1 (last image build from 9/2018) 1.1.1 (new image build with sec updates 3/20/2019) * latest (new image build with sec updates 3/20/2019) isle-solr Image name: islandoracollabgroup / isle-solr Last Build: 1.1 / latest (Last built 3 months ago) November 5th, 2018 Solr v4.10.4 curl -O -L http://archive.apache.org/dist/lucene/solr/$SOLR_VERSION/solr-$SOLR_VERSION.tgz http://archive.apache.org/dist/lucene/solr/4.10.4/ No apparent updates since 2015-03-03 DGI Basic-Solr Config The git branch to clone from is: -b 4.10.x https://github.com/discoverygarden/basic-solr-config.git But the area of this that is used is https://github.com/discoverygarden/basic-solr-config/tree/4.10.x/conf this has not changed since Aug 2107 https://github.com/discoverygarden/basic-solr-config/commit/a3457c2ec6a44cb5c74937b5e45056ab5ae99916 Actions Run package management updates but given this builds off the two previous images I'm not sure there are any changes per se. (Optional) Manual method of reviewing image docker run -p 8080:8080 -it --rm islandoracollabgroup/isle-solr:1.1 bash Review & Build Process Assumptions: The isle-ubuntu-basebox & isle-tomcat images have been already updated, built and pushed to Dockerhub. This image will work (build) from those foundational images. Start the update process with the isle-solr image Clone down the FORKED isle-solr to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: change the tag from FROM islandoracollabgroup/isle-tomcat:x to isle-tomcat:1.1.1 Commit the changes to git Build the image open a terminal cd ~/pathto/isle-solr docker build -t islandoracollabgroup/isle-solr:1.1.1 . Test with new images EXAMPLE / REFERENCE COMMAND Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME . EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=730d9ee566a55430d81d0691fb6b3370aa9148ed --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-solr:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-solr:1.1.1 Tagging Suggested outcome 1.1 (last image build from 9/2018) 1.1.1 (new image build with sec updates 3/20/2019) * latest (new image build with sec updates 3/20/2019) deprecate 4.10.4 tag isle-apache Image name: islandoracollabgroup / isle-apache Last Build: 1.1 / latest (Last built 3 months ago) Last build: November 5th, 2018 Software Dependencies The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/language-pack-en-base https://packages.ubuntu.com/bionic/tmpreaper https://packages.ubuntu.com/bionic/cron https://packages.ubuntu.com/bionic/xz-utils https://packages.ubuntu.com/bionic/zip https://packages.ubuntu.com/bionic/bzip2 https://packages.ubuntu.com/bionic/openssl https://packages.ubuntu.com/bionic/openssh-client https://packages.ubuntu.com/bionic/mysql-client https://packages.ubuntu.com/bionic/file FFMPEG_PACKS https://packages.ubuntu.com/bionic/ffmpeg https://packages.ubuntu.com/bionic/ffmpeg2theora https://packages.ubuntu.com/bionic/libavcodec-extra https://packages.ubuntu.com/bionic/ghostscript https://packages.ubuntu.com/bionic/xpdf https://packages.ubuntu.com/bionic/poppler-utils APACHE_PACKS https://packages.ubuntu.com/bionic/apache2 https://packages.ubuntu.com/bionic/python-mysqldb https://packages.ubuntu.com/bionic/libxml2-dev https://packages.ubuntu.com/bionic/libapache2-mod-php5.6 https://packages.ubuntu.com/bionic/libcurl3-openssl-dev https://packages.ubuntu.com/bionic/php5.6 https://packages.ubuntu.com/bionic/php5.6-cli https://packages.ubuntu.com/bionic/php5.6-json https://packages.ubuntu.com/bionic/php5.6-common https://packages.ubuntu.com/bionic/php5.6-readline https://packages.ubuntu.com/bionic/php-pear https://packages.ubuntu.com/bionic/php5.6-curl https://packages.ubuntu.com/bionic/php5.6-mbstring https://packages.ubuntu.com/bionic/php5.6-xmlrpc https://packages.ubuntu.com/bionic/php5.6-dev https://packages.ubuntu.com/bionic/php5.6-gd https://packages.ubuntu.com/bionic/php5.6-ldap https://packages.ubuntu.com/bionic/php5.6-xml https://packages.ubuntu.com/bionic/php5.6-mcrypt https://packages.ubuntu.com/bionic/php5.6-mysql https://packages.ubuntu.com/bionic/php5.6-soap https://packages.ubuntu.com/bionic/php5.6-xsl https://packages.ubuntu.com/bionic/php5.6-zip https://packages.ubuntu.com/bionic/php5.6-bcmath https://packages.ubuntu.com/bionic/php5.6-intl https://packages.ubuntu.com/bionic/php-uploadprogress https://packages.ubuntu.com/bionic/php-xdebug https://packages.ubuntu.com/bionic/bibutils https://packages.ubuntu.com/bionic/libicu-dev https://packages.ubuntu.com/bionic/tesseract-ocr https://packages.ubuntu.com/bionic/tesseract-ocr-eng https://packages.ubuntu.com/bionic/tesseract-ocr-fra https://packages.ubuntu.com/bionic/tesseract-ocr-spa https://packages.ubuntu.com/bionic/tesseract-ocr-ita https://packages.ubuntu.com/bionic/tesseract-ocr-por https://packages.ubuntu.com/bionic/tesseract-ocr-hin https://packages.ubuntu.com/bionic/tesseract-ocr-deu https://packages.ubuntu.com/bionic/tesseract-ocr-jpn https://packages.ubuntu.com/bionic/tesseract-ocr-rus https://packages.ubuntu.com/bionic/leptonica-progs https://packages.ubuntu.com/bionic/libleptonica-dev https://packages.ubuntu.com/bionic/libbz2-dev https://packages.ubuntu.com/bionic/libdjvulibre-dev https://packages.ubuntu.com/bionic/libexif-dev https://packages.ubuntu.com/bionic/libgif-dev https://packages.ubuntu.com/bionic/libjpeg8 https://packages.ubuntu.com/bionic/libjpeg-dev https://packages.ubuntu.com/bionic/liblqr-dev https://packages.ubuntu.com/bionic/libopenexr-dev https://packages.ubuntu.com/bionic/libopenjp2-7-dev https://packages.ubuntu.com/bionic/libpng-dev https://packages.ubuntu.com/bionic/libraw-dev https://packages.ubuntu.com/bionic/librsvg2-dev https://packages.ubuntu.com/bionic/libtiff-dev https://packages.ubuntu.com/bionic/libwmf-dev https://packages.ubuntu.com/bionic/libwebp-dev https://packages.ubuntu.com/bionic/libwmf-dev https://packages.ubuntu.com/bionic/zlib1g-dev IMAGEMAGICK_LIBS_EXTENDED https://packages.ubuntu.com/bionic/libfontconfig https://packages.ubuntu.com/bionic/libfreetype6-dev The following software packages will be handled and updated by curl . Please note there may be further dependencies and libraries updated. openjpeg https://github.com/uclouvain/openjpeg Last commit used: Nov 1, 2018 https://github.com/uclouvain/openjpeg/commit/0bc90e4062a5f9258c91eca018c019b179066c62 ImageMagick https://www.imagemagick.org curl -O -L https://www.imagemagick.org/download/ImageMagick.tar.gz convert -v Version: ImageMagick 7.0.8-13 Q16 x86_64 2018-10-22 https://imagemagick.org PHP ImageMagick latest (IMagick) http://pecl.php.net/package/imagick curl -O -L http://pecl.php.net/get/imagick Last released 2017-02-01 imagick-3.4.3.tgz Note: All packages within $BUILD_DEPS and software-properties-common are purged after install of Imagemagick. Not listed here. The following software packages will be handled and updated by composer . Please note there may be further dependencies and libraries updated. drush https://www.drush.org/ https://packagist.org/packages/drush drush --version Drush Version : 8.1.17 isle-apache - Software updates requiring manual changes and/or lookups confd https://github.com/kelseyhightower/confd/releases/download/v0.16.0/ confd-0.16.0-linux-amd64 version 0.16.0 No upgrade available at moment Adore-Djatoka https://sourceforge.mirrorservice.org/d/dj/djatoka/djatoka/1.1/adore-djatoka-1.1.tar.gz No upgrade possible composer https://getcomposer.org/ /usr/local/bin/composer --version Composer version 1.7.2 2018-08-16 16:57:12 wget -O composer-setup.php https://raw.githubusercontent.com/composer/getcomposer.org/2091762d2ebef14c02301f3039c41d08468fb49e/web/installer You'll need to visit https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md You may replace the commit hash by whatever the last commit hash is on https://github.com/composer/getcomposer.org/commits/master Or copy the hash from the last line Add it to the Dockerfile on line 201 after https://raw.githubusercontent.com/composer/getcomposer.org/ fits https://projects.iq.harvard.edu/fits/home curl -O -L https://projects.iq.harvard.edu/files/fits/files/fits-1.2.0.zip You'll need to visit https://projects.iq.harvard.edu/fits/home Click the Downloads button Check the version number e.g. fits-1.4.0.zip and the release date Nov 7, 2018 Update the Dockerfile on lines 213 & 214 with the new version. Actions Upgraded / Rebuilt openjpeg to latest Dec 21,2018 commit https://github.com/uclouvain/openjpeg/commit/51f097e6d5754ddae93e716276fe8176b44ec548 Upgraded Imagemagick to version ImageMagick-7.0.8-34.x86_64 Upgraded Composer to version 1.84 Upgraded Drush to 8.2.1 with 8.1.18 as fallback Upgraded FITS to 1.4 (Nov 2018) Run package updates (Optional) Manual method of reviewing image docker run -p 80:80 -it --rm islandoracollabgroup/isle-apache:1.1 bash Review & Build Process Assumptions: The isle-ubuntu-basebox & isle-tomcat images have been already updated, built and pushed to Dockerhub. This image will work (build) from those foundational images. Start the update process with the isle-apache image Clone down the FORKED isle-apache to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: change the tag from FROM islandoracollabgroup/isle-ubuntu-basebox:x to isle-ubuntu-basebox:1.1.1 Line 195: change the composer download hash COMPOSER_HASH:-x to the newest one used on the composer website. (usually a long string of alpha-numeric characters) Line 196: Change FITS_VERSION:-x.x.x to FITS_VERSION:-1.4.0 Commit the changes to git Build the image open a terminal cd ~/pathto/isle-apache docker build -t islandoracollabgroup/isle-apache:1.1.1 . Test with new images Review & Build Process EXAMPLE / REFERENCE COMMAND Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME . EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=30d63d6db0007e3682037e5759e0ffcd9e47d203 --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-apache:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-apache:1.1.1 Tagging Suggested Outcome: deprecate 2.4 tag to 1.0 (April 2018) 1.1 (last image build from 11/05/2018) 1.1.1 (new image build with sec updates 3/22/2019) latest (new image build with sec updates 3/20/2019) deprecate the development tag isle-mysql Image name: islandoracollabgroup / isle-mysql Last Build: 1.1 / latest (Last built 5 months ago) Sept 15, 2018 was last build This is an official image which uses mysql 5.7 https://github.com/docker-library/mysql/blob/bb7ea52db4e12d3fb526450d22382d5cd8cd41ca/5.7/Dockerfile ^ Just check for this MySQL mysql --version mysql Ver 14.14 Distrib 5.7.23, for Linux (x86_64) using EditLine wrapper Recommendations Upgrade this image by simple reruning the build process. It will pull the newest version ( 5.7.25-1debian9 )of the official image. (Optional) Manual method of reviewing image docker run -p 3306:3306 -it --rm islandoracollabgroup/isle-mysql:1.1 bash Review & Build Process Start the update process with the isle-mysql image Clone down the FORKED isle-mysql to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line: None to be edited at this point Commit the changes to git Build the image open a terminal cd ~/pathto/isle-mysql docker build -t islandoracollabgroup/isle-mysql:1.1.1 . Test with new images Run Makefile with docker-build etc. docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=6473095566c24684eaf483b19169bdf87af04be5 --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-mysql:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-mysql:1.1.1 Test with new image Tagging Suggested outcome: 1.0 (last image build from 9/14/2018) 1.1 (last image build from 9/15/2018) 1.1.1 (new image build with sec updates 3/25/2019) latest (new image build with sec updates 3/25/2019) deprecate 5.6 (april 2018) fix latest from april 2018 to 3/25/2019) All images - Testing Spin up and QC Did all containers start? Install site docker exec -it isle-apache-ld bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh Test ingest for all content types All images - Release Image Code - git push image repo edits to personal / company remotes ISLE code comment out build / context blocks and any other local dev edits","title":"ISLE Build Process"},{"location":"contributor-docs/build-guide-v111/#isle-build-process","text":"","title":"ISLE Build Process"},{"location":"contributor-docs/build-guide-v111/#build-setup","text":"Clear / prune old docker images from local docker image ls docker image rm -f <Docker IMAGE ID> Fork ISLE to personal / company github.com repo https://github.com/Islandora-Collaboration-Group/ISLE Fork ISLE-Documentation to personal / company github.com repo ISLE-Documentation https://github.com/Islandora-Collaboration-Group/ISLE-Documentation Fork all ISLE images to personal / company github.com repos isle-ubuntu-basebox https://github.com/Islandora-Collaboration-Group/isle-ubuntu-basebox isle-tomcat https://github.com/Islandora-Collaboration-Group/isle-tomcat isle-fedora https://github.com/Islandora-Collaboration-Group/isle-fedora isle-imageservices https://github.com/Islandora-Collaboration-Group/isle-imageservices isle-solr https://github.com/Islandora-Collaboration-Group/isle-solr isle-apache https://github.com/Islandora-Collaboration-Group/isle-apache isle-mysql https://github.com/Islandora-Collaboration-Group/isle-mysql Git clone the forked ISLE project git repo to your local development workstation. Git clone the forked ISLE images git repos into a sibling \"images\" directory Git clone the forked ISLE-Documentation git repo to your local development workstation. Git checkout (make new) release branch in each repo for each image starting with and descending in this order: isle-ubuntu-basebox isle-tomcat isle-fedora isle-imageservices isle-solr isle-apache isle-mysql ISLE (main project) ISLE-Documentation","title":"Build Setup"},{"location":"contributor-docs/build-guide-v111/#build-steps","text":"","title":"Build Steps"},{"location":"contributor-docs/build-guide-v111/#isle","text":"ISLE - uncomment all build / context blocks in the main docker-compose.yml file ISLE - Edit the traefik magic number (Line 133) within the docker-compose.yml file","title":"ISLE"},{"location":"contributor-docs/build-guide-v111/#all-images","text":"Images - update \"magic\" numbers within each Dockerfile. Images - Within a terminal, cd to each cloned forked image directory. Run build command per image one at a time: docker build - islandoracollabgroup/isle-image:1.1.1 If the build works without error, then the image is tagged, can be tested locally and move onto the next image in order. Repeat this process and command for each image (7 times)","title":"All Images"},{"location":"contributor-docs/build-guide-v111/#isle-ubuntu-basebox","text":"Start with this image first before all others. Image name: islandoracollabgroup / isle-ubuntu-basebox Last build: 1.1 / latest (Last built 4 months ago) Build date: Sept 27, 2018 This Dockerfile has the FROM: ubuntu:bionic which means it pulls from here: https://hub.docker.com/_/ubuntu https://github.com/tianon/docker-brew-ubuntu-core/blob/bfd753a747344ff1c6838a2c91ff0606e936f0d0/bionic/Dockerfile https://hub.docker.com/_/scratch","title":"isle-ubuntu-basebox"},{"location":"contributor-docs/build-guide-v111/#isle-ubuntu-basebox-software-dependencies","text":"The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/ca-certificates https://packages.ubuntu.com/bionic/dnsutils https://packages.ubuntu.com/bionic/curl https://packages.ubuntu.com/bionic/wget https://packages.ubuntu.com/bionic/rsync https://packages.ubuntu.com/bionic/git https://packages.ubuntu.com/bionic/unzip","title":"isle-ubuntu-basebox - Software Dependencies"},{"location":"contributor-docs/build-guide-v111/#isle-ubuntu-basebox-software-updates-requiring-manual-changes-andor-lookups-for-recent-versions","text":"S6 Overlay https://github.com/just-containers/s6-overlay S6_OVERLAY_VERSION:-1.21.4.0 https://github.com/just-containers/s6-overlay/releases/download/v$S6_OVERLAY_VERSION/s6-overlay-amd64.tar.gz https://github.com/just-containers/s6-overlay/releases Java Version Lookup URLs: https://www.java.com/en/download/faq/release_dates.xml https://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html To determine the newest Java version and values to flow in: Visit https://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html Accept the License Agreement On the newest number e.g the bottom section i.e. Server JRE (Java SE Runtime Environment) 8u202 Right-click on the first Download link for Linux x64 e.g. server-jre-8u202-linux-x64.tar.gz and copy the link address. It should look like this: https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/server-jre-8u202-linux-x64.tar.gz ENV JAVA_VERSION=${JAVA_VERSION:-xxxxx} should be set to 8u202 ENV JAVA_BUILD=${JAVA_BUILD:-xxx} should be set to b08 ENV JAVA_SECURITY_BUILD=${JAVA_SECURITY_BUILD:-x.x.x_xxx} should be set to 1.8.0_202 This isn't particularly obvious from the URL per se. One can simply leave the 1.8.0_ alone and simply add the 202 as needed. ENV JAVA_SEC_HASH=${JAVA_SEC_HASH:-} - change or overwrite the value (random numbers) found between 8u202-b08/ & /server-jre-8u202-linux-x64.tar.gz in the written down URL from the look up process e.g. 1961070e4c9b4e26a04e7f5a083f551e after the -","title":"isle-ubuntu-basebox - Software updates requiring manual changes and/or lookups for recent versions."},{"location":"contributor-docs/build-guide-v111/#isle-ubuntu-basebox-build-actions-steps","text":"Start the update process with the isle-ubuntu-basebox image Clone down the FORKED isle-ubuntu-basebox to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 39: ENV S6_OVERLAY_VERSION=${S6_OVERLAY_VERSION:-x.xx.x.x} - change or overwrite with a value like 1.21.7.0 after the - Line 45: ENV JAVA_VERSION=${JAVA_VERSION:-xxxxx} - change or overwrite with a value like 8u202 after the - Line 46: ENV JAVA_BUILD=${JAVA_BUILD:-xxx} - change or overwrite with a value like b08 after the - Line 47: ENV JAVA_SECURITY_BUILD=${JAVA_SECURITY_BUILD:-x.x.x_xxx} - change or overwrite with a value like 1.8.0_202 after the - This isn't particularly obvious from the resource URL per se. One can simply leave the 1.8.0_ alone and simply add the 202 as needed. Line 48: ENV JAVA_SEC_HASH=${JAVA_SEC_HASH:-} - change or overwrite with a value like 1961070e4c9b4e26a04e7f5a083f551e after the - This is the random sequence of numbers from the URL e.g. https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/server-jre-8u202-linux-x64.tar.gz Makefile S6_OVERLAY_VERSION=x.xx.x.x - change or overwrite with a value like 1.21.7.0 after the = JAVA_VERSION=xxxxx - change or overwrite with a value like 8u202 after the = JAVA_BUILD=xxx - change or overwrite with a value like b08 after the = JAVA_SECURITY_BUILD=x.x.x_xxx - change or overwrite with a value like 1.8.0_202 after the = JAVA_SEC_HASH= - change or overwrite with a value like 1961070e4c9b4e26a04e7f5a083f551e after the - This is the random sequence of numbers from the URL e.g. https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/server-jre-8u202-linux-x64.tar.gz Commit the changes to git Build the image open a terminal cd ~/pathto/isle-ubuntu-basebox docker build -t islandoracollabgroup/isle-ubuntu-basebox:1.1.1 . Then move onto building the next image in the sequence prior to testing","title":"isle-ubuntu-basebox - Build Actions / Steps"},{"location":"contributor-docs/build-guide-v111/#optional-manual-method-of-reviewing-image","text":"docker run -it --rm islandoracollabgroup/isle-ubuntu-basebox bash","title":"(Optional) Manual method of reviewing image"},{"location":"contributor-docs/build-guide-v111/#isle-ubuntu-basebox-post-qc-release-build-image","text":"open a terminal cd ~/pathto/isle-ubuntu-basebox","title":"isle-ubuntu-basebox - Post QC - Release build image"},{"location":"contributor-docs/build-guide-v111/#example-reference-command","text":"Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME .","title":"EXAMPLE / REFERENCE COMMAND"},{"location":"contributor-docs/build-guide-v111/#example-actual-command-w-forked-commit-hash","text":"This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=a6f60de7619724485c287f19e7bd59d74190fd60 \\ --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t islandoracollabgroup/isle-ubuntu-basebox:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-ubuntu-basebox:1.1.1 Test with new images","title":"EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH"},{"location":"contributor-docs/build-guide-v111/#isle-ubuntu-basebox-tagging-outcome","text":"1.1 (last image build from 9/27/2018) leave alone 1.1.1 (new image build with sec updates 3/22/2019) latest (new image build with sec updates 3/22/2019) deprecate for future removal serverjr8 ( last image build from 9/27/2018)","title":"isle-ubuntu-basebox - Tagging outcome"},{"location":"contributor-docs/build-guide-v111/#isle-tomcat","text":"Image name: islandoracollabgroup / isle-tomcat Last build: 1.1 / latest (Last built 4 months ago) Build date: Sept 27, 2018","title":"isle-tomcat"},{"location":"contributor-docs/build-guide-v111/#isle-tomcat-software-dependencies","text":"The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/cron https://packages.ubuntu.com/bionic/tmpreaper https://packages.ubuntu.com/bionic/libapr1-dev https://packages.ubuntu.com/bionic/libssl-dev","title":"isle-tomcat - Software Dependencies"},{"location":"contributor-docs/build-guide-v111/#notes","text":"gcc - is installed for building tomcat from source and then removed from the final image make - is installed for building tomcat from source and then removed from the final image gcc-7-base - is installed for building tomcat from source and then removed from the final image","title":"Notes"},{"location":"contributor-docs/build-guide-v111/#isle-tomcat-software-updates-requiring-manual-changes-andor-lookups-for-recent-versions","text":"confd https://github.com/kelseyhightower/confd/releases/download/v0.16.0 No upgrade available at this time. tomcat http://tomcat.apache.org/ https://tomcat.apache.org/download-80.cgi TOMCAT_MAJOR=${TOMCAT_MAJOR:-8} TOMCAT_VERSION=${TOMCAT_VERSION:-8.5.34} curl -O -L \"https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz\" && \\","title":"isle-tomcat - Software updates requiring manual changes and/or lookups for recent versions."},{"location":"contributor-docs/build-guide-v111/#isle-tomcat-build-actions-steps","text":"Assumptions: The isle-ubuntu-basebox has been already updated, built and pushed to Dockerhub. This image will work (build) from that foundational image. Start the update process with the isle-tomcat image Clone down the FORKED isle-tomcat to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: FROM islandoracollabgroup/isle-ubuntu-basebox:serverjre8 change the tag to 1.1.1 e.g. islandoracollabgroup/isle-ubuntu-basebox:1.1.1 Line 44: TOMCAT_VERSION=${TOMCAT_VERSION:-x.x.xx} - change or overwrite with a value like 8.5.39 after the - Commit the changes to git Build the image open a terminal cd ~/pathto/isle-tomcat docker build -t islandoracollabgroup/isle-tomcat:1.1.1 . Then move onto building the next image in the sequence prior to testing","title":"isle-tomcat - Build Actions / Steps"},{"location":"contributor-docs/build-guide-v111/#optional-manual-method-of-reviewing-image_1","text":"docker run -p 8080:8080 -it --rm islandoracollabgroup/isle-tomcat:1.1.1 bash","title":"(Optional) Manual method of reviewing image"},{"location":"contributor-docs/build-guide-v111/#isle-tomcat-post-qc-release-build-image","text":"open a terminal cd ~/pathto/isle-tomcat","title":"isle-tomcat - Post QC - Release Build image"},{"location":"contributor-docs/build-guide-v111/#example-reference-command_1","text":"Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME .","title":"EXAMPLE / REFERENCE COMMAND"},{"location":"contributor-docs/build-guide-v111/#example-actual-command-w-forked-commit-hash_1","text":"This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=6fb610e9ab1eab68f819fa9ded0bc678c4db385c --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-tomcat:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-tomcat:1.1.1","title":"EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH"},{"location":"contributor-docs/build-guide-v111/#isle-tomcat-tagging-outcome","text":"Suggested outcome: 1.1 (last image build from 9/27/2018) 1.1.1 (new image build with sec updates 3/20/2019) * latest (new image build with sec updates 3/20/2019) deprecate serverjr8 (last image build from 9/27/2018)","title":"isle-tomcat - Tagging outcome"},{"location":"contributor-docs/build-guide-v111/#isle-fedora","text":"Image name: islandoracollabgroup / isle-fedora Last build: 1.1 (Last built 4 months ago) Build date: Oct 10, 2018","title":"isle-fedora"},{"location":"contributor-docs/build-guide-v111/#isle-fedora-software-dependencies","text":"The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/mysql-client https://packages.ubuntu.com/bionic/python-mysqldb https://packages.ubuntu.com/bionic/default-libmysqlclient-dev https://packages.ubuntu.com/bionic/openssl https://packages.ubuntu.com/bionic/libxml2-dev","title":"isle-fedora - Software Dependencies"},{"location":"contributor-docs/build-guide-v111/#isle-fedora-software-updates-requiring-manual-changes-andor-lookups-for-recent-versions","text":"Fedora https://github.com/fcrepo3/fcrepo https://github.com/fcrepo3/fcrepo/releases/download/v3.8.1/fcrepo-installer-3.8.1.jar version 3.8.1 Not eligible for upgrade Gsearch v2.9.0 git clone https://github.com/discoverygarden/gsearch.git Latest commit 701400e on Dec 11, 2017 Not eligible for upgrade DGI Gsearch Extensions `https://github.com/discoverygarden/dgi_gsearch_extensions.git v.0.1.3 /usr/local/tomcat/webapps/fedoragsearch/WEB-INF/lib/gsearch_extensions-0.1.3-jar-with-dependencies.jar Last commit was June 16, 2017 https://github.com/discoverygarden/dgi_gsearch_extensions/commit/35f37a486cc5ba748fcee9a4f95b98187b1c6731 Not eligible for upgrade Islandora XACML policies https://github.com/Islandora/islandora-xacml-policies Previous build (Oct 10, 2018) uses this commit https://github.com/Islandora/islandora-xacml-policies/commit/40663fbb0f8de7e45d14fc1ebc6b7e8dc04cffb9 Latest is new commit Jan 2019 https://github.com/Islandora/islandora-xacml-policies/commit/73deba6b90f6de40d72c890233ba6ff0159031de Islandora Drupal Filter Built Oct 10, 2018 https://github.com/Islandora/islandora_drupal_filter Build uses this release * v7.1.9 https://github.com/Islandora/islandora_drupal_filter/releases/download/v7.1.9/fcrepo-drupalauthfilter-3.8.1.jar Latest is: 7.1.12 https://github.com/Islandora/islandora_drupal_filter/releases/tag/7.1.12 Apache Maven https://maven.apache.org/index.html version used 3.5.4 on Oct 10, 2018 curl -O -L \"https://www.apache.org/dyn/closer.cgi?action=download&filename=maven/maven-$MAVEN_MAJOR/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz\" Apache Ant https://ant.apache.org/ version used 1.10.5 on Oct 10, 2018 curl -O -L \"https://www.apache.org/dyn/closer.cgi?action=download&filename=ant/binaries/apache-ant-$ANT_VERSION-bin.tar.gz\" DGI Basic-Solr Config The git branch to clone from is: -b 4.10.x https://github.com/discoverygarden/basic-solr-config.git Oct 10 was build date so the last commit used (version) was on Sept 21, 2018 https://github.com/discoverygarden/basic-solr-config/commit/0282f703a486ab89c7bbded6af846540be234833 \"Magic number\" comparison process for release notes: cd /tmp git clone --recursive -b 4.10.x https://github.com/discoverygarden/basic-solr-config.git old git clone --recursive -b 4.10.x https://github.com/discoverygarden/basic-solr-config.git new Check build date on last Dockerhub push e.g. Oct 10, 2018 Check commits page https://github.com/discoverygarden/basic-solr-config/commits/4.10.x Determine which commit came on or before Oct 10, 2018 e.g. Sept 21, 2018 0282f703a486ab89c7bbded6af846540be234833 ( you can click the clipboard to copy this value ) cd /tmp/old git checkout last used build commit i.e. git checkout 0282f703a486ab89c7bbded6af846540be234833 Compare both directories using a visual diff tool like Kaleidoscope (MAC), diff or KDiff3 (Linux) Note the differences in files and the line numbers for inclusion in release notes. foxmlToSolr.xslt - Lines 47 & 48 - New lines added README.md - Lines 31 & 32 explanations for the line additions in foxmlToSolr.xslt DGI Islandora Transforms git submodule of DGI Basic-Solr Config https://github.com/discoverygarden/islandora_transforms Oct 10 was build date so the last commit used (version) was on Sept 21, 2018 https://github.com/discoverygarden/islandora_transforms/commit/ee7e9d32a71381abfa5c3ead13255c0c5b66ed45 Newest commit: March 19, 2019 https://github.com/discoverygarden/islandora_transforms/commit/cdfef63b7e2f6740c06e56bfa32d496c09837ae8 \"Magic number\" comparison process for release notes: cd /tmp git clone https://github.com/discoverygarden/islandora_transforms old git clone https://github.com/discoverygarden/islandora_transforms new Check build date on last Dockerhub push e.g. Oct 10, 2018 Check commits page https://github.com/discoverygarden/islandora_transforms/commits/master Determine which commit came on or before Oct 10, 2018 e.g. Sept 21, 2018 ee7e9d32a71381abfa5c3ead13255c0c5b66ed45 ( you can click the clipboard to copy this value ) cd /tmp/old git checkout last used build commit i.e. git checkout ee7e9d32a71381abfa5c3ead13255c0c5b66ed45 Compare both directories using a visual diff tool like Kaleidoscope (MAC), diff or KDiff3 (Linux) Note the differences in files and the line numbers for inclusion in release notes. datastream_info_to_solr.xslt - Lines 35 - 49 - new lines & content added RELS-EXT_to_solr.xslt Line 7 - modified Line 8 - new line & content added Line 42 - new line & content added Line 49 - new line & content added slurp_all_MODS_to_solr.xslt - Lines 289 - 300 new lines & content added","title":"isle-fedora - Software updates requiring manual changes and/or lookups for recent versions"},{"location":"contributor-docs/build-guide-v111/#isle-fedora-build-actions-steps","text":"Assumptions: The isle-ubuntu-basebox & isle-tomcat images have been already updated, built and pushed to Dockerhub. This image will work (build) from those foundational images. Start the update process with the isle-fedora image Clone down the FORKED isle-fedora to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: change the tag from FROM islandoracollabgroup/isle-tomcat:x to isle-tomcat:1.1.1 Line 53: change vx.x.x in the curl url to v.7.1.12 Line 62: change MAVEN_VERSION:-x.x.x to MAVEN_VERSION:-3.6.0 Line 63: change ANT_VERSION:-x.xx.x to ANT_VERSION:-1.9.14 Commit the changes to git Build the image open a terminal cd ~/pathto/isle-fedora docker build -t islandoracollabgroup/isle-fedora:1.1.1 . Then move onto building the next image in the sequence prior to testing","title":"isle-fedora - Build Actions / Steps"},{"location":"contributor-docs/build-guide-v111/#isle-fedora-post-qc-release-build-image","text":"","title":"isle-fedora - Post QC - Release Build Image"},{"location":"contributor-docs/build-guide-v111/#example-reference-command_2","text":"Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME .","title":"EXAMPLE / REFERENCE COMMAND"},{"location":"contributor-docs/build-guide-v111/#example-actual-command-w-forked-commit-hash_2","text":"This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=180e2382626a6972b0251d18769c45e4a1e2d7cb --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-fedora:1.1.1 .","title":"EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH"},{"location":"contributor-docs/build-guide-v111/#optional-manual-method-of-reviewing-image_2","text":"docker run -p 8080:8080 -it --rm islandoracollabgroup/isle-fedora:1.1 bash Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-fedora:1.1.1 Test with new images","title":"(Optional) Manual method of reviewing image"},{"location":"contributor-docs/build-guide-v111/#isle-fedora-tagging-outcome","text":"Suggested outcome: 1.0 (9/7/2018) 1.1 (last image build from 10/10/2018) 1.1.1 (new image build with sec updates 3/20/2019) latest (new image build with sec updates 3/20/2019) leave blazegraph alone deprecate 1.dev what is this? Nov5th, 2018 deprecate 3.8.1","title":"isle-fedora -  Tagging Outcome"},{"location":"contributor-docs/build-guide-v111/#isle-imageservices","text":"Image name: islandoracollabgroup / isle-imageservices Last Build: 1.1 / latest (Last built 5 months ago) 1.11 is Sept 15, 2018 latest is Sept 7, 2018 ^ Needs fix","title":"isle-imageservices"},{"location":"contributor-docs/build-guide-v111/#isle-imageservices-software-dependencies","text":"The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/ffmpeg https://packages.ubuntu.com/bionic/ffmpeg2theora https://packages.ubuntu.com/bionic/libavcodec-extra https://packages.ubuntu.com/bionic/ghostscript https://packages.ubuntu.com/bionic/xpdf https://packages.ubuntu.com/bionic/poppler-utils NOTE: $BUILD_DEPS means all dev tools are uninstalled after building openjpeg from source","title":"isle-imageservices - Software Dependencies"},{"location":"contributor-docs/build-guide-v111/#isle-imageservices-software-updates-requiring-manual-changes-andor-lookups","text":"openjpeg https://github.com/uclouvain/openjpeg Last commit used: Sept 5, 2018 https://github.com/uclouvain/openjpeg/commit/31a03b390a77bfbe4b0f140121d1296acb611f76 Upgraded openjpeg to latest Dec 21,2018 commit https://github.com/uclouvain/openjpeg/commit/51f097e6d5754ddae93e716276fe8176b44ec548 Imagemagick https://www.imagemagick.org curl -O https://www.imagemagick.org/download/ImageMagick.tar.gz / usr/local/bin/convert -v` Version: ImageMagick 7.0.8-11 Q16 x86_64 2018-09-15 https://www.imagemagick.org Adore-Djatoka https://sourceforge.mirrorservice.org/d/dj/djatoka/djatoka/1.1/adore-djatoka-1.1.tar.gz No upgrade possible Cantaloupe https://github.com/medusa-project/cantaloupe v4.0.1 Going to hold off on an update due to delegates.rb and cantaloupe.properties files not being fully tested in the Islandora community. Don't attempt to upgrade Cantaloupe to v4.0.3 DUE to potential key changes and confusion over version usage.","title":"isle-imageservices - Software updates requiring manual changes and/or lookups"},{"location":"contributor-docs/build-guide-v111/#isle-imageservices-build-steps-actions","text":"Assumptions: The isle-ubuntu-basebox & isle-tomcat images have been already updated, built and pushed to Dockerhub. This image will work (build) from those foundational images. Start the update process with the isle-image-services image Clone down the FORKED isle-image-services to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: change the tag from FROM islandoracollabgroup/isle-tomcat:x to isle-tomcat:1.1.1 Line 87: change vx.x.x in the curl url to v4.0.1 (Not done on March 25) Commit the changes to git Build the image open a terminal cd ~/pathto/isle-image-services docker build -t islandoracollabgroup/isle-imageservices:1.1.1 . Then move onto building the next image in the sequence prior to testing Test with new images","title":"isle-imageservices - Build Steps / Actions"},{"location":"contributor-docs/build-guide-v111/#optional-manual-method-of-reviewing-image_3","text":"docker run -it -p \"8080:8080\" --rm islandoracollabgroup/isle-imageservices:1.1 bash","title":"(Optional) Manual method of reviewing image"},{"location":"contributor-docs/build-guide-v111/#isle-imageservices-post-qc-release-build-image","text":"","title":"isle-imageservices - Post QC - Release Build Image"},{"location":"contributor-docs/build-guide-v111/#example-reference-command_3","text":"Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME .","title":"EXAMPLE / REFERENCE COMMAND"},{"location":"contributor-docs/build-guide-v111/#example-actual-command-w-forked-commit-hash_3","text":"This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=6e7f82aa405848e05771ff6e926c6dc0f73fbb8f --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-imageservices:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-imageservices:1.1.1","title":"EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH"},{"location":"contributor-docs/build-guide-v111/#tagging","text":"Suggested outcome: 1.1 (last image build from 9/2018) 1.1.1 (new image build with sec updates 3/20/2019) * latest (new image build with sec updates 3/20/2019)","title":"Tagging"},{"location":"contributor-docs/build-guide-v111/#isle-solr","text":"Image name: islandoracollabgroup / isle-solr Last Build: 1.1 / latest (Last built 3 months ago) November 5th, 2018 Solr v4.10.4 curl -O -L http://archive.apache.org/dist/lucene/solr/$SOLR_VERSION/solr-$SOLR_VERSION.tgz http://archive.apache.org/dist/lucene/solr/4.10.4/ No apparent updates since 2015-03-03 DGI Basic-Solr Config The git branch to clone from is: -b 4.10.x https://github.com/discoverygarden/basic-solr-config.git But the area of this that is used is https://github.com/discoverygarden/basic-solr-config/tree/4.10.x/conf this has not changed since Aug 2107 https://github.com/discoverygarden/basic-solr-config/commit/a3457c2ec6a44cb5c74937b5e45056ab5ae99916","title":"isle-solr"},{"location":"contributor-docs/build-guide-v111/#actions","text":"Run package management updates but given this builds off the two previous images I'm not sure there are any changes per se.","title":"Actions"},{"location":"contributor-docs/build-guide-v111/#optional-manual-method-of-reviewing-image_4","text":"docker run -p 8080:8080 -it --rm islandoracollabgroup/isle-solr:1.1 bash","title":"(Optional) Manual method of reviewing image"},{"location":"contributor-docs/build-guide-v111/#review-build-process","text":"Assumptions: The isle-ubuntu-basebox & isle-tomcat images have been already updated, built and pushed to Dockerhub. This image will work (build) from those foundational images. Start the update process with the isle-solr image Clone down the FORKED isle-solr to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: change the tag from FROM islandoracollabgroup/isle-tomcat:x to isle-tomcat:1.1.1 Commit the changes to git Build the image open a terminal cd ~/pathto/isle-solr docker build -t islandoracollabgroup/isle-solr:1.1.1 . Test with new images","title":"Review &amp; Build Process"},{"location":"contributor-docs/build-guide-v111/#example-reference-command_4","text":"Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME .","title":"EXAMPLE / REFERENCE COMMAND"},{"location":"contributor-docs/build-guide-v111/#example-actual-command-w-forked-commit-hash_4","text":"This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=730d9ee566a55430d81d0691fb6b3370aa9148ed --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-solr:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-solr:1.1.1","title":"EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH"},{"location":"contributor-docs/build-guide-v111/#tagging_1","text":"Suggested outcome 1.1 (last image build from 9/2018) 1.1.1 (new image build with sec updates 3/20/2019) * latest (new image build with sec updates 3/20/2019) deprecate 4.10.4 tag","title":"Tagging"},{"location":"contributor-docs/build-guide-v111/#isle-apache","text":"Image name: islandoracollabgroup / isle-apache Last Build: 1.1 / latest (Last built 3 months ago) Last build: November 5th, 2018","title":"isle-apache"},{"location":"contributor-docs/build-guide-v111/#software-dependencies","text":"The following software packages will be handled and updated by apt-get . Please note there may be further dependencies and libraries updated. GEN_DEP_PACKS https://packages.ubuntu.com/bionic/language-pack-en-base https://packages.ubuntu.com/bionic/tmpreaper https://packages.ubuntu.com/bionic/cron https://packages.ubuntu.com/bionic/xz-utils https://packages.ubuntu.com/bionic/zip https://packages.ubuntu.com/bionic/bzip2 https://packages.ubuntu.com/bionic/openssl https://packages.ubuntu.com/bionic/openssh-client https://packages.ubuntu.com/bionic/mysql-client https://packages.ubuntu.com/bionic/file FFMPEG_PACKS https://packages.ubuntu.com/bionic/ffmpeg https://packages.ubuntu.com/bionic/ffmpeg2theora https://packages.ubuntu.com/bionic/libavcodec-extra https://packages.ubuntu.com/bionic/ghostscript https://packages.ubuntu.com/bionic/xpdf https://packages.ubuntu.com/bionic/poppler-utils APACHE_PACKS https://packages.ubuntu.com/bionic/apache2 https://packages.ubuntu.com/bionic/python-mysqldb https://packages.ubuntu.com/bionic/libxml2-dev https://packages.ubuntu.com/bionic/libapache2-mod-php5.6 https://packages.ubuntu.com/bionic/libcurl3-openssl-dev https://packages.ubuntu.com/bionic/php5.6 https://packages.ubuntu.com/bionic/php5.6-cli https://packages.ubuntu.com/bionic/php5.6-json https://packages.ubuntu.com/bionic/php5.6-common https://packages.ubuntu.com/bionic/php5.6-readline https://packages.ubuntu.com/bionic/php-pear https://packages.ubuntu.com/bionic/php5.6-curl https://packages.ubuntu.com/bionic/php5.6-mbstring https://packages.ubuntu.com/bionic/php5.6-xmlrpc https://packages.ubuntu.com/bionic/php5.6-dev https://packages.ubuntu.com/bionic/php5.6-gd https://packages.ubuntu.com/bionic/php5.6-ldap https://packages.ubuntu.com/bionic/php5.6-xml https://packages.ubuntu.com/bionic/php5.6-mcrypt https://packages.ubuntu.com/bionic/php5.6-mysql https://packages.ubuntu.com/bionic/php5.6-soap https://packages.ubuntu.com/bionic/php5.6-xsl https://packages.ubuntu.com/bionic/php5.6-zip https://packages.ubuntu.com/bionic/php5.6-bcmath https://packages.ubuntu.com/bionic/php5.6-intl https://packages.ubuntu.com/bionic/php-uploadprogress https://packages.ubuntu.com/bionic/php-xdebug https://packages.ubuntu.com/bionic/bibutils https://packages.ubuntu.com/bionic/libicu-dev https://packages.ubuntu.com/bionic/tesseract-ocr https://packages.ubuntu.com/bionic/tesseract-ocr-eng https://packages.ubuntu.com/bionic/tesseract-ocr-fra https://packages.ubuntu.com/bionic/tesseract-ocr-spa https://packages.ubuntu.com/bionic/tesseract-ocr-ita https://packages.ubuntu.com/bionic/tesseract-ocr-por https://packages.ubuntu.com/bionic/tesseract-ocr-hin https://packages.ubuntu.com/bionic/tesseract-ocr-deu https://packages.ubuntu.com/bionic/tesseract-ocr-jpn https://packages.ubuntu.com/bionic/tesseract-ocr-rus https://packages.ubuntu.com/bionic/leptonica-progs https://packages.ubuntu.com/bionic/libleptonica-dev https://packages.ubuntu.com/bionic/libbz2-dev https://packages.ubuntu.com/bionic/libdjvulibre-dev https://packages.ubuntu.com/bionic/libexif-dev https://packages.ubuntu.com/bionic/libgif-dev https://packages.ubuntu.com/bionic/libjpeg8 https://packages.ubuntu.com/bionic/libjpeg-dev https://packages.ubuntu.com/bionic/liblqr-dev https://packages.ubuntu.com/bionic/libopenexr-dev https://packages.ubuntu.com/bionic/libopenjp2-7-dev https://packages.ubuntu.com/bionic/libpng-dev https://packages.ubuntu.com/bionic/libraw-dev https://packages.ubuntu.com/bionic/librsvg2-dev https://packages.ubuntu.com/bionic/libtiff-dev https://packages.ubuntu.com/bionic/libwmf-dev https://packages.ubuntu.com/bionic/libwebp-dev https://packages.ubuntu.com/bionic/libwmf-dev https://packages.ubuntu.com/bionic/zlib1g-dev IMAGEMAGICK_LIBS_EXTENDED https://packages.ubuntu.com/bionic/libfontconfig https://packages.ubuntu.com/bionic/libfreetype6-dev The following software packages will be handled and updated by curl . Please note there may be further dependencies and libraries updated. openjpeg https://github.com/uclouvain/openjpeg Last commit used: Nov 1, 2018 https://github.com/uclouvain/openjpeg/commit/0bc90e4062a5f9258c91eca018c019b179066c62 ImageMagick https://www.imagemagick.org curl -O -L https://www.imagemagick.org/download/ImageMagick.tar.gz convert -v Version: ImageMagick 7.0.8-13 Q16 x86_64 2018-10-22 https://imagemagick.org PHP ImageMagick latest (IMagick) http://pecl.php.net/package/imagick curl -O -L http://pecl.php.net/get/imagick Last released 2017-02-01 imagick-3.4.3.tgz Note: All packages within $BUILD_DEPS and software-properties-common are purged after install of Imagemagick. Not listed here. The following software packages will be handled and updated by composer . Please note there may be further dependencies and libraries updated. drush https://www.drush.org/ https://packagist.org/packages/drush drush --version Drush Version : 8.1.17","title":"Software Dependencies"},{"location":"contributor-docs/build-guide-v111/#isle-apache-software-updates-requiring-manual-changes-andor-lookups","text":"confd https://github.com/kelseyhightower/confd/releases/download/v0.16.0/ confd-0.16.0-linux-amd64 version 0.16.0 No upgrade available at moment Adore-Djatoka https://sourceforge.mirrorservice.org/d/dj/djatoka/djatoka/1.1/adore-djatoka-1.1.tar.gz No upgrade possible composer https://getcomposer.org/ /usr/local/bin/composer --version Composer version 1.7.2 2018-08-16 16:57:12 wget -O composer-setup.php https://raw.githubusercontent.com/composer/getcomposer.org/2091762d2ebef14c02301f3039c41d08468fb49e/web/installer You'll need to visit https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md You may replace the commit hash by whatever the last commit hash is on https://github.com/composer/getcomposer.org/commits/master Or copy the hash from the last line Add it to the Dockerfile on line 201 after https://raw.githubusercontent.com/composer/getcomposer.org/ fits https://projects.iq.harvard.edu/fits/home curl -O -L https://projects.iq.harvard.edu/files/fits/files/fits-1.2.0.zip You'll need to visit https://projects.iq.harvard.edu/fits/home Click the Downloads button Check the version number e.g. fits-1.4.0.zip and the release date Nov 7, 2018 Update the Dockerfile on lines 213 & 214 with the new version.","title":"isle-apache - Software updates requiring manual changes and/or lookups"},{"location":"contributor-docs/build-guide-v111/#actions_1","text":"Upgraded / Rebuilt openjpeg to latest Dec 21,2018 commit https://github.com/uclouvain/openjpeg/commit/51f097e6d5754ddae93e716276fe8176b44ec548 Upgraded Imagemagick to version ImageMagick-7.0.8-34.x86_64 Upgraded Composer to version 1.84 Upgraded Drush to 8.2.1 with 8.1.18 as fallback Upgraded FITS to 1.4 (Nov 2018) Run package updates","title":"Actions"},{"location":"contributor-docs/build-guide-v111/#optional-manual-method-of-reviewing-image_5","text":"docker run -p 80:80 -it --rm islandoracollabgroup/isle-apache:1.1 bash","title":"(Optional) Manual method of reviewing image"},{"location":"contributor-docs/build-guide-v111/#review-build-process_1","text":"Assumptions: The isle-ubuntu-basebox & isle-tomcat images have been already updated, built and pushed to Dockerhub. This image will work (build) from those foundational images. Start the update process with the isle-apache image Clone down the FORKED isle-apache to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line 1: change the tag from FROM islandoracollabgroup/isle-ubuntu-basebox:x to isle-ubuntu-basebox:1.1.1 Line 195: change the composer download hash COMPOSER_HASH:-x to the newest one used on the composer website. (usually a long string of alpha-numeric characters) Line 196: Change FITS_VERSION:-x.x.x to FITS_VERSION:-1.4.0 Commit the changes to git Build the image open a terminal cd ~/pathto/isle-apache docker build -t islandoracollabgroup/isle-apache:1.1.1 . Test with new images","title":"Review &amp; Build Process"},{"location":"contributor-docs/build-guide-v111/#review-build-process_2","text":"","title":"Review &amp; Build Process"},{"location":"contributor-docs/build-guide-v111/#example-reference-command_5","text":"Review this syntax first to understand how to construct the build command that follows. docker build \\ --build-arg BUILD_DATE=`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ --build-arg VCS_REF=$SOURCE_COMMIT \\ --build-arg VERSION=RC-`date -u \\+\"%Y-%m-%dT%H:%M:%SZ\"` \\ -t $IMAGE_NAME .","title":"EXAMPLE / REFERENCE COMMAND"},{"location":"contributor-docs/build-guide-v111/#example-actual-command-w-forked-commit-hash_5","text":"This will be the command to use and construct to build an image to push to Dockerhub. Please note that VCS_REF uses the last git commit hash from the forked branch on the image prior to merge in ISLE master . docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=30d63d6db0007e3682037e5759e0ffcd9e47d203 --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-apache:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-apache:1.1.1","title":"EXAMPLE / ACTUAL COMMAND W/ FORKED COMMIT HASH"},{"location":"contributor-docs/build-guide-v111/#tagging_2","text":"Suggested Outcome: deprecate 2.4 tag to 1.0 (April 2018) 1.1 (last image build from 11/05/2018) 1.1.1 (new image build with sec updates 3/22/2019) latest (new image build with sec updates 3/20/2019) deprecate the development tag","title":"Tagging"},{"location":"contributor-docs/build-guide-v111/#isle-mysql","text":"Image name: islandoracollabgroup / isle-mysql Last Build: 1.1 / latest (Last built 5 months ago) Sept 15, 2018 was last build This is an official image which uses mysql 5.7 https://github.com/docker-library/mysql/blob/bb7ea52db4e12d3fb526450d22382d5cd8cd41ca/5.7/Dockerfile ^ Just check for this MySQL mysql --version mysql Ver 14.14 Distrib 5.7.23, for Linux (x86_64) using EditLine wrapper","title":"isle-mysql"},{"location":"contributor-docs/build-guide-v111/#recommendations","text":"Upgrade this image by simple reruning the build process. It will pull the newest version ( 5.7.25-1debian9 )of the official image.","title":"Recommendations"},{"location":"contributor-docs/build-guide-v111/#optional-manual-method-of-reviewing-image_6","text":"docker run -p 3306:3306 -it --rm islandoracollabgroup/isle-mysql:1.1 bash","title":"(Optional) Manual method of reviewing image"},{"location":"contributor-docs/build-guide-v111/#review-build-process_3","text":"Start the update process with the isle-mysql image Clone down the FORKED isle-mysql to your local development workstation. Create a new branch e.g. ISLE-v.1.1.1 Edit the following files with the version changes: Dockerfile Line: None to be edited at this point Commit the changes to git Build the image open a terminal cd ~/pathto/isle-mysql docker build -t islandoracollabgroup/isle-mysql:1.1.1 . Test with new images Run Makefile with docker-build etc. docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=6473095566c24684eaf483b19169bdf87af04be5 --build-arg VERSION=RC-`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` -t islandoracollabgroup/isle-mysql:1.1.1 . Push built images to Dockerhub with new tag docker push islandoracollabgroup/isle-mysql:1.1.1 Test with new image","title":"Review &amp; Build Process"},{"location":"contributor-docs/build-guide-v111/#tagging_3","text":"Suggested outcome: 1.0 (last image build from 9/14/2018) 1.1 (last image build from 9/15/2018) 1.1.1 (new image build with sec updates 3/25/2019) latest (new image build with sec updates 3/25/2019) deprecate 5.6 (april 2018) fix latest from april 2018 to 3/25/2019)","title":"Tagging"},{"location":"contributor-docs/build-guide-v111/#all-images-testing","text":"Spin up and QC Did all containers start? Install site docker exec -it isle-apache-ld bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh Test ingest for all content types","title":"All images - Testing"},{"location":"contributor-docs/build-guide-v111/#all-images-release","text":"Image Code - git push image repo edits to personal / company remotes ISLE code comment out build / context blocks and any other local dev edits","title":"All images  - Release"},{"location":"contributor-docs/build-guide/","text":"Expectations: It can take an up to an average of 2 -4 hours to read this documentation and complete this installation. Highly dependent on the Developer's local laptop and Internet speed. Caution : This guide is recommended for ISLE Committers or Developers only and not for end-users. ISLE Committers are to follow this guide to build the five Docker ISLE images using the docker-compose-build.yml file. Developers can follow this guide if they have edited their Dockerfiles with custom software and they then can push to their own Docker image repository. These images will contain the necessary base code, scripts and files to run the default sample https://isle.localdomain . The Demo ISLE Installation creates a local Islandora platform ( https://isle.localdomain ) on your workstation. This process includes an un-themed Drupal website and an empty Fedora repository so you may ingest test objects, add or edit metadata, update fields in SOLR indexing, develop code, and otherwise \"kick the tires\" on ISLE. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites Laptop / workstation that conforms to the specifications outlined in the Hardware Requirements This image build site guide is designed for a local laptop / workstation that has already followed the appropriate setup and configuration instructions in the Demo ISLE Installation guide. Instructions below assume a MacOS or Linux workstation. Windows users may have to adjust / swap out various tools as needed. The ISLE project has been cloned from the ISLE project repository using the master branch. Do not build ISLE images with untested and developmental code. Only stable releases please. Having a cleaned up system prior to any build is key. Ensure that all local development containers, volumes and images associated with the build are deleted. Otherwise previously unaltered data or configurations could break or alter negatively the new images. ISLE Committers, Developers have pre-existing knowledge or familiarity with Dockerfiles , the Docker Build process and pushing Docker images to repositories. Dockerfiles , their editing process and compositions are familiar or known concepts. ISLE Committers should already have access to the ISLE Dockerhub image repository. Developers should have already setup their own separate Docker image repository. e.g. Dockerhub following that site's instructions. Developers are free to mix official ISLE images with your own custom image build. Best practice would be to create new Dockerfiles that use the official ISLE images as the base image to build from. Step 1: Ensure There Are No Local ISLE Docker Images Present If performing a brand new image build, the ISLE Committer will need to ensure there are no previous image builds or cached build data. docker image ls Remove any ISLE images by selecting their IMAGE ID Example: docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE islandoracollabgroup/isle-proxy 1.13 7cbd80c8b043 13 days ago 109MB islandoracollabgroup/isle-proxy latest 7cbd80c8b043 13 days ago 109MB islandoracollabgroup/isle-apache 2.4 ba6505e7a428 13 days ago 2.25GB islandoracollabgroup/isle-apache latest ba6505e7a428 13 days ago 2.25GB islandoracollabgroup/isle-apache <none> 9bc727f301b8 2 weeks ago 2.25GB islandoracollabgroup/isle-proxy <none> 23cb1c73c232 2 weeks ago 109MB docker image rm -f 7cbd80c8b043 docker image rm -f ba6505e7a428 docker image rm -f 7cbd80c8b043 docker image rm -f 9bc727f301b8 docker image rm -f 23cb1c73c232 Step 2: Rename the docker-compose.yml File Rename the docker-compose.yml file to docker-compose.bak Step 3: Rename the docker-compose-build.yml File Rename the docker-compose-build.yml file to docker-compose.yml Step 3a: Alternative for Non-ISLE Committers only (e.g. developers) If you're working in your own dockerhub environment (ie, not the offical islandoracollabgroup environment, then you'll need to change the following lines in the newly renamed docker-compose.yml file. image: islandoracollabgroup/isle-mysql:latest image: islandoracollabgroup/isle-fedora:latest image: islandoracollabgroup/isle-apache:latest image: islandoracollabgroup/isle-solr:latest image: islandoracollabgroup/isle-proxy:latest to image: yourdockerimagerepo_orgname/isle-mysql:latest image: yourdockerimagerepo_orgname/isle-fedora:latest image: yourdockerimagerepo_orgname/isle-apache:latest image: yourdockerimagerepo_orgname/isle-solr:latest image: yourdockerimagerepo_orgname/isle-proxy:latest Change only the images you need to rebuild or customize. Step 4: Build the Images in this Suggested Order Please perform these steps one at time. If any errors occur during the build process, troubleshoot and edit the associated Dockerfile. docker-compose build mysql docker-compose build fedora docker-compose build apache docker-compose build proxy docker-compose build solr Step 5: Tag the Resulting Images This renamed docker-compose-build.yml file will tag all builds by default with the latest tag. Review the current tags found on the Docker Containers & Images Specifications Page. Should the software version change, update this document with the new tags. You will need to tag each image further as needed. There are always two tags for every image, e.g. latest and the specific version of the primary software package used on the image or container. It is possible there will be more tags for different image versions in the future. For example if the installed proxy nginx software changes from 1.13 to 1.14 , change or add the new tag of 1.14 To learn more about tagging, read the official Docker tag documentation. To tag images: docker image ls ( to see the new IMAGE IDs ) docker tag IMAGE ID image/TAG IMAGE ID is the 12-character identification string for the image (listed from the Docker images command), and TAG is our newly created versioning tag. So our command to tag a new proxy image would be: docker tag 7cbd80c8b043 islandoracollabgroup/isle-proxy:1.13 Please note: your IMAGE ID will be different than the examples above. Developers, please note you are welcome to use tags that are useful for your institution e.g. docker tag 7cbd80c8b043 yourdockerimagerepo_orgname/isle-proxy:1.13 Step 6: Push the Images to the Image Repository Please note: These steps assume use of Dockerhub. If you use a different Docker image repository, you'll need to change the following steps per their specific instructions. docker login Example output: Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one. Username (username_here): Enter your Dockerhub username Enter your Dockerhub user password. Push the images one at a time. Please note: Depending on your Internet connection's upload speed this process may take several hours. docker push islandoracollabgroup/isle-apache:latest docker push islandoracollabgroup/isle-fedora:latest docker push islandoracollabgroup/isle-mysql:latest docker push islandoracollabgroup/isle-proxy:latest docker push islandoracollabgroup/isle-solr:latest Repeat the process with any additional tags. Please note: Depending on your Internet connection's upload speed this process may take several minutes. docker push islandoracollabgroup/isle-apache:2.4 docker push islandoracollabgroup/isle-fedora:3.8.1 docker push islandoracollabgroup/isle-mysql:5.6 docker push islandoracollabgroup/isle-proxy:1.13 docker push islandoracollabgroup/isle-solr:4.10.4 Step 7: Rename the docker-compose-build.yml File Rename the docker-compose.yml file to docker-compose-build.yml Step 8: Rename the docker-compose.yml File Rename the docker-compose.bak file to docker-compose.yml Steps below are mandatory for any ISLE Committer but optional (though recommended) for any Developer. Step 9: Delete All Recently Built and Pushed ISLE Images on Local Laptop docker image ls Example commands to repeat for each type of image. docker rm -f IMAGE ID islandoracollabgroup/TAG docker rm -f 7cbd80c8b043 islandoracollabgroup/isle-proxy:1.13 Step 10: Test the Images Pushed Pull down the newly pushed images. docker-compose pull Follow the instructions within the docker-compose.yml file or within the Demo ISLE Installation to start up containers and install the Demo ISLE Installation ( https://isle.localdomain ). Ensure that all components, connections etc are working, otherwise troubleshoot as required, making the appropriate fixes to the associated Dockerfiles, pushing changes to the ISLE project git repository and then REPEATING this entire build and push process. Always test prior and post to ensure there are no issues pushed to end users.","title":"Build guide"},{"location":"contributor-docs/build-guide/#assumptions-prerequisites","text":"Laptop / workstation that conforms to the specifications outlined in the Hardware Requirements This image build site guide is designed for a local laptop / workstation that has already followed the appropriate setup and configuration instructions in the Demo ISLE Installation guide. Instructions below assume a MacOS or Linux workstation. Windows users may have to adjust / swap out various tools as needed. The ISLE project has been cloned from the ISLE project repository using the master branch. Do not build ISLE images with untested and developmental code. Only stable releases please. Having a cleaned up system prior to any build is key. Ensure that all local development containers, volumes and images associated with the build are deleted. Otherwise previously unaltered data or configurations could break or alter negatively the new images. ISLE Committers, Developers have pre-existing knowledge or familiarity with Dockerfiles , the Docker Build process and pushing Docker images to repositories. Dockerfiles , their editing process and compositions are familiar or known concepts. ISLE Committers should already have access to the ISLE Dockerhub image repository. Developers should have already setup their own separate Docker image repository. e.g. Dockerhub following that site's instructions. Developers are free to mix official ISLE images with your own custom image build. Best practice would be to create new Dockerfiles that use the official ISLE images as the base image to build from.","title":"Assumptions / Prerequisites"},{"location":"contributor-docs/build-guide/#step-1-ensure-there-are-no-local-isle-docker-images-present","text":"If performing a brand new image build, the ISLE Committer will need to ensure there are no previous image builds or cached build data. docker image ls Remove any ISLE images by selecting their IMAGE ID Example: docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE islandoracollabgroup/isle-proxy 1.13 7cbd80c8b043 13 days ago 109MB islandoracollabgroup/isle-proxy latest 7cbd80c8b043 13 days ago 109MB islandoracollabgroup/isle-apache 2.4 ba6505e7a428 13 days ago 2.25GB islandoracollabgroup/isle-apache latest ba6505e7a428 13 days ago 2.25GB islandoracollabgroup/isle-apache <none> 9bc727f301b8 2 weeks ago 2.25GB islandoracollabgroup/isle-proxy <none> 23cb1c73c232 2 weeks ago 109MB docker image rm -f 7cbd80c8b043 docker image rm -f ba6505e7a428 docker image rm -f 7cbd80c8b043 docker image rm -f 9bc727f301b8 docker image rm -f 23cb1c73c232","title":"Step 1: Ensure There Are No Local ISLE Docker Images Present"},{"location":"contributor-docs/build-guide/#step-2-rename-the-docker-composeyml-file","text":"Rename the docker-compose.yml file to docker-compose.bak","title":"Step 2: Rename the docker-compose.yml File"},{"location":"contributor-docs/build-guide/#step-3-rename-the-docker-compose-buildyml-file","text":"Rename the docker-compose-build.yml file to docker-compose.yml","title":"Step 3: Rename the docker-compose-build.yml File"},{"location":"contributor-docs/build-guide/#step-3a-alternative-for-non-isle-committers-only-eg-developers","text":"If you're working in your own dockerhub environment (ie, not the offical islandoracollabgroup environment, then you'll need to change the following lines in the newly renamed docker-compose.yml file. image: islandoracollabgroup/isle-mysql:latest image: islandoracollabgroup/isle-fedora:latest image: islandoracollabgroup/isle-apache:latest image: islandoracollabgroup/isle-solr:latest image: islandoracollabgroup/isle-proxy:latest to image: yourdockerimagerepo_orgname/isle-mysql:latest image: yourdockerimagerepo_orgname/isle-fedora:latest image: yourdockerimagerepo_orgname/isle-apache:latest image: yourdockerimagerepo_orgname/isle-solr:latest image: yourdockerimagerepo_orgname/isle-proxy:latest Change only the images you need to rebuild or customize.","title":"Step 3a: Alternative for Non-ISLE Committers only (e.g. developers)"},{"location":"contributor-docs/build-guide/#step-4-build-the-images-in-this-suggested-order","text":"Please perform these steps one at time. If any errors occur during the build process, troubleshoot and edit the associated Dockerfile. docker-compose build mysql docker-compose build fedora docker-compose build apache docker-compose build proxy docker-compose build solr","title":"Step 4: Build the Images in this Suggested Order"},{"location":"contributor-docs/build-guide/#step-5-tag-the-resulting-images","text":"This renamed docker-compose-build.yml file will tag all builds by default with the latest tag. Review the current tags found on the Docker Containers & Images Specifications Page. Should the software version change, update this document with the new tags. You will need to tag each image further as needed. There are always two tags for every image, e.g. latest and the specific version of the primary software package used on the image or container. It is possible there will be more tags for different image versions in the future. For example if the installed proxy nginx software changes from 1.13 to 1.14 , change or add the new tag of 1.14 To learn more about tagging, read the official Docker tag documentation. To tag images: docker image ls ( to see the new IMAGE IDs ) docker tag IMAGE ID image/TAG IMAGE ID is the 12-character identification string for the image (listed from the Docker images command), and TAG is our newly created versioning tag. So our command to tag a new proxy image would be: docker tag 7cbd80c8b043 islandoracollabgroup/isle-proxy:1.13 Please note: your IMAGE ID will be different than the examples above. Developers, please note you are welcome to use tags that are useful for your institution e.g. docker tag 7cbd80c8b043 yourdockerimagerepo_orgname/isle-proxy:1.13","title":"Step 5: Tag the Resulting Images"},{"location":"contributor-docs/build-guide/#step-6-push-the-images-to-the-image-repository","text":"Please note: These steps assume use of Dockerhub. If you use a different Docker image repository, you'll need to change the following steps per their specific instructions. docker login Example output: Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one. Username (username_here): Enter your Dockerhub username Enter your Dockerhub user password. Push the images one at a time. Please note: Depending on your Internet connection's upload speed this process may take several hours. docker push islandoracollabgroup/isle-apache:latest docker push islandoracollabgroup/isle-fedora:latest docker push islandoracollabgroup/isle-mysql:latest docker push islandoracollabgroup/isle-proxy:latest docker push islandoracollabgroup/isle-solr:latest Repeat the process with any additional tags. Please note: Depending on your Internet connection's upload speed this process may take several minutes. docker push islandoracollabgroup/isle-apache:2.4 docker push islandoracollabgroup/isle-fedora:3.8.1 docker push islandoracollabgroup/isle-mysql:5.6 docker push islandoracollabgroup/isle-proxy:1.13 docker push islandoracollabgroup/isle-solr:4.10.4","title":"Step 6: Push the Images to the Image Repository"},{"location":"contributor-docs/build-guide/#step-7-rename-the-docker-compose-buildyml-file","text":"Rename the docker-compose.yml file to docker-compose-build.yml","title":"Step 7: Rename the docker-compose-build.yml File"},{"location":"contributor-docs/build-guide/#step-8-rename-the-docker-composeyml-file","text":"Rename the docker-compose.bak file to docker-compose.yml Steps below are mandatory for any ISLE Committer but optional (though recommended) for any Developer.","title":"Step 8: Rename the docker-compose.yml File"},{"location":"contributor-docs/build-guide/#step-9-delete-all-recently-built-and-pushed-isle-images-on-local-laptop","text":"docker image ls Example commands to repeat for each type of image. docker rm -f IMAGE ID islandoracollabgroup/TAG docker rm -f 7cbd80c8b043 islandoracollabgroup/isle-proxy:1.13","title":"Step 9: Delete All Recently Built and Pushed ISLE Images on Local Laptop"},{"location":"contributor-docs/build-guide/#step-10-test-the-images-pushed","text":"Pull down the newly pushed images. docker-compose pull Follow the instructions within the docker-compose.yml file or within the Demo ISLE Installation to start up containers and install the Demo ISLE Installation ( https://isle.localdomain ). Ensure that all components, connections etc are working, otherwise troubleshoot as required, making the appropriate fixes to the associated Dockerfiles, pushing changes to the ISLE project git repository and then REPEATING this entire build and push process. Always test prior and post to ensure there are no issues pushed to end users.","title":"Step 10: Test the Images Pushed"},{"location":"contributor-docs/editing-local/","text":"Overview Run the mkdocs software Edit documentation files locally Commit changes to git Push committed changes to the online ISLE Github.com git repository Create pull request for review on ISLE Github.com Assumptions / Prerequisites mkdocs and mkdocs-material theme are installed following the Installing Mkdocs documentation. The ISLE Documentation project directory has been cloned to the end user's laptop / workstation in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE-Documentation.git Familiarity or comfortability with git and cli commands. End user has a web browser opened to this URL: http://127.0.0.1:8000/ End user has a terminal open with mkdocs serve running. Create a New Git Branch As there is a review process of any new changes to the ISLE code or documentation projects by the Committers, using git pull requests are ideal to avoid issues of missing materials, inappropriately edited files or incorrect overwrites of critical data. While mkdocs serve is running in the terminal, open up a new terminal or terminal tab and cd to pathto/ISLE-Documentation project directory You will now create a new git branch which will allow you to make changes without fear of losing the original code / file versions kept in master . The new branch name can be anything you like but we suggest that you use a convention that identifies you clearly e.g. githubusername-docs-fix2 or janedoe-doc-fixes1 git checkout -b githubusername-docs-fix2 Proceed to edit or create new files as necessary using a text editor of your choice. Adding New Pages If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Create a new empty file in the docs/contributor-docs directory e.g. building_giant_robots.md Open up the mkdocs.yml file in a text editor of your choice. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Contributor Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributor Docs': - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributing to Project': 'contributor-docs/contributing_to_project.md' - 'Documentation Overview': 'contributor-docs/overview.md' The end user can now review the contents of this new page at http://127.0.0.1:8000/contributor-docs/building_giant_robots/ Edit the contents of building_giant_robots.md and save the file each time. The associated webpage will refresh with the new changes. Commit Changes to Git Once finished with adding all new pages and editing files, it is time to add everything to git and then push to the remote ISLE github.com repository for review by ISLE Committers. Git Status Within the open terminal, enter git status The example git status output below displays that several files have been modified (edited or changed) and that there is a new file called building_giant_robots.md has been created. git status On branch githubusername-docs-fix2 Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: docs/specifications/diagram-network.md modified: docs/glossary.md modified: mkdocs.yml Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/contributor-docs/building_giant_robots.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Git Add Files You now need to add these changed / new files to git. git add docs/specifications/diagram-network.md git add docs/glossary.md git add mkdocs.yml git add docs/contributor-docs/building_giant_robots.md Git Commit with Message Now it is time to package up all these additions with a git commit command. Please ensure that you commit with a descriptive message of changes etc. git commit -m \"Tweaked some specs in diagram-network.md. Updated the Glossary with more terms. Made new Building Giant Robots page. I love big robots. Added new files and titles to mkdocs.yml \" Git Push to ISLE Github Repository git push origin githubusername-docs-fix2 Create a Pull Request on ISLE Github.com Repository In order for the ISLE Committers to review suggested changes a \"pull request\" will need to be created. This process is a way for Committers to see a summary of the suggested changes to be made with any helpful comments and a catalog of potential differences between the original files and the new ones. If you run into trouble, this Github.com support page may be of use: https://help.github.com/articles/creating-a-pull-request/ On GitHub, navigate to the main page of the ISLE-Documentation repository. In the \"Branch\" menu, choose the branch that contains your commits e.g. githubusername-docs-fix2 To the right of the Branch menu, click New pull request . Use the base branch dropdown menu to select the branch you'd like to merge your changes into ( master ), then use the compare branch drop-down menu to choose the topic branch you made your changes in.( githubusername-docs-fix2 ) base:master <--- compare:githubusername-docs-fix2 Type a title and description for your pull request. Click the green Create pull request button at the bottom. This pull request should now appear in the Pull Requests section of the ISLE repository, ready for review, commentary or inclusion by the ISLE Committers.","title":"Editing local"},{"location":"contributor-docs/editing-local/#overview","text":"Run the mkdocs software Edit documentation files locally Commit changes to git Push committed changes to the online ISLE Github.com git repository Create pull request for review on ISLE Github.com","title":"Overview"},{"location":"contributor-docs/editing-local/#assumptions-prerequisites","text":"mkdocs and mkdocs-material theme are installed following the Installing Mkdocs documentation. The ISLE Documentation project directory has been cloned to the end user's laptop / workstation in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE-Documentation.git Familiarity or comfortability with git and cli commands. End user has a web browser opened to this URL: http://127.0.0.1:8000/ End user has a terminal open with mkdocs serve running.","title":"Assumptions / Prerequisites"},{"location":"contributor-docs/editing-local/#create-a-new-git-branch","text":"As there is a review process of any new changes to the ISLE code or documentation projects by the Committers, using git pull requests are ideal to avoid issues of missing materials, inappropriately edited files or incorrect overwrites of critical data. While mkdocs serve is running in the terminal, open up a new terminal or terminal tab and cd to pathto/ISLE-Documentation project directory You will now create a new git branch which will allow you to make changes without fear of losing the original code / file versions kept in master . The new branch name can be anything you like but we suggest that you use a convention that identifies you clearly e.g. githubusername-docs-fix2 or janedoe-doc-fixes1 git checkout -b githubusername-docs-fix2 Proceed to edit or create new files as necessary using a text editor of your choice.","title":"Create a New Git Branch"},{"location":"contributor-docs/editing-local/#adding-new-pages","text":"If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Create a new empty file in the docs/contributor-docs directory e.g. building_giant_robots.md Open up the mkdocs.yml file in a text editor of your choice. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Contributor Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributor Docs': - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributing to Project': 'contributor-docs/contributing_to_project.md' - 'Documentation Overview': 'contributor-docs/overview.md' The end user can now review the contents of this new page at http://127.0.0.1:8000/contributor-docs/building_giant_robots/ Edit the contents of building_giant_robots.md and save the file each time. The associated webpage will refresh with the new changes.","title":"Adding New Pages"},{"location":"contributor-docs/editing-local/#commit-changes-to-git","text":"Once finished with adding all new pages and editing files, it is time to add everything to git and then push to the remote ISLE github.com repository for review by ISLE Committers.","title":"Commit Changes to Git"},{"location":"contributor-docs/editing-local/#git-status","text":"Within the open terminal, enter git status The example git status output below displays that several files have been modified (edited or changed) and that there is a new file called building_giant_robots.md has been created. git status On branch githubusername-docs-fix2 Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: docs/specifications/diagram-network.md modified: docs/glossary.md modified: mkdocs.yml Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/contributor-docs/building_giant_robots.md no changes added to commit (use \"git add\" and/or \"git commit -a\")","title":"Git Status"},{"location":"contributor-docs/editing-local/#git-add-files","text":"You now need to add these changed / new files to git. git add docs/specifications/diagram-network.md git add docs/glossary.md git add mkdocs.yml git add docs/contributor-docs/building_giant_robots.md","title":"Git Add Files"},{"location":"contributor-docs/editing-local/#git-commit-with-message","text":"Now it is time to package up all these additions with a git commit command. Please ensure that you commit with a descriptive message of changes etc. git commit -m \"Tweaked some specs in diagram-network.md. Updated the Glossary with more terms. Made new Building Giant Robots page. I love big robots. Added new files and titles to mkdocs.yml \"","title":"Git Commit with Message"},{"location":"contributor-docs/editing-local/#git-push-to-isle-github-repository","text":"git push origin githubusername-docs-fix2","title":"Git Push to ISLE Github Repository"},{"location":"contributor-docs/editing-local/#create-a-pull-request-on-isle-githubcom-repository","text":"In order for the ISLE Committers to review suggested changes a \"pull request\" will need to be created. This process is a way for Committers to see a summary of the suggested changes to be made with any helpful comments and a catalog of potential differences between the original files and the new ones. If you run into trouble, this Github.com support page may be of use: https://help.github.com/articles/creating-a-pull-request/ On GitHub, navigate to the main page of the ISLE-Documentation repository. In the \"Branch\" menu, choose the branch that contains your commits e.g. githubusername-docs-fix2 To the right of the Branch menu, click New pull request . Use the base branch dropdown menu to select the branch you'd like to merge your changes into ( master ), then use the compare branch drop-down menu to choose the topic branch you made your changes in.( githubusername-docs-fix2 ) base:master <--- compare:githubusername-docs-fix2 Type a title and description for your pull request. Click the green Create pull request button at the bottom. This pull request should now appear in the Pull Requests section of the ISLE repository, ready for review, commentary or inclusion by the ISLE Committers.","title":"Create a Pull Request on ISLE Github.com Repository"},{"location":"contributor-docs/editing-online/","text":"Overview Navigate to online ISLE-Documentation repository Edit existing pages Adding new pages Updating mkdocs.yml Commit changes using a new branch Create pull request for review Please note: You'll need to create separate pull requests for each type of change whether editing or adding new pages with a mkdocs.yml file update. Using the online editor means you can only do one thing at a time. If you need to edit more than one file or want to create more than one new page of content, it is recommended to instead follow the steps contained within the Documentation Editing - Local Guide. Navigate to Online ISLE-Documentation Repository In a web browser navigate to https://github.com/Islandora-Collaboration-Group/ISLE-Documentation Edit Existing Pages Click into the docs directory and navigate to the appropriate .md file you would like to edit. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Adding New Pages Please note: If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation after adding the new page. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Click into the docs/contributor-docs directory On the right hand side of the page, a navigation bar that will display Create new file | Upload files | Find File History , click the Create new file button. In the empty Name your file... field at the top of the page, enter building_giant_robots.md Enter the appropriate content to the page. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Updating mkdocs If you have added a new page to the Documentation, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation. Click into the mkdocs.yml file. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Contributor Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributor Docs': - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributing to Project': 'contributor-docs/contributing_to_project.md' - 'Documentation Overview': 'contributor-docs/overview.md' When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Commit Changes When finished editing, adding or updating, scroll down to the Commit changes section. In the first empty field, enter a short description of the file edited e.g. Update glossary.md In the second larger empty field, enter a larger description of the edits made to the file. Two to five sentences should suffice. Once finished, select the second radio button at the bottom Its label displays: Create a new branch for this commit and start a pull request Change the branch name as needed or leave as the default. Click the green Propose File Change DO NOT SELECT THE 1ST RADIO BUTTON - Commit directly to the master branch as this will cause issues though it is selected by default. Create Pull Request for Review The \"Open a pull request\" page should now appear along with text like The change you just made was written to a new branch named githubusername-docs-fix2. Create a pull request below to propose these changes. The first and second text fields may contain part of the short description. Either keep the default text or change accordingly. Click the green Create pull request button. This pull request should now appear in the Pull Requests section of the ISLE repository, ready for review, commentary or inclusion by the ISLE Committers.","title":"Editing online"},{"location":"contributor-docs/editing-online/#overview","text":"Navigate to online ISLE-Documentation repository Edit existing pages Adding new pages Updating mkdocs.yml Commit changes using a new branch Create pull request for review Please note: You'll need to create separate pull requests for each type of change whether editing or adding new pages with a mkdocs.yml file update. Using the online editor means you can only do one thing at a time. If you need to edit more than one file or want to create more than one new page of content, it is recommended to instead follow the steps contained within the Documentation Editing - Local Guide.","title":"Overview"},{"location":"contributor-docs/editing-online/#navigate-to-online-isle-documentation-repository","text":"In a web browser navigate to https://github.com/Islandora-Collaboration-Group/ISLE-Documentation","title":"Navigate to Online ISLE-Documentation Repository"},{"location":"contributor-docs/editing-online/#edit-existing-pages","text":"Click into the docs directory and navigate to the appropriate .md file you would like to edit. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Edit Existing Pages"},{"location":"contributor-docs/editing-online/#adding-new-pages","text":"Please note: If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation after adding the new page. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Click into the docs/contributor-docs directory On the right hand side of the page, a navigation bar that will display Create new file | Upload files | Find File History , click the Create new file button. In the empty Name your file... field at the top of the page, enter building_giant_robots.md Enter the appropriate content to the page. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Adding New Pages"},{"location":"contributor-docs/editing-online/#updating-mkdocs","text":"If you have added a new page to the Documentation, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation. Click into the mkdocs.yml file. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Contributor Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributor Docs': - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributing to Project': 'contributor-docs/contributing_to_project.md' - 'Documentation Overview': 'contributor-docs/overview.md' When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Updating mkdocs"},{"location":"contributor-docs/editing-online/#commit-changes","text":"When finished editing, adding or updating, scroll down to the Commit changes section. In the first empty field, enter a short description of the file edited e.g. Update glossary.md In the second larger empty field, enter a larger description of the edits made to the file. Two to five sentences should suffice. Once finished, select the second radio button at the bottom Its label displays: Create a new branch for this commit and start a pull request Change the branch name as needed or leave as the default. Click the green Propose File Change DO NOT SELECT THE 1ST RADIO BUTTON - Commit directly to the master branch as this will cause issues though it is selected by default.","title":"Commit Changes"},{"location":"contributor-docs/editing-online/#create-pull-request-for-review","text":"The \"Open a pull request\" page should now appear along with text like The change you just made was written to a new branch named githubusername-docs-fix2. Create a pull request below to propose these changes. The first and second text fields may contain part of the short description. Either keep the default text or change accordingly. Click the green Create pull request button. This pull request should now appear in the Pull Requests section of the ISLE repository, ready for review, commentary or inclusion by the ISLE Committers.","title":"Create Pull Request for Review"},{"location":"contributor-docs/mkdocs/","text":"Documentation: MkDocs Assumptions / Prerequisites Python 2.7+ or higher is installed on the end user's laptop / workstation The ISLE Documentation project directory has been cloned to the end user's laptop / workstation in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE-Documentation.git Familiarity or comfortability with git and cli commands. Step 1. Install mkdocs Please follow the instructions found here: http://www.mkdocs.org/#installation Example: (All OS) sudo -H pip install mkdocs Step 2. Install the mkdocs-material Theme The ISLE Documentation Theme can be found here: https://github.com/squidfunk/mkdocs-material Example: (All OS) sudo -H pip install mkdocs-material Step 3. Run the mkdocs Software Open a terminal and cd to pathto/ISLE-Documentation project directory mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 180310 15:50:39 server:283] Serving on http://127.0.0.1:8000 [I 180310 15:50:39 handlers:60] Start watching changes [I 180310 15:50:39 handlers:62] Start detecting changes [I 180310 15:50:42 handlers:133] Browser Connected: http://127.0.0.1:8000/ Open up a browser and navigate to http://127.0.0.1:8000/ It is critical for this terminal to keep running as mkdocs will report file changes and any potential issues. To review changes in real time via the browser Use the terminal output for debugging issues or missing files, links etc. To stop mkdocs , click the Cntrl and c key at the same time. (Cntrl-C) How to Upgrade mkdocs version MkDocs Release Notes To upgrade MkDocs to the latest version, use pip: pip install -U mkdocs You can determine your currently installed version using mkdocs --version","title":"Docs: MkDocs"},{"location":"contributor-docs/mkdocs/#documentation-mkdocs","text":"","title":"Documentation: MkDocs"},{"location":"contributor-docs/mkdocs/#assumptions-prerequisites","text":"Python 2.7+ or higher is installed on the end user's laptop / workstation The ISLE Documentation project directory has been cloned to the end user's laptop / workstation in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE-Documentation.git Familiarity or comfortability with git and cli commands.","title":"Assumptions / Prerequisites"},{"location":"contributor-docs/mkdocs/#step-1-install-mkdocs","text":"Please follow the instructions found here: http://www.mkdocs.org/#installation Example: (All OS) sudo -H pip install mkdocs","title":"Step 1. Install mkdocs"},{"location":"contributor-docs/mkdocs/#step-2-install-the-mkdocs-material-theme","text":"The ISLE Documentation Theme can be found here: https://github.com/squidfunk/mkdocs-material Example: (All OS) sudo -H pip install mkdocs-material","title":"Step 2. Install the mkdocs-material Theme"},{"location":"contributor-docs/mkdocs/#step-3-run-the-mkdocs-software","text":"Open a terminal and cd to pathto/ISLE-Documentation project directory mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 180310 15:50:39 server:283] Serving on http://127.0.0.1:8000 [I 180310 15:50:39 handlers:60] Start watching changes [I 180310 15:50:39 handlers:62] Start detecting changes [I 180310 15:50:42 handlers:133] Browser Connected: http://127.0.0.1:8000/ Open up a browser and navigate to http://127.0.0.1:8000/ It is critical for this terminal to keep running as mkdocs will report file changes and any potential issues. To review changes in real time via the browser Use the terminal output for debugging issues or missing files, links etc. To stop mkdocs , click the Cntrl and c key at the same time. (Cntrl-C)","title":"Step 3. Run the mkdocs Software"},{"location":"contributor-docs/mkdocs/#how-to-upgrade-mkdocs-version","text":"MkDocs Release Notes To upgrade MkDocs to the latest version, use pip: pip install -U mkdocs You can determine your currently installed version using mkdocs --version","title":"How to Upgrade mkdocs version"},{"location":"contributor-docs/overview/","text":"The ISLE project uses mkdocs a static site generator designed for building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file. The mkdocs software then creates static HTML pages for hosting on GitHub Pages. This software can also be used locally on an end user's workstation for review and editing of materials. Please note there are two key elements to the ISLE Documentation. ISLE Documentation Github.com Pages (static HTML): Used by endusers for Documentation Clean, crisp nicely formatted hosted ISLE Documentation with navigation. https://islandora-collaboration-group.github.io/ISLE-Documentation/ ISLE Documentation Github.com Repository (Markdown files): Used by ISLE Committers to create and manage ISLE Documentation Markdown files ( .md ) stored in an online git repository that when rendered by the mkdocs software produce the above mentioned nicely formatted static HTML pages. https://github.com/Islandora-Collaboration-Group/ISLE-Documentation Please refer to the Documentation section of the Glossary if terms used are not clear. A very handy primer for writing documentation using MkDocs has been written here: http://www.mkdocs.org/user-guide/writing-your-docs/ Project Directory Structure \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about \u2502 \u251c\u2500\u2500 appendices \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 contributor-docs \u2502 \u251c\u2500\u2500 cookbook-recipes \u2502 \u251c\u2500\u2500 install \u2502 \u251c\u2500\u2500 migrate \u2502 \u251c\u2500\u2500 release-notes \u2502 \u251c\u2500\u2500 specifications \u2502 \u251c\u2500\u2500 update \u2502 \u251c\u2500\u2500 extra.css \u2502 \u251c\u2500\u2500 extra.js \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 /.aspell.en.pws \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md Directory or file Description README.md Description of the documentation project contents and how to use them docs where all documentation sections and topical pages are kept about-isle.md Description of the ISLE project, its contributors and this documentation repository assets Image or logo files used in documentation glossary.md A list of terms used in documentation index.md The homepage (first page of the documentation mkdocs.yml YAML file that acts as the section and page directory Sections and Pages Within the docs directory, there are 6 major topical sections. All sections are have numbered prefixes e.g. 01_ , 02_ to indicate order of documentation progression or narrative. Sections contain relevant topics and pages. All pages have relevant prefixes to their sections. Page file names may differ from their Page titles in the mkdocs.yml file. All topic of the page short and concise to one or two keywords Please keep all filenames lowercase Please ensure that all files are Markdown ( .md ) files otherwise the documentation system will fail.","title":"Overview"},{"location":"contributor-docs/overview/#project-directory-structure","text":"\u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about \u2502 \u251c\u2500\u2500 appendices \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 contributor-docs \u2502 \u251c\u2500\u2500 cookbook-recipes \u2502 \u251c\u2500\u2500 install \u2502 \u251c\u2500\u2500 migrate \u2502 \u251c\u2500\u2500 release-notes \u2502 \u251c\u2500\u2500 specifications \u2502 \u251c\u2500\u2500 update \u2502 \u251c\u2500\u2500 extra.css \u2502 \u251c\u2500\u2500 extra.js \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 /.aspell.en.pws \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md Directory or file Description README.md Description of the documentation project contents and how to use them docs where all documentation sections and topical pages are kept about-isle.md Description of the ISLE project, its contributors and this documentation repository assets Image or logo files used in documentation glossary.md A list of terms used in documentation index.md The homepage (first page of the documentation mkdocs.yml YAML file that acts as the section and page directory","title":"Project Directory Structure"},{"location":"contributor-docs/overview/#sections-and-pages","text":"Within the docs directory, there are 6 major topical sections. All sections are have numbered prefixes e.g. 01_ , 02_ to indicate order of documentation progression or narrative. Sections contain relevant topics and pages. All pages have relevant prefixes to their sections. Page file names may differ from their Page titles in the mkdocs.yml file. All topic of the page short and concise to one or two keywords Please keep all filenames lowercase Please ensure that all files are Markdown ( .md ) files otherwise the documentation system will fail.","title":"Sections and Pages"},{"location":"contributor-docs/policies/","text":"This page left intentionally blank, pending full community documentation for this process.","title":"Policies"},{"location":"contributor-docs/release-process/","text":"Please see the ISLE Release Process draft document for more details.","title":"Release Process"},{"location":"contributor-docs/spell-checker/","text":"How to Spell-Check the Documentation Installing Aspell GNU Aspell is available in the default repositories of most Linux and Unix distributions, so installation should be easy. To install Aspell on Unix/Linux systems use a package manager on your OS. For example... Ubuntu * apt-get install aspell OS X * Using Homebrew * brew install aspell Setting up Aspell \"word list\" for Islandora & ISLE Check if you already have an existing Aspell \"word list\" called \".aspell.en.pws\" in your home directory. Note: that this file starts with a \"period\" and my be hidden by default in your OS. Back up existing \"~/.aspell.en.pws\" file if you want to preserve data, or skip this step if you are OK with overwriting existing data. Go to the ISLE documentation repository. Copy the current Aspell \"word list\" (.aspell.en.pws) that was created for the ISLE/Islandora project from the docs directory into your home directory. Note: Make sure to back up any existing \".aspell.en.pws\" before copying if you want to avoid losing your previous word list data. Running Aspell Manually running Aspell on a single file aspell check --dont-backup example.md Batch running Aspell on all .md files for f in $(find . -iname '*.md'); do aspell check --dont-backup $f; done; Verifying changes Since we are using the Aspell --dont-backup flag, Aspell will make changes to the files themselves. We can then use git status and git diff file_name to verify what was changed by Aspell before committing changes back to the repo. Interactive commands Common interactive commands used: i = Ignore a word. I = Ignore all occurrences of a word in the current file. a = add word to Aspell \"word list\" (~/.aspell.en.pws). 1 to 10 = Used to select a suggested word to replace selected word. Updating Aspell \"word list\" after checking spellings Copy the existing \"~/.aspell.en.pws\" file in your home directory to the ISLE documentation repo. Commit the change(s) to the Aspell word list file. Submit a pull request with your changes to be considered by the project committers.","title":"Docs: Spell Checker"},{"location":"contributor-docs/spell-checker/#how-to-spell-check-the-documentation","text":"","title":"How to Spell-Check the Documentation"},{"location":"contributor-docs/spell-checker/#installing-aspell","text":"GNU Aspell is available in the default repositories of most Linux and Unix distributions, so installation should be easy. To install Aspell on Unix/Linux systems use a package manager on your OS. For example... Ubuntu * apt-get install aspell OS X * Using Homebrew * brew install aspell","title":"Installing Aspell"},{"location":"contributor-docs/spell-checker/#setting-up-aspell-word-list-for-islandora-isle","text":"Check if you already have an existing Aspell \"word list\" called \".aspell.en.pws\" in your home directory. Note: that this file starts with a \"period\" and my be hidden by default in your OS. Back up existing \"~/.aspell.en.pws\" file if you want to preserve data, or skip this step if you are OK with overwriting existing data. Go to the ISLE documentation repository. Copy the current Aspell \"word list\" (.aspell.en.pws) that was created for the ISLE/Islandora project from the docs directory into your home directory. Note: Make sure to back up any existing \".aspell.en.pws\" before copying if you want to avoid losing your previous word list data.","title":"Setting up Aspell \"word list\" for Islandora &amp; ISLE"},{"location":"contributor-docs/spell-checker/#running-aspell","text":"","title":"Running Aspell"},{"location":"contributor-docs/spell-checker/#manually-running-aspell-on-a-single-file","text":"aspell check --dont-backup example.md","title":"Manually running Aspell on a single file"},{"location":"contributor-docs/spell-checker/#batch-running-aspell-on-all-md-files","text":"for f in $(find . -iname '*.md'); do aspell check --dont-backup $f; done;","title":"Batch running Aspell on all .md files"},{"location":"contributor-docs/spell-checker/#verifying-changes","text":"Since we are using the Aspell --dont-backup flag, Aspell will make changes to the files themselves. We can then use git status and git diff file_name to verify what was changed by Aspell before committing changes back to the repo.","title":"Verifying changes"},{"location":"contributor-docs/spell-checker/#interactive-commands","text":"Common interactive commands used: i = Ignore a word. I = Ignore all occurrences of a word in the current file. a = add word to Aspell \"word list\" (~/.aspell.en.pws). 1 to 10 = Used to select a suggested word to replace selected word.","title":"Interactive commands"},{"location":"contributor-docs/spell-checker/#updating-aspell-word-list-after-checking-spellings","text":"Copy the existing \"~/.aspell.en.pws\" file in your home directory to the ISLE documentation repo. Commit the change(s) to the Aspell word list file. Submit a pull request with your changes to be considered by the project committers.","title":"Updating Aspell \"word list\" after checking spellings"},{"location":"contributor-docs/style-guide/","text":"ISLE Documentation: Style Guide MkDocs Configurations Site Theme: MdDocs Themes CSS Overrides: The extra.css file overrides some basic CSS styles. Javascript Overrides: The extra.js file (could) override some basic JS styles. Files Files use dashes, not underscores, and are lowercase. Example: host-hardware-requirements.md URLs Hyperlinks use the title of their destination page as the text of the URL. Example: Hardware Requirements Tables Sections within a section that is specific to a certain type of circumstance should be put in a table: Example Subheader Instructions here: - We use this dash since mkdocs cannot accomodate true bullets inside tables. - Another dash and another line. Headers: Follow the APA Style Guide for Capitalization of All Important Words. For example: H1: Page Title H2: Main Subheaders H3: Subheaders found within \"Main Subheaders\" Terms We Use Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment Update ISLE end users (not endusers)","title":"Docs: Style Guide"},{"location":"contributor-docs/style-guide/#isle-documentation-style-guide","text":"","title":"ISLE Documentation: Style Guide"},{"location":"contributor-docs/style-guide/#mkdocs-configurations","text":"Site Theme: MdDocs Themes CSS Overrides: The extra.css file overrides some basic CSS styles. Javascript Overrides: The extra.js file (could) override some basic JS styles.","title":"MkDocs Configurations"},{"location":"contributor-docs/style-guide/#files","text":"Files use dashes, not underscores, and are lowercase. Example: host-hardware-requirements.md","title":"Files"},{"location":"contributor-docs/style-guide/#urls","text":"Hyperlinks use the title of their destination page as the text of the URL. Example: Hardware Requirements","title":"URLs"},{"location":"contributor-docs/style-guide/#tables","text":"Sections within a section that is specific to a certain type of circumstance should be put in a table: Example Subheader Instructions here: - We use this dash since mkdocs cannot accomodate true bullets inside tables. - Another dash and another line.","title":"Tables"},{"location":"contributor-docs/style-guide/#headers-follow-the-apa-style-guide-for-capitalization-of-all-important-words","text":"","title":"Headers: Follow the APA Style Guide for Capitalization of All Important Words."},{"location":"contributor-docs/style-guide/#for-example","text":"H1: Page Title H2: Main Subheaders H3: Subheaders found within \"Main Subheaders\"","title":"For example:"},{"location":"contributor-docs/style-guide/#terms-we-use","text":"Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment Update ISLE end users (not endusers)","title":"Terms We Use"},{"location":"contributor-docs/testing-guide/","text":"The ISLE project is currently testing the ISLE 1.1 Release Candidate. We are actively soliciting volunteers to test the following scenarios: Installing a Remote Server ISLE Installation on Ubuntu 18.04 Installing a Remote Server ISLE Installation on Centos 7.x Updating an existing ISLE site to the latest 1.1 Release Candidate Installing a Demo version of ISLE on Windows 10 using Docker Installing a Demo version of ISLE on Mac OSX High Sierra using Docker After testing the above scenarios, the project will announce a second round of testing for migrations: Migrating an existing Islandora site to ISLE on Ubuntu 18.04 Migrating an existing Islandora site to ISLE on Centos 7.x If you want to be involved as a tester, please see the following documents: ISLE 1.1 RC Testing Instructions and Details ISLE 1.1 RC Testing Matrix","title":"Testing Guide"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/","text":"ISLE Cheat Sheet: Docker Commands Docker commands that are useful to installing or updating ISLE. Docker Containers List Containers docker ps # Show all running containers docker ps -a # Show all running and stopped containers List Volumes docker volume ls # List all volumes Start Containers docker-compose start # Starts existing containers for a service docker start $(docker ps -a -q) # Start all running and stopped containers Stop Containers docker-compose stop # Stops running containers without removing them docker stop [CONTAINER_NAME(S)] # Stop one or more named containers example: docker stop isle-tomcat isle-solr docker stop $(docker ps -a -q) # Stop all running and stopped containers Stop and Remove Containers docker-compose down # Stops containers and removes containers and networks for services defined in the Compose file Pull Containers docker-compose pull # Pull down all images from Docker Hub docker pull [GROUP]/[REPO] # Pull one specific image from Docker Hub example: docker pull islandoracollabgroup/isle-fedora:latest Up Containers docker-compose up -d # Launch all containers for this service Remove Volumes docker volume rm [VOLUME_NAME] # Remove one or more volumes. You cannot remove a volume that is in use by a container. example: docker volume rm isle_fed-data Remove Containers docker rm [CONTAINER_NAME(S)] # Remove one or more containers example: docker rm isle_fed-data Shell Into Docker Container docker exec -it [CONTAINER_NAME] bash # Shell Into Docker Container example: docker exec -it isle-apache-ld bash docker exec -it [CONTAINER_NAME] [FILE_NAME] # Shell Into Docker Container and Open a File example: docker exec -it isle-apache-ld bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh Docker Service sudo service docker status # Show Docker Status sudo /bin/systemctl restart docker.service # Restart Docker Service sudo service docker restart # Restart Docker Service (alternate) Watching Docker Logs docker logs -f --tail 10 [CONTAINER_NAME] # Show the last 10 lines ( --tail 10 ) of a container's logs; -f means continuous/live feed example: docker logs -f --tail 10 isle-apache-ld Locate Docker Volume docker volume inspect [VOLUME_NAME] # Locate Docker Volume example: docker volume inspect isle_fed-data resultant display is a JSON array that contains a location like this: \"Mountpoint\": \"/var/lib/docker/volumes/isle_fed-data/_data\" Port Lookups docker port [CONTAINER_NAME] # List port mappings or a specific mapping for the container docker ps | grep 8381 # Query what is using a specific port number lsof -i :8381 # Query what is using a specific port number Docker: WARNING: BE CAREFUL WITH THESE COMMANDS Delete All Containers, Networks, Volumes and Images docker-compose down -v # WARNING! NEVER run this command in production. ONLY consider doing this on your Demo Local machine. This command will delete all Docker containers, networks, volumes, and images created by up . (This command will not delete your git repository or the paths or contents of your bind mounts.) Remove Unused Data docker system prune --all # WARNING! Remove all unused containers, networks, images and volumes. (Translation: This will remove all stopped containers, all networks not used by a container, all images that lack an associated container, and all build cache.) Remove All Containers docker rm $(docker ps -a -q) # WARNING! This will remove ALL containers on the machine! UNIX Commands Quickly View a File, Using cat usage: cat [FILE_NAME] example: cat /etc/hosts Ping to Test Connectivity usage: ping [DOMAIN] example: ping www.google.com example: ping isle.localdomain DNS Lookup and Querying Tool usage: dig [DOMAIN] example: dig www.google.com example: dig isle.localdomain EXTREME CAUTION: Remove Directory: Recursively and with Force usage: sudo rm -rf [DIRECTORY_NAME] example: sudo rm -rf /var/tmp/scrap/ CAREFUL! BELOW THERE BE DRAGONS How to Remove All Docker Containers and Then Pull Down Fresh Images Stop all current containers docker-compose stop WARNING! This will remove: all stopped containers; etc. docker system prune --all Delete \"data\" folder in ISLE-Developer folder so logs are fresh and clean sudo rm -rf data Pull down the images from Docker Hub docker-compose pull Launch all containers (creates volumes and starts containers) docker-compose up -d How Testers Can Maintain a Nice Clean Environment Show Currently Running and All Past Containers docker ps -a Let's Say You Discover You Have Two Older Containers (named isle-web , isle-db ) and You Want to Remove Them: Example to stop these 2 containers docker stop isle-web isle-db Example to remove these 2 containers docker rm isle-web isle-db","title":"ISLE Cheat Sheet: Docker Commands"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#isle-cheat-sheet-docker-commands","text":"Docker commands that are useful to installing or updating ISLE.","title":"ISLE Cheat Sheet: Docker Commands"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#docker-containers","text":"","title":"Docker Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#list-containers","text":"docker ps # Show all running containers docker ps -a # Show all running and stopped containers","title":"List Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#list-volumes","text":"docker volume ls # List all volumes","title":"List Volumes"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#start-containers","text":"docker-compose start # Starts existing containers for a service docker start $(docker ps -a -q) # Start all running and stopped containers","title":"Start Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#stop-containers","text":"docker-compose stop # Stops running containers without removing them docker stop [CONTAINER_NAME(S)] # Stop one or more named containers example: docker stop isle-tomcat isle-solr docker stop $(docker ps -a -q) # Stop all running and stopped containers","title":"Stop Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#stop-and-remove-containers","text":"docker-compose down # Stops containers and removes containers and networks for services defined in the Compose file","title":"Stop and Remove Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#pull-containers","text":"docker-compose pull # Pull down all images from Docker Hub docker pull [GROUP]/[REPO] # Pull one specific image from Docker Hub example: docker pull islandoracollabgroup/isle-fedora:latest","title":"Pull Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#up-containers","text":"docker-compose up -d # Launch all containers for this service","title":"Up Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#remove-volumes","text":"docker volume rm [VOLUME_NAME] # Remove one or more volumes. You cannot remove a volume that is in use by a container. example: docker volume rm isle_fed-data","title":"Remove Volumes"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#remove-containers","text":"docker rm [CONTAINER_NAME(S)] # Remove one or more containers example: docker rm isle_fed-data","title":"Remove Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#shell-into-docker-container","text":"docker exec -it [CONTAINER_NAME] bash # Shell Into Docker Container example: docker exec -it isle-apache-ld bash docker exec -it [CONTAINER_NAME] [FILE_NAME] # Shell Into Docker Container and Open a File example: docker exec -it isle-apache-ld bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh","title":"Shell Into Docker Container"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#docker-service","text":"sudo service docker status # Show Docker Status sudo /bin/systemctl restart docker.service # Restart Docker Service sudo service docker restart # Restart Docker Service (alternate)","title":"Docker Service"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#watching-docker-logs","text":"docker logs -f --tail 10 [CONTAINER_NAME] # Show the last 10 lines ( --tail 10 ) of a container's logs; -f means continuous/live feed example: docker logs -f --tail 10 isle-apache-ld","title":"Watching Docker Logs"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#locate-docker-volume","text":"docker volume inspect [VOLUME_NAME] # Locate Docker Volume example: docker volume inspect isle_fed-data resultant display is a JSON array that contains a location like this: \"Mountpoint\": \"/var/lib/docker/volumes/isle_fed-data/_data\"","title":"Locate Docker Volume"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#port-lookups","text":"docker port [CONTAINER_NAME] # List port mappings or a specific mapping for the container docker ps | grep 8381 # Query what is using a specific port number lsof -i :8381 # Query what is using a specific port number","title":"Port Lookups"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#docker-warning-be-careful-with-these-commands","text":"","title":"Docker: WARNING: BE CAREFUL WITH THESE COMMANDS"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#delete-all-containers-networks-volumes-and-images","text":"docker-compose down -v # WARNING! NEVER run this command in production. ONLY consider doing this on your Demo Local machine. This command will delete all Docker containers, networks, volumes, and images created by up . (This command will not delete your git repository or the paths or contents of your bind mounts.)","title":"Delete All Containers, Networks, Volumes and Images"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#remove-unused-data","text":"docker system prune --all # WARNING! Remove all unused containers, networks, images and volumes. (Translation: This will remove all stopped containers, all networks not used by a container, all images that lack an associated container, and all build cache.)","title":"Remove Unused Data"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#remove-all-containers","text":"docker rm $(docker ps -a -q) # WARNING! This will remove ALL containers on the machine!","title":"Remove All Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#unix-commands","text":"","title":"UNIX Commands"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#quickly-view-a-file-using-cat","text":"usage: cat [FILE_NAME] example: cat /etc/hosts","title":"Quickly View a File, Using cat"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#ping-to-test-connectivity","text":"usage: ping [DOMAIN] example: ping www.google.com example: ping isle.localdomain","title":"Ping to Test Connectivity"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#dns-lookup-and-querying-tool","text":"usage: dig [DOMAIN] example: dig www.google.com example: dig isle.localdomain","title":"DNS Lookup and Querying Tool"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#extreme-caution-remove-directory-recursively-and-with-force","text":"usage: sudo rm -rf [DIRECTORY_NAME] example: sudo rm -rf /var/tmp/scrap/","title":"EXTREME CAUTION: Remove Directory: Recursively and with Force"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#careful-below-there-be-dragons","text":"","title":"CAREFUL! BELOW THERE BE DRAGONS"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#how-to-remove-all-docker-containers-and-then-pull-down-fresh-images","text":"Stop all current containers docker-compose stop WARNING! This will remove: all stopped containers; etc. docker system prune --all Delete \"data\" folder in ISLE-Developer folder so logs are fresh and clean sudo rm -rf data Pull down the images from Docker Hub docker-compose pull Launch all containers (creates volumes and starts containers) docker-compose up -d","title":"How to Remove All Docker Containers and Then Pull Down Fresh Images"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#how-testers-can-maintain-a-nice-clean-environment","text":"","title":"How Testers Can Maintain a Nice Clean Environment"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#show-currently-running-and-all-past-containers","text":"docker ps -a","title":"Show Currently Running and All Past Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#lets-say-you-discover-you-have-two-older-containers-named-isle-web-isle-db-and-you-want-to-remove-them","text":"Example to stop these 2 containers docker stop isle-web isle-db Example to remove these 2 containers docker rm isle-web isle-db","title":"Let's Say You Discover You Have Two Older Containers (named isle-web, isle-db) and You Want to Remove Them:"},{"location":"install/host-hardware-requirements/","text":"Hardware Requirements The ISLE host server can be a workstation, physical server, virtual machine (VM) or cloud service. An SSH connection with a user that has root or admin privileges is necessary. If you need help requesting a server environment, please see the Sample IT Department Request Letter . Known working operating systems and distributions: Ubuntu 18.04 LTS (also: Ubuntu 16.04 LTS) CentOS 7.x MacOS (only for: Demo ISLE Installation) Windows 10 Professional or Enterprise (only for: Demo ISLE Installation) (Read the Warning about Installing on Red Hat ) Please select your hardware environment: Production Server Staging Server Development Server Workstation Demo Production Server Below are the recommended minimum specifications for a production server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1 - 4 cores each) 16 - 32 GB of RAM is recommended 30 - 50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection For Migrations only Please ensure you have enough storage space for your entire collection or that you can access those data via a network or other file-sharing protocol. Please continue by selecting: Software Dependencies . Staging Server Below are the recommended minimum specifications for a staging server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1 - 4 cores each) 8 - 16 GB of RAM is recommended 30 - 50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection Please continue by selecting: Software Dependencies . Development Server Below are the recommended minimum specifications for a development server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1 - 4 cores each) 8 - 16 GB of RAM is recommended 30 - 50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection Please continue by selecting: Software Dependencies . Workstation Demo Below are the recommended specifications for a workstation running a Demo ISLE Installation: Your own OS (whatever it is) Minimum of 2 CPU cores 8 - 16 GB of RAM is recommended 128 - 500GB for the Desktop OS Sufficient hard drive or attached storage to hold a small test collection (depending on your testing ~5-10GB for objects and their derivatives) Please continue by selecting: Software Dependencies .","title":"1. Hardware Requirements"},{"location":"install/host-hardware-requirements/#hardware-requirements","text":"The ISLE host server can be a workstation, physical server, virtual machine (VM) or cloud service. An SSH connection with a user that has root or admin privileges is necessary. If you need help requesting a server environment, please see the Sample IT Department Request Letter . Known working operating systems and distributions: Ubuntu 18.04 LTS (also: Ubuntu 16.04 LTS) CentOS 7.x MacOS (only for: Demo ISLE Installation) Windows 10 Professional or Enterprise (only for: Demo ISLE Installation) (Read the Warning about Installing on Red Hat ) Please select your hardware environment: Production Server Staging Server Development Server Workstation Demo","title":"Hardware Requirements"},{"location":"install/host-hardware-requirements/#production-server","text":"Below are the recommended minimum specifications for a production server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1 - 4 cores each) 16 - 32 GB of RAM is recommended 30 - 50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection For Migrations only Please ensure you have enough storage space for your entire collection or that you can access those data via a network or other file-sharing protocol. Please continue by selecting: Software Dependencies .","title":"Production Server"},{"location":"install/host-hardware-requirements/#staging-server","text":"Below are the recommended minimum specifications for a staging server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1 - 4 cores each) 8 - 16 GB of RAM is recommended 30 - 50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection Please continue by selecting: Software Dependencies .","title":"Staging Server"},{"location":"install/host-hardware-requirements/#development-server","text":"Below are the recommended minimum specifications for a development server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1 - 4 cores each) 8 - 16 GB of RAM is recommended 30 - 50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection Please continue by selecting: Software Dependencies .","title":"Development Server"},{"location":"install/host-hardware-requirements/#workstation-demo","text":"Below are the recommended specifications for a workstation running a Demo ISLE Installation: Your own OS (whatever it is) Minimum of 2 CPU cores 8 - 16 GB of RAM is recommended 128 - 500GB for the Desktop OS Sufficient hard drive or attached storage to hold a small test collection (depending on your testing ~5-10GB for objects and their derivatives) Please continue by selecting: Software Dependencies .","title":"Workstation Demo"},{"location":"install/host-software-dependencies/","text":"Software Dependencies Please select your operating system: Ubuntu CentOS Mac Windows Ubuntu Step 1: Install Server Prerequisites and Git Open a terminal on your local workstation or ssh to the server or VM. You must have root level permissions. If you are not already root , enter either sudo -s or sudo su to become root. Update and install the following required software: apt-get update && upgrade apt-get install -y openssl git htop ntp wget curl nano apt-transport-https ca-certificates software-properties-common Step 2: Install Docker Add the Docker Repository. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update package list. apt-get update Install Docker. apt-get install -y docker-ce Enable and start Docker. systemctl enable docker && systemctl start docker Step 3: Install Docker-Compose Copy and paste the command below. curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose Test the Installation. docker-compose --version Example output: docker-compose version 1.23.1, build 1110ad01 Step 4: Add Your User to the docker Group Allow your user to run Docker commands and to launch the entire ISLE stack. If you are still root ( whoami ), type exit to become your normal user. Add yourself to the docker group. sudo usermod -aG docker $USER Type exit and then reconnect (this allows your effective groups to update). Step 5: Clone ISLE Repository Please note: The location you clone the repository to becomes your project directory. It can be located anywhere and will include your configuration and log output of the containers. Please run these steps as your normal user (not root ): Clone the repository. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE. cd ISLE Your host server is now configured and ready to run ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment CentOS Step 1: Install Server Prerequisites and Git Open a terminal on your local workstation or ssh to the server or VM. You must have root level permissions. If you are not already root , enter either sudo -s or sudo su to become root. Add the CentOS/RHEL epel-release package repository. yum install -y epel-release Install the following: yum install -y openssl git htop ntp wget curl nano yum install -y yum-utils device-mapper-persistent-data lvm2 Step 2: Install Docker Add the Docker Repository. yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo` Install Docker. yum install -y docker-ce Step 3: Install Docker-Compose Copy and paste the command below. curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose Test the Installation. docker-compose --version Example output: docker-compose version 1.23.1, build 1110ad01 Step 4: Add Your User to the docker Group Allow your user to run Docker commands and to launch the entire ISLE stack. If you are still root ( whoami ), type exit to become your normal user. Add yourself to the docker group. sudo usermod -aG docker $USER Type exit and then reconnect (this allows your effective groups to update). Step 5: Clone ISLE Repository Please note: The location you clone the repository to becomes your project directory. It can be located anywhere and will include your configuration and log output of the containers. Please run these steps as your normal user (not root ): Clone the repository. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE. cd ISLE Your host server is now configured and ready to run ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment Mac Step 1: Install Git Git must be installed to get a copy (called a clone ) of the current ISLE project. (Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people.) Open a terminal (launch Spotlight, type \"Terminal,\" double-click result \"Terminal\") Enter: git --version . If git is already installed, the above command will output the installed version number. For example: $git --version git version 2.15.1 If git is not installed, the above command may trigger the Install Command Line Developer Tools prompt to appear. If so: Click on the blue Install button for the license agreement. Click the white Agree button. The package will take 1-2 minutes to download. Click the Done button once finished. If git is not installed and the prompt does not show, then use this tutorial to Install Git on Mac OS X . Step 2: Install Docker for Mac Open a browser and navigate to Docker Desktop Click the Download for Mac button in the center of the page Click the Please Login to Download button on the right of the page (click: Sign In or Create Account ) Click the Get Docker button on the right of the page The Docker.dmg file should start to download. Check your Downloads directory Double-click the Docker.dmg file. The file should open and mount in a new window / prompt. As instructed within the prompt, drag and drop the whale icon to the right towards the Applications directory shortcut, a tiny green plus sign should appear, now let go from the mouse or trackpad. The application should start to copy data to the Applications directory, this process may take 1 - 5 mins depending on the speed of your hard-drive. Launch the Docker application from the Applications directory This process should may take 2 -5 mins depending on the speed of your hard-drive. Once fully started, one can see a whale icon at the top of their screen. If this is clicked, a dropdown should appear indicating that Docker is now running. Please note: This process also installs the newest version of docker-compose . Step 3: Clone ISLE Repository Please note: The location you clone the repository to becomes your project directory. It can be located anywhere and will include your configuration and log output of the containers. Please run these steps as your normal user (not root ): Clone the repository. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE. cd ISLE To improve performance on Mac OSX: Open docker-compose.yml in a text editor and go to the the apache section Under volumes find the following line: - ./mnt/html:/var/www/html Change to: - ./mnt/html:/var/www/html:cached Your host server is now configured and ready to run ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment Windows Step 1: Install Git Git must be installed to get a copy (called a clone ) of the current ISLE project. (Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people.) Press the Windows key. Type PowerShell . In the search results, RIGHT-CLICK Windows PowerShell , select Run as administrator , and enter Yes to prompt. Enter: git --version . If git is already installed, the above command will output the installed version number. For example: $git --version git version 2.15.1 If git is not installed, then Download Git for Windows . Click Download , Save the file to your Desktop, double-click that file to install, then click Yes to the prompt. Click Next to accept all of the installer's default selections. Step 2: Install Docker Desktop for Windows Important: Docker requires Windows Professional or Windows Enterprise Download Docker Desktop for Windows Click the Please Login to Download button on the right of the page (click: Sign In or Create Account ) Click the Get Docker button on the right of the page, Save the file to your Desktop, double-click that file to install, then click Yes to the prompt. Click OK or Next to accept all of the installer's default selections. You will be required to Close and log out when the installation is complete. The computer will reboot; please sign in. If prompted to enable Hyper-V and Containers features , click OK . If prompted with a Docker popup dialogue to Login with your Docker ID , you may do so with your Docker.com account information, or you may simply close the window. Docker is running and you do not need to login to use it. One can see a whale icon in the notification area. Please note: This process also installs the newest version of docker-compose . Step 3: Clone ISLE Repository Please note: The location you select to clone the ISLE repository becomes your project directory. We recommend using the default user home directory; this location will include your configuration and log output of the Docker containers. (You may choose a different location, but it must not be a protected folder such as system or root directory.) Use PowerShell (and remember to Run as administrator ). Enter cd ~ (to change to the user's home directory). Clone the repository. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE. cd ISLE Copy the path of the present working directory. pwd Use mouse/trackpad to highlight the full path (i.e. C:\\Users\\somebody\\ISLE ) and Click Enter to copy to clipboard. Edit .env file. Press the Windows key. Type Notepad . In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open In the File name: input box, paste the above copied path. Click Enter . Use dropdown on right to change Text Documents (*.txt) to All Files (*.*) (if needed, see How to show hidden files ). Select the .env file and click Open . Find the following line and uncomment it (by deleting the preceding # character): # COMPOSE_CONVERT_WINDOWS_PATHS=1 to: COMPOSE_CONVERT_WINDOWS_PATHS=1 Click File > Save , and then File -> Exit . Your host server is now configured and ready to run ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment","title":"2. Software Dependencies"},{"location":"install/host-software-dependencies/#software-dependencies","text":"Please select your operating system: Ubuntu CentOS Mac Windows","title":"Software Dependencies"},{"location":"install/host-software-dependencies/#ubuntu","text":"","title":"Ubuntu"},{"location":"install/host-software-dependencies/#step-1-install-server-prerequisites-and-git","text":"Open a terminal on your local workstation or ssh to the server or VM. You must have root level permissions. If you are not already root , enter either sudo -s or sudo su to become root. Update and install the following required software: apt-get update && upgrade apt-get install -y openssl git htop ntp wget curl nano apt-transport-https ca-certificates software-properties-common","title":"Step 1: Install Server Prerequisites and Git"},{"location":"install/host-software-dependencies/#step-2-install-docker","text":"Add the Docker Repository. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update package list. apt-get update Install Docker. apt-get install -y docker-ce Enable and start Docker. systemctl enable docker && systemctl start docker","title":"Step 2: Install Docker"},{"location":"install/host-software-dependencies/#step-3-install-docker-compose","text":"Copy and paste the command below. curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose Test the Installation. docker-compose --version Example output: docker-compose version 1.23.1, build 1110ad01","title":"Step 3: Install Docker-Compose"},{"location":"install/host-software-dependencies/#step-4-add-your-user-to-the-docker-group","text":"Allow your user to run Docker commands and to launch the entire ISLE stack. If you are still root ( whoami ), type exit to become your normal user. Add yourself to the docker group. sudo usermod -aG docker $USER Type exit and then reconnect (this allows your effective groups to update).","title":"Step 4: Add Your User to the docker Group"},{"location":"install/host-software-dependencies/#step-5-clone-isle-repository","text":"Please note: The location you clone the repository to becomes your project directory. It can be located anywhere and will include your configuration and log output of the containers. Please run these steps as your normal user (not root ): Clone the repository. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE. cd ISLE Your host server is now configured and ready to run ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment","title":"Step 5: Clone ISLE Repository"},{"location":"install/host-software-dependencies/#centos","text":"","title":"CentOS"},{"location":"install/host-software-dependencies/#step-1-install-server-prerequisites-and-git_1","text":"Open a terminal on your local workstation or ssh to the server or VM. You must have root level permissions. If you are not already root , enter either sudo -s or sudo su to become root. Add the CentOS/RHEL epel-release package repository. yum install -y epel-release Install the following: yum install -y openssl git htop ntp wget curl nano yum install -y yum-utils device-mapper-persistent-data lvm2","title":"Step 1: Install Server Prerequisites and Git"},{"location":"install/host-software-dependencies/#step-2-install-docker_1","text":"Add the Docker Repository. yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo` Install Docker. yum install -y docker-ce","title":"Step 2: Install Docker"},{"location":"install/host-software-dependencies/#step-3-install-docker-compose_1","text":"Copy and paste the command below. curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose Test the Installation. docker-compose --version Example output: docker-compose version 1.23.1, build 1110ad01","title":"Step 3: Install Docker-Compose"},{"location":"install/host-software-dependencies/#step-4-add-your-user-to-the-docker-group_1","text":"Allow your user to run Docker commands and to launch the entire ISLE stack. If you are still root ( whoami ), type exit to become your normal user. Add yourself to the docker group. sudo usermod -aG docker $USER Type exit and then reconnect (this allows your effective groups to update).","title":"Step 4: Add Your User to the docker Group"},{"location":"install/host-software-dependencies/#step-5-clone-isle-repository_1","text":"Please note: The location you clone the repository to becomes your project directory. It can be located anywhere and will include your configuration and log output of the containers. Please run these steps as your normal user (not root ): Clone the repository. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE. cd ISLE Your host server is now configured and ready to run ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment","title":"Step 5: Clone ISLE Repository"},{"location":"install/host-software-dependencies/#mac","text":"","title":"Mac"},{"location":"install/host-software-dependencies/#step-1-install-git","text":"Git must be installed to get a copy (called a clone ) of the current ISLE project. (Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people.) Open a terminal (launch Spotlight, type \"Terminal,\" double-click result \"Terminal\") Enter: git --version . If git is already installed, the above command will output the installed version number. For example: $git --version git version 2.15.1 If git is not installed, the above command may trigger the Install Command Line Developer Tools prompt to appear. If so: Click on the blue Install button for the license agreement. Click the white Agree button. The package will take 1-2 minutes to download. Click the Done button once finished. If git is not installed and the prompt does not show, then use this tutorial to Install Git on Mac OS X .","title":"Step 1: Install Git"},{"location":"install/host-software-dependencies/#step-2-install-docker-for-mac","text":"Open a browser and navigate to Docker Desktop Click the Download for Mac button in the center of the page Click the Please Login to Download button on the right of the page (click: Sign In or Create Account ) Click the Get Docker button on the right of the page The Docker.dmg file should start to download. Check your Downloads directory Double-click the Docker.dmg file. The file should open and mount in a new window / prompt. As instructed within the prompt, drag and drop the whale icon to the right towards the Applications directory shortcut, a tiny green plus sign should appear, now let go from the mouse or trackpad. The application should start to copy data to the Applications directory, this process may take 1 - 5 mins depending on the speed of your hard-drive. Launch the Docker application from the Applications directory This process should may take 2 -5 mins depending on the speed of your hard-drive. Once fully started, one can see a whale icon at the top of their screen. If this is clicked, a dropdown should appear indicating that Docker is now running. Please note: This process also installs the newest version of docker-compose .","title":"Step 2: Install Docker for Mac"},{"location":"install/host-software-dependencies/#step-3-clone-isle-repository","text":"Please note: The location you clone the repository to becomes your project directory. It can be located anywhere and will include your configuration and log output of the containers. Please run these steps as your normal user (not root ): Clone the repository. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE. cd ISLE To improve performance on Mac OSX: Open docker-compose.yml in a text editor and go to the the apache section Under volumes find the following line: - ./mnt/html:/var/www/html Change to: - ./mnt/html:/var/www/html:cached Your host server is now configured and ready to run ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment","title":"Step 3: Clone ISLE Repository"},{"location":"install/host-software-dependencies/#windows","text":"","title":"Windows"},{"location":"install/host-software-dependencies/#step-1-install-git_1","text":"Git must be installed to get a copy (called a clone ) of the current ISLE project. (Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people.) Press the Windows key. Type PowerShell . In the search results, RIGHT-CLICK Windows PowerShell , select Run as administrator , and enter Yes to prompt. Enter: git --version . If git is already installed, the above command will output the installed version number. For example: $git --version git version 2.15.1 If git is not installed, then Download Git for Windows . Click Download , Save the file to your Desktop, double-click that file to install, then click Yes to the prompt. Click Next to accept all of the installer's default selections.","title":"Step 1: Install Git"},{"location":"install/host-software-dependencies/#step-2-install-docker-desktop-for-windows","text":"Important: Docker requires Windows Professional or Windows Enterprise Download Docker Desktop for Windows Click the Please Login to Download button on the right of the page (click: Sign In or Create Account ) Click the Get Docker button on the right of the page, Save the file to your Desktop, double-click that file to install, then click Yes to the prompt. Click OK or Next to accept all of the installer's default selections. You will be required to Close and log out when the installation is complete. The computer will reboot; please sign in. If prompted to enable Hyper-V and Containers features , click OK . If prompted with a Docker popup dialogue to Login with your Docker ID , you may do so with your Docker.com account information, or you may simply close the window. Docker is running and you do not need to login to use it. One can see a whale icon in the notification area. Please note: This process also installs the newest version of docker-compose .","title":"Step 2: Install Docker Desktop for Windows"},{"location":"install/host-software-dependencies/#step-3-clone-isle-repository_1","text":"Please note: The location you select to clone the ISLE repository becomes your project directory. We recommend using the default user home directory; this location will include your configuration and log output of the Docker containers. (You may choose a different location, but it must not be a protected folder such as system or root directory.) Use PowerShell (and remember to Run as administrator ). Enter cd ~ (to change to the user's home directory). Clone the repository. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE. cd ISLE Copy the path of the present working directory. pwd Use mouse/trackpad to highlight the full path (i.e. C:\\Users\\somebody\\ISLE ) and Click Enter to copy to clipboard. Edit .env file. Press the Windows key. Type Notepad . In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open In the File name: input box, paste the above copied path. Click Enter . Use dropdown on right to change Text Documents (*.txt) to All Files (*.*) (if needed, see How to show hidden files ). Select the .env file and click Open . Find the following line and uncomment it (by deleting the preceding # character): # COMPOSE_CONVERT_WINDOWS_PATHS=1 to: COMPOSE_CONVERT_WINDOWS_PATHS=1 Click File > Save , and then File -> Exit . Your host server is now configured and ready to run ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Remote Server ISLE Installation Migrate to ISLE Environment","title":"Step 3: Clone ISLE Repository"},{"location":"install/install-demo-edit-hosts-file/","text":"Demo ISLE Installation: Edit the \"/etc/hosts\" File Edit the /etc/hosts file to view ISLE locally on a workstation browser. Please select your operating system and software: Mac or Ubuntu Using Docker Mac or Ubuntu Desktop Using VirtualBox VM (non-Vagrant) Windows Using Docker Windows Using Virtualbox VM (non-Vagrant) Mac or Ubuntu Using Docker Docker For Mac If you are using Docker For Mac, then use the IP address of 127.0.0.1 to resolve to localhost and to the isle.localdomain localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain domain names Open a terminal on the local laptop Enter: sudo nano /etc/hosts For endusers familiar with editing files on the command line, vim, emacs or alternative tools can be used in lieu of nano Enter the laptop end user password Add the values next to the 127.0.0.1 localhost entry in the /etc/hosts file. 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain with a space in between the entries. Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file. Please return to Demo ISLE Installation and continue with Step 2: Launch Process . Mac or Ubuntu Desktop Using Virtualbox VM (non-Vagrant) From the instructions in setting up the Virtualbox VM on your OS (MacOS, Ubuntu or Windows), the IP used to setup the Host-Only network was 10.10.10.130 Add the value of 10.10.10.130 isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain to the laptop / workstation's /etc/hosts file. For endusers running MacOS and Ubuntu Desktop: Open a terminal on the local laptop Enter: sudo nano /etc/hosts For endusers familiar with editing files on the command line, vim, emacs or alternative tools can be used in lieu of nano Enter the laptop end user password Add the values below the 127.0.0.1 entry in the /etc/hosts file. 10.10.10.130 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Example 127.0.0.1 localhost 10.10.10.130 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file. Please return to Demo ISLE Installation and continue with Step 2: Launch Process . Windows Using Docker For endusers running Windows 10: Press the Windows key. Type Notepad . In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open . In the File name: input box, paste this path C:\\Windows\\System32\\Drivers\\etc\\hosts . Click Open . Find the 127.0.0.1 localhost entry and uncomment it (by deleting the preceding # character). Go to end of same line, add one space, and then paste the following: 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Click File > Save , and then File -> Exit . Please return to Demo ISLE Installation and continue with Step 2: Launch Process . Windows Using Virtualbox VM (non-Vagrant) For endusers running Windows 10: Press the Windows key. Type Notepad . In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open . In the File name: input box, paste this path C:\\Windows\\System32\\Drivers\\etc\\hosts . Click Open . Find the 127.0.0.1 entry, then paste the following values below that line: 10.10.10.130 isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Click File > Save , and then File -> Exit . Please return to Demo ISLE Installation and continue with Step 2: Launch Process .","title":"Demo ISLE Installation: Edit the \"/etc/hosts\" File"},{"location":"install/install-demo-edit-hosts-file/#demo-isle-installation-edit-the-etchosts-file","text":"Edit the /etc/hosts file to view ISLE locally on a workstation browser. Please select your operating system and software: Mac or Ubuntu Using Docker Mac or Ubuntu Desktop Using VirtualBox VM (non-Vagrant) Windows Using Docker Windows Using Virtualbox VM (non-Vagrant)","title":"Demo ISLE Installation: Edit the \"/etc/hosts\" File"},{"location":"install/install-demo-edit-hosts-file/#mac-or-ubuntu-using-docker","text":"Docker For Mac If you are using Docker For Mac, then use the IP address of 127.0.0.1 to resolve to localhost and to the isle.localdomain localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain domain names Open a terminal on the local laptop Enter: sudo nano /etc/hosts For endusers familiar with editing files on the command line, vim, emacs or alternative tools can be used in lieu of nano Enter the laptop end user password Add the values next to the 127.0.0.1 localhost entry in the /etc/hosts file. 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain with a space in between the entries. Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file. Please return to Demo ISLE Installation and continue with Step 2: Launch Process .","title":"Mac or Ubuntu Using Docker"},{"location":"install/install-demo-edit-hosts-file/#mac-or-ubuntu-desktop-using-virtualbox-vm-non-vagrant","text":"From the instructions in setting up the Virtualbox VM on your OS (MacOS, Ubuntu or Windows), the IP used to setup the Host-Only network was 10.10.10.130 Add the value of 10.10.10.130 isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain to the laptop / workstation's /etc/hosts file. For endusers running MacOS and Ubuntu Desktop: Open a terminal on the local laptop Enter: sudo nano /etc/hosts For endusers familiar with editing files on the command line, vim, emacs or alternative tools can be used in lieu of nano Enter the laptop end user password Add the values below the 127.0.0.1 entry in the /etc/hosts file. 10.10.10.130 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Example 127.0.0.1 localhost 10.10.10.130 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file. Please return to Demo ISLE Installation and continue with Step 2: Launch Process .","title":"Mac or Ubuntu Desktop Using Virtualbox VM (non-Vagrant)"},{"location":"install/install-demo-edit-hosts-file/#windows-using-docker","text":"For endusers running Windows 10: Press the Windows key. Type Notepad . In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open . In the File name: input box, paste this path C:\\Windows\\System32\\Drivers\\etc\\hosts . Click Open . Find the 127.0.0.1 localhost entry and uncomment it (by deleting the preceding # character). Go to end of same line, add one space, and then paste the following: 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Click File > Save , and then File -> Exit . Please return to Demo ISLE Installation and continue with Step 2: Launch Process .","title":"Windows Using Docker"},{"location":"install/install-demo-edit-hosts-file/#windows-using-virtualbox-vm-non-vagrant","text":"For endusers running Windows 10: Press the Windows key. Type Notepad . In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open . In the File name: input box, paste this path C:\\Windows\\System32\\Drivers\\etc\\hosts . Click Open . Find the 127.0.0.1 entry, then paste the following values below that line: 10.10.10.130 isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Click File > Save , and then File -> Exit . Please return to Demo ISLE Installation and continue with Step 2: Launch Process .","title":"Windows Using Virtualbox VM (non-Vagrant)"},{"location":"install/install-demo-resources/","text":"Demo ISLE Installation: Resources Local URL Always use the https://isle.localdomain domain to view and log in to a local site. (Do not use an IP address, such as https://10.10.10.130 or https://127.0.0.01 as some components may not function correctly.) Docker Containers: Passwords islandora user on the ISLE host server uses islandora as the password. Some of the information below is for accessing the non Drupal site admin panels and resources only. (optional). In this context, hostip below can mean either the IP address e.g. http://10.10.10.130 of the Vagrant or Non-Vagrant Host VM ( CentOS / Ubuntu ) the IP address e.g. 127.0.0.1 for Docker for Mac 1. MySQL Container Compose Service Name Container Name Software Ports mysql isle-mysql-ld MySQL 5.7 3306 Account Password Database Perms root ild_mysqlrt_2018 ALL ALL fedora_admin ild_feddb_2018 fedora3 All except Grant option isle_ld_user isle_ld_db2018 isle_ld All except Grant option 2. Fedora Container Compose Service Name Container Name Software Ports fedora isle-fedora-ld see below 8080 mapped to 8081 (on host) Software Version Fedora 3.8.1 Apache 2.4.7 Drupalfilter 3.8.1 Gsearch (w/remote SOLR plugin) 2.8+ (DG patched) (DG) GSearch Extensions 0.13 (DG) Islandora Transforms (XSLTs) as of 8/2018 Tomcat 7.x Oracle JDK 8.x Account Password Service URL fedoraAdmin ild_fed_admin_2018 Fedora http://hostip:8081/fedora/describe fedoraIntCallUser ild_fed_IntCallUser_2018 Fedora http://hostip:8081/fedora/objects anonymous anonymous Fedora --- fgsAdmin ild_fgs_admin_2018 Gsearch http://hostip:8081/fedoragsearch/rest?operation=updateIndex admin isle_admin Tomcat http://hostip:8081/manager/html manager isle_manager Tomcat http://hostip:8081/manager/html 3. Solr Container Compose Service Name Container Name Software Ports solr isle-solr-ld see below 8080 (on container) mapped to 8082 (on host) Software Version Solr 4.10.4 Tomcat 7.x Oracle JDK 8.x (DG) Basic Solr Config 4.10.x branch Account Password Service URL admin isle_admin Tomcat http://hostip:8082/manager/html manager isle_manager Tomcat http://hostip:8082/manager/html -- -- Solr http://hostip:8082/solr/ 4. Apache Container Compose Service Name Container Name Software Ports apache isle-apache-ld see below 80, 443 Software Version Apache 2.4.7 Oracle JDK 8.x Djatoka 1.1 Drupal 7.57 PHP 5.6 Islandora 7.x Account Password Service URL isle isle Drupal site admin https://isle.localdomain 5. Proxy Container Compose Service Name Container Name Software Ports proxy isle-proxy Traefik 80, 443 Account Password Service URL None Required None Required Proxy UI https://admin.isle.localdomain OR http://hostip:8080 The Proxy Control Panel is available at admin.isle.localdomain . No username/password are required. This is unsafe for production environments. 6. Image Services Compose Service Name Container Name Software Ports image-services isle-images-ld see below 8080 (on container) mapped to 8083 (on host) Software Version Djatoka 1.1 Cantaloupe IIIF 3.4.3 Account Password Service URL admin isle_admin Tomcat http://hostip:8082/manager/html manager isle_manager Tomcat http://hostip:8082/manager/html N/A N/A Djatoka http://hostip:8083/adore-djatoka/ admin isle_admin Cantaloupe http://hostip:8083/cantaloupe/admin 7. Portainer Portainer (a Docker control panel) is available at portainer.isle.localdomain . No username/password are required. This is unsafe for production environments. Return to Demo ISLE Installation .","title":"Demo ISLE Installation: Resources"},{"location":"install/install-demo-resources/#demo-isle-installation-resources","text":"","title":"Demo ISLE Installation: Resources"},{"location":"install/install-demo-resources/#local-url","text":"Always use the https://isle.localdomain domain to view and log in to a local site. (Do not use an IP address, such as https://10.10.10.130 or https://127.0.0.01 as some components may not function correctly.)","title":"Local URL"},{"location":"install/install-demo-resources/#docker-containers-passwords","text":"islandora user on the ISLE host server uses islandora as the password. Some of the information below is for accessing the non Drupal site admin panels and resources only. (optional). In this context, hostip below can mean either the IP address e.g. http://10.10.10.130 of the Vagrant or Non-Vagrant Host VM ( CentOS / Ubuntu ) the IP address e.g. 127.0.0.1 for Docker for Mac","title":"Docker Containers: Passwords"},{"location":"install/install-demo-resources/#1-mysql-container","text":"Compose Service Name Container Name Software Ports mysql isle-mysql-ld MySQL 5.7 3306 Account Password Database Perms root ild_mysqlrt_2018 ALL ALL fedora_admin ild_feddb_2018 fedora3 All except Grant option isle_ld_user isle_ld_db2018 isle_ld All except Grant option","title":"1. MySQL Container"},{"location":"install/install-demo-resources/#2-fedora-container","text":"Compose Service Name Container Name Software Ports fedora isle-fedora-ld see below 8080 mapped to 8081 (on host) Software Version Fedora 3.8.1 Apache 2.4.7 Drupalfilter 3.8.1 Gsearch (w/remote SOLR plugin) 2.8+ (DG patched) (DG) GSearch Extensions 0.13 (DG) Islandora Transforms (XSLTs) as of 8/2018 Tomcat 7.x Oracle JDK 8.x Account Password Service URL fedoraAdmin ild_fed_admin_2018 Fedora http://hostip:8081/fedora/describe fedoraIntCallUser ild_fed_IntCallUser_2018 Fedora http://hostip:8081/fedora/objects anonymous anonymous Fedora --- fgsAdmin ild_fgs_admin_2018 Gsearch http://hostip:8081/fedoragsearch/rest?operation=updateIndex admin isle_admin Tomcat http://hostip:8081/manager/html manager isle_manager Tomcat http://hostip:8081/manager/html","title":"2. Fedora Container"},{"location":"install/install-demo-resources/#3-solr-container","text":"Compose Service Name Container Name Software Ports solr isle-solr-ld see below 8080 (on container) mapped to 8082 (on host) Software Version Solr 4.10.4 Tomcat 7.x Oracle JDK 8.x (DG) Basic Solr Config 4.10.x branch Account Password Service URL admin isle_admin Tomcat http://hostip:8082/manager/html manager isle_manager Tomcat http://hostip:8082/manager/html -- -- Solr http://hostip:8082/solr/","title":"3. Solr Container"},{"location":"install/install-demo-resources/#4-apache-container","text":"Compose Service Name Container Name Software Ports apache isle-apache-ld see below 80, 443 Software Version Apache 2.4.7 Oracle JDK 8.x Djatoka 1.1 Drupal 7.57 PHP 5.6 Islandora 7.x Account Password Service URL isle isle Drupal site admin https://isle.localdomain","title":"4. Apache Container"},{"location":"install/install-demo-resources/#5-proxy-container","text":"Compose Service Name Container Name Software Ports proxy isle-proxy Traefik 80, 443 Account Password Service URL None Required None Required Proxy UI https://admin.isle.localdomain OR http://hostip:8080 The Proxy Control Panel is available at admin.isle.localdomain . No username/password are required. This is unsafe for production environments.","title":"5. Proxy Container"},{"location":"install/install-demo-resources/#6-image-services","text":"Compose Service Name Container Name Software Ports image-services isle-images-ld see below 8080 (on container) mapped to 8083 (on host) Software Version Djatoka 1.1 Cantaloupe IIIF 3.4.3 Account Password Service URL admin isle_admin Tomcat http://hostip:8082/manager/html manager isle_manager Tomcat http://hostip:8082/manager/html N/A N/A Djatoka http://hostip:8083/adore-djatoka/ admin isle_admin Cantaloupe http://hostip:8083/cantaloupe/admin","title":"6. Image Services"},{"location":"install/install-demo-resources/#7-portainer","text":"Portainer (a Docker control panel) is available at portainer.isle.localdomain . No username/password are required. This is unsafe for production environments. Return to Demo ISLE Installation .","title":"7. Portainer"},{"location":"install/install-demo-troubleshooting/","text":"Demo ISLE Installation: Troubleshooting Please select a topic: Port Conflicts Non-Running Docker Containers Port Conflicts If you encounter an error like this: Error starting userland proxy: Bind for 0.0.0.0:xxxx failed: port is already allocated then ISLE may have encountered a conflict with the xxxx port identified in the error message. In MacOS, this can frequently be caused by a local Apache or Nginx web server, or local MySQL server. You may need to remove or disable these local web servers before you can successfully install ISLE. If you have a local Apache web server that ships with most MacOS machines may conflict with port 80, and can usually be disabled from a terminal using these commands: sudo apachectl stop sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2>/dev/null If you have a local Nginx web server it may conflict with port 8080, and it can usually be disabled from a terminal using: sudo nginx -s stop Once your web server(s) have been disabled, resume the ISLE install process by repeating your last installation command, presumably docker-compose up -d . Return to Demo ISLE Installation . Non-Running Docker Containers If you don't see all containers running, then stop the running containers with docker-compose down and start the containers one at a time following the instructions below: MySQL image pull & container launch docker pull islandoracollabgroup/isle-mysql:1.1 docker-compose up -d mysql Fedora image pull & container launch docker pull islandoracollabgroup/isle-fedora:1.1 docker-compose up -d fedora (Optional but recommended troubleshooting step) Please note the Tomcat service requires about one to three minutes to startup and as such if the end user rushes to the URL supplied below, the service page may time out or be reported as unreachable. Give it a little time. After spinning up fedora container, check if the Fedora service is running prior to advancing. Navigate to http://hostip:8081/manager/html a popup login prompt should appear. Enter the user name of admin and the password of isle_admin Upon login a large display of running Tomcat applications should display, scroll down to fedora The application state / status should be true If false appears instead, attempt to restart the fedora service manually. Select the restart button to the right of the status area. If it still fails, review the mounted fedora logs. The docker-compose.yml file will indicate where the logs are located. Using terminal and then entering a command like tail -n 300 - <path to ISLE project/data/fedora/log/tomcat:/usr/local/tomcat/logs/fedora.log should display enough information to troubleshoot or restart the entire startup process. Solr image pull & container launch docker pull islandoracollabgroup/isle-solr:1.1 docker-compose up -d solr Apache image pull & container launch docker pull islandoracollabgroup/isle-apache:1.1 docker-compose up -d apache Return to Demo ISLE Installation .","title":"Demo ISLE Installation: Troubleshooting"},{"location":"install/install-demo-troubleshooting/#demo-isle-installation-troubleshooting","text":"Please select a topic: Port Conflicts Non-Running Docker Containers","title":"Demo ISLE Installation: Troubleshooting"},{"location":"install/install-demo-troubleshooting/#port-conflicts","text":"If you encounter an error like this: Error starting userland proxy: Bind for 0.0.0.0:xxxx failed: port is already allocated then ISLE may have encountered a conflict with the xxxx port identified in the error message. In MacOS, this can frequently be caused by a local Apache or Nginx web server, or local MySQL server. You may need to remove or disable these local web servers before you can successfully install ISLE. If you have a local Apache web server that ships with most MacOS machines may conflict with port 80, and can usually be disabled from a terminal using these commands: sudo apachectl stop sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2>/dev/null If you have a local Nginx web server it may conflict with port 8080, and it can usually be disabled from a terminal using: sudo nginx -s stop Once your web server(s) have been disabled, resume the ISLE install process by repeating your last installation command, presumably docker-compose up -d . Return to Demo ISLE Installation .","title":"Port Conflicts"},{"location":"install/install-demo-troubleshooting/#non-running-docker-containers","text":"If you don't see all containers running, then stop the running containers with docker-compose down and start the containers one at a time following the instructions below: MySQL image pull & container launch docker pull islandoracollabgroup/isle-mysql:1.1 docker-compose up -d mysql Fedora image pull & container launch docker pull islandoracollabgroup/isle-fedora:1.1 docker-compose up -d fedora (Optional but recommended troubleshooting step) Please note the Tomcat service requires about one to three minutes to startup and as such if the end user rushes to the URL supplied below, the service page may time out or be reported as unreachable. Give it a little time. After spinning up fedora container, check if the Fedora service is running prior to advancing. Navigate to http://hostip:8081/manager/html a popup login prompt should appear. Enter the user name of admin and the password of isle_admin Upon login a large display of running Tomcat applications should display, scroll down to fedora The application state / status should be true If false appears instead, attempt to restart the fedora service manually. Select the restart button to the right of the status area. If it still fails, review the mounted fedora logs. The docker-compose.yml file will indicate where the logs are located. Using terminal and then entering a command like tail -n 300 - <path to ISLE project/data/fedora/log/tomcat:/usr/local/tomcat/logs/fedora.log should display enough information to troubleshoot or restart the entire startup process. Solr image pull & container launch docker pull islandoracollabgroup/isle-solr:1.1 docker-compose up -d solr Apache image pull & container launch docker pull islandoracollabgroup/isle-apache:1.1 docker-compose up -d apache Return to Demo ISLE Installation .","title":"Non-Running Docker Containers"},{"location":"install/install-demo/","text":"Demo ISLE Installation Expectations: It takes an average of 45 minutes to read this documentation and complete this installation. This Demo ISLE Installation creates an Islandora environment on your workstation that you can view locally in your browser as https://isle.localdomain . This process includes an un-themed Drupal website and an empty Fedora repository so you may ingest test objects, add or edit metadata, update fields in SOLR indexing, develop code, and otherwise \"kick the tires\" on ISLE. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites This Demo ISLE Installation is intended for a local workstation. Step 1: Edit File /etc/hosts to View ISLE Locally on Workstation Browser Enable the Demo ISLE Installation to be viewed locally as: https://isle.localdomain Please use these instructions to Edit the \"/etc/hosts\" File . Step 2: Launch Process Open a terminal (Windows: open PowerShell ) Navigate to your ISLE project directory. (You may already be in this directory if you are coming from the Software Dependencies .) Download and start all ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): docker-compose up -d After the above process is completed: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of UP (for x time). If any of these are not UP , then use Demo ISLE Installation: Troubleshooting to solve before continuing below. Step 3: Run Install Script This process may take 10 - 20 minutes ( depending on system and internet speeds ) Run the install site script on the Apache container by copying and pasting this command: docker exec -it isle-apache-ld bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh For Windows Users only You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. Proceed only after this message appears: Clearing Drupal Caches. 'all' cache was cleared. Step 4: Test the Site In your web browser, enter this URL: https://isle.localdomain Note: You may see an SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. Log in to the local Islandora site: Username: isle Password: isle Step 5: Ingest Sample Objects The Islandora Collaboration Group provides a set of Islandora Sample Objects with corresponding metadata for testing Islandora's ingest process. These sample objects are organized by solution pack and are zipped for faster bulk ingestion. To download these sample objects, clone them to your computer's desktop: git clone https://github.com/Islandora-Collaboration-Group/islandora-sample-objects.git Follow these ingestion instructions How to Add an Item to a Digital Collection (Note: Getting Started with Islandora contains explanations about content models, collections, and datastreams.) After ingesting content, you will need to add an Islandora Simple Search block to the Drupal structure. (The default search box will only search Drupal content, not Islandora content.) Select from the menu: Structure > Blocks > Islandora Simple Search Select: Sidebar Second Click: Save Blocks at bottom of page You may now search for ingested objects that have been indexed by SOLR Step 6: Additional Resources Demo ISLE Installation: Resources contains Docker container passwords and URLs for administrator tools. Demo ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. End of Demo ISLE Installation.","title":"3. Demo ISLE Installation"},{"location":"install/install-demo/#demo-isle-installation","text":"Expectations: It takes an average of 45 minutes to read this documentation and complete this installation. This Demo ISLE Installation creates an Islandora environment on your workstation that you can view locally in your browser as https://isle.localdomain . This process includes an un-themed Drupal website and an empty Fedora repository so you may ingest test objects, add or edit metadata, update fields in SOLR indexing, develop code, and otherwise \"kick the tires\" on ISLE. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Demo ISLE Installation"},{"location":"install/install-demo/#assumptions-prerequisites","text":"This Demo ISLE Installation is intended for a local workstation.","title":"Assumptions / Prerequisites"},{"location":"install/install-demo/#step-1-edit-file-etchosts-to-view-isle-locally-on-workstation-browser","text":"Enable the Demo ISLE Installation to be viewed locally as: https://isle.localdomain Please use these instructions to Edit the \"/etc/hosts\" File .","title":"Step 1: Edit File /etc/hosts to View ISLE Locally on Workstation Browser"},{"location":"install/install-demo/#step-2-launch-process","text":"Open a terminal (Windows: open PowerShell ) Navigate to your ISLE project directory. (You may already be in this directory if you are coming from the Software Dependencies .) Download and start all ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): docker-compose up -d After the above process is completed: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of UP (for x time). If any of these are not UP , then use Demo ISLE Installation: Troubleshooting to solve before continuing below.","title":"Step 2: Launch Process"},{"location":"install/install-demo/#step-3-run-install-script","text":"This process may take 10 - 20 minutes ( depending on system and internet speeds ) Run the install site script on the Apache container by copying and pasting this command: docker exec -it isle-apache-ld bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh For Windows Users only You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. Proceed only after this message appears: Clearing Drupal Caches. 'all' cache was cleared.","title":"Step 3: Run Install Script"},{"location":"install/install-demo/#step-4-test-the-site","text":"In your web browser, enter this URL: https://isle.localdomain Note: You may see an SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. Log in to the local Islandora site: Username: isle Password: isle","title":"Step 4: Test the Site"},{"location":"install/install-demo/#step-5-ingest-sample-objects","text":"The Islandora Collaboration Group provides a set of Islandora Sample Objects with corresponding metadata for testing Islandora's ingest process. These sample objects are organized by solution pack and are zipped for faster bulk ingestion. To download these sample objects, clone them to your computer's desktop: git clone https://github.com/Islandora-Collaboration-Group/islandora-sample-objects.git Follow these ingestion instructions How to Add an Item to a Digital Collection (Note: Getting Started with Islandora contains explanations about content models, collections, and datastreams.) After ingesting content, you will need to add an Islandora Simple Search block to the Drupal structure. (The default search box will only search Drupal content, not Islandora content.) Select from the menu: Structure > Blocks > Islandora Simple Search Select: Sidebar Second Click: Save Blocks at bottom of page You may now search for ingested objects that have been indexed by SOLR","title":"Step 5: Ingest Sample Objects"},{"location":"install/install-demo/#step-6-additional-resources","text":"Demo ISLE Installation: Resources contains Docker container passwords and URLs for administrator tools. Demo ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc.","title":"Step 6: Additional Resources"},{"location":"install/install-demo/#end-of-demo-isle-installation","text":"","title":"End of Demo ISLE Installation."},{"location":"install/install-server/","text":"Remote Server ISLE Installation Expectations: It may take at least 4 - 6 hours or more to read this documentation and complete this installation. Please proceed slowly. This Remote Server ISLE Installation creates an Islandora environment with a unique domain (URL) on your host server, virtual machine, or cloud hosted platform. You may also use this documentation to install ISLE on several host servers, virtual machines, or cloud hosted platforms to create multiple Islandora environments (e.g. development, staging, and production). This process will result in an un-themed Drupal website and an empty Fedora repository. (Please refer back to the Hardware Requirements as the development environment needs fewer resources than the staging and production environments; the latter two should mirror each other in resource usage and setup.) Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites You have already completed the Hardware Requirements and the Software Dependencies for your host server. SSL Certificates: Use the Let's Encrypt guide to generate SSL Certificates or ask your IT resource to provision SSL Certificates for the web domain. Never ever share or post your .env files publicly. The .env and tomcat.env files (\"Docker Environment files\") are your primary resources for customizing your ISLE stack. These .env files contain passwords and usernames and must be treated with the utmost care. THIS SECTION IS IN DEVELOPMENT. PLEASE COME BACK SOON. Setup GIT Workflow Create Two Private Institutional GIT Repositories Note: Since public forks can\u2019t be made private, we will duplicate (instead of forking) the repository to enable them to be private. Create a PRIVATE remote git repository on your institution's GitHub account (or Bitbucket) and name it: [project-name]-ISLE (example: digital-ISLE ). Leave this repository empty. Create another PRIVATE remote git repository on your institution's GitHub account (or Bitbucket) and name it: [project-name]-islandora (example: digital-islandora ). Leave this repository empty. Set your Remotes: Upstream and Origin Open a terminal and navigate to /opt/ISLE (or where you cloned the ISLE directory). Type git remote -v You want to have four lines returned, two that describe your private repository (called origin ) and two that describe the source ISLE github site (called upstream ): origin https://github.com/dwk2/ISLE-Documentation.git (fetch) origin https://github.com/dwk2/ISLE-Documentation.git (push) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) If the name of the https://github.com/Islandora-Collaboration-Group/ISLE.git is not upstream , then please correct that: Remove the non-upstream name: git remote rm non-upstream-name-here Rename it to be \"upstream\": git remote add upstream https://github.com/Islandora-Collaboration-Group/ISLE Add your private insitutional repository as the remote origin . In the line below, substitute your-institution and \"project-name\", then enter it in your terminal. git remote add origin https://github.com/your-institution/project-name-ISLE Pull from the remote upstream master and update the remote origin master branch. Pull from upstream: git pull upstream master Git will ask you to authenicate with username and password: $> Username for 'https://github.com': your-github-name $> Password for 'https://your-github-name@github.com': xxxxx TODO: Lookup how to have your server remember your pwd and link to that here. TODO: Do you have 2-factor auth set up for github? No - okay, enter your github account username and pwd Yes - have to setup keys (link to how to do that..) Push to origin: git push -u origin master (-u is a one-time command that sets up tracking for branches) Done: You have now setup your server to consider ICG as upstream and \"[project-name]-ISLE\" as origin. General outline of Git Workflow: Work on local Pull from upstream master Push to origin master On development, staging, and production environments: pull from your single institutional git repository (e.g. williamscollege/unbound-ISLE) Docker Environment Files (.env) Edit the .env file and change the values of COMPOSE_PROJECT_NAME, BASE_DOMAIN, and CONTAINER_SHORT_ID. e.g. for a production site you may use: COMPOSE_PROJECT_NAME=isleproduction BASE_DOMAIN=mydomain.edu CONTAINER_SHORT_ID=prod Please note: Much of the file is already with comments guiding the end user to key areas or files to edit or modify accordingly. Master Section * COMPOSE_PROJECT_NAME to something unique (e.g. `COMPOSE_PROJECT_NAME=isle-production-collections`) * This variable is appended to Docker objects like: volume names, network names. * BASE_DOMAIN to your domainname (e.g. `BASE_DOMAIN=project-name.yourdomain.edu`) * This variable specifies your domain name! * CONTAINER_SHORT_ID to something unique (e.g. `CONTAINER_SHORT_ID=prod`). * This variable is appended to the end of all running containers, keep it _short_! Environment Files - Tables contain important user names that relate to mysql and fedora and drupal databases. Config Directory The config directory has many purposes like holding customized configuration files mounted to specific containers (which we have no covered here), but for a single simple site we only use it to hold our proxy configs and as a place to store our SSL Certificate and Key. Edit File docker-compose.yml For Production and Staging Servers Only: Open the docker-compose.yml file and modify the environment variables called JAVA_MAX_MEM and JAVA_MIN_MEM for fedora, solr, and image-services. fedora: ... environment: - JAVA_MAX_MEM=2048M - JAVA_MIN_MEM=256M ... solr: ... environment: - JAVA_MAX_MEM=2048M - JAVA_MIN_MEM=256M ... image-services: ... environment: - JAVA_MAX_MEM=2048M - JAVA_MIN_MEM=128M Proxy Directory If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. The proxy subdirectory contains all specific configurations necessary for the Traefik proxy to function properly with your changes. If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. There are also additional links for the end user to learn how to combine the SSL Certificate File with any available SSL Certificate Chain File for the proxy process to work properly. If you followed the Let's Encrypt configuration guide, you can skip to the next section: Spin up ISLE containers Copy your SSL certificates for the ISLE Proxy into config/proxy/ssl-certs . They will and should have different names than the examples provided below. There can only be 2 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem Edit the config/proxy/traefik.toml file: Change line 27 and 28: certFile = \"/certs/newsite-sample.cert\" ## Change to reflect your CERT, CRT, or PEM keyFile = \"/certs/newsite-sample-key.key\" ## Change to reflect your KEY, or PEM. Spin up ISLE Containers! Run docker-compose up -d Wait for the stack to completely initialize, about 5 minutes (typically much less). Run docker exec -it isle-apache-<CONTAINER_SHORT_ID> bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh Using the value from the .env file here ( typically: isle-apache-prod, or -stage, -dev, etc. ) Give this process 15 - 25 minutes ( depending on the speed of the ISLE Host server internet connection ) Check the newly created and running new site by opening a browser and navigating to your site domain e.g. https://project-name.yourdomain.edu , you should now see an un-themed Drupal site. (Good points for somewhere else:) ISLE removes the need to manually edit the more complex config files that are part of the Islandora stack. Additional Resources TBD: Demo ISLE Installation: Resources contains Docker container passwords and URLs for administrator tools. TBD: Demo ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. End of Remote Server ISLE Installation. Migrate to ISLE Environment Please click Migrate to ISLE Environment if you are installing ISLE to migrate your existing production Islandora 7.x environment to an ISLE environment. This documentation will help you identify and copy your institution's preexisting Islandora data, files, and themes (including your data volume, Drupal site(s) and theme(s), and commonly customized xml and xslt files) to your ISLE environment.","title":"4. Remote Server ISLE Installation"},{"location":"install/install-server/#remote-server-isle-installation","text":"Expectations: It may take at least 4 - 6 hours or more to read this documentation and complete this installation. Please proceed slowly. This Remote Server ISLE Installation creates an Islandora environment with a unique domain (URL) on your host server, virtual machine, or cloud hosted platform. You may also use this documentation to install ISLE on several host servers, virtual machines, or cloud hosted platforms to create multiple Islandora environments (e.g. development, staging, and production). This process will result in an un-themed Drupal website and an empty Fedora repository. (Please refer back to the Hardware Requirements as the development environment needs fewer resources than the staging and production environments; the latter two should mirror each other in resource usage and setup.) Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Remote Server ISLE Installation"},{"location":"install/install-server/#assumptions-prerequisites","text":"You have already completed the Hardware Requirements and the Software Dependencies for your host server. SSL Certificates: Use the Let's Encrypt guide to generate SSL Certificates or ask your IT resource to provision SSL Certificates for the web domain. Never ever share or post your .env files publicly. The .env and tomcat.env files (\"Docker Environment files\") are your primary resources for customizing your ISLE stack. These .env files contain passwords and usernames and must be treated with the utmost care.","title":"Assumptions / Prerequisites"},{"location":"install/install-server/#this-section-is-in-development-please-come-back-soon","text":"","title":"THIS SECTION IS IN DEVELOPMENT. PLEASE COME BACK SOON."},{"location":"install/install-server/#setup-git-workflow","text":"","title":"Setup GIT Workflow"},{"location":"install/install-server/#create-two-private-institutional-git-repositories","text":"Note: Since public forks can\u2019t be made private, we will duplicate (instead of forking) the repository to enable them to be private. Create a PRIVATE remote git repository on your institution's GitHub account (or Bitbucket) and name it: [project-name]-ISLE (example: digital-ISLE ). Leave this repository empty. Create another PRIVATE remote git repository on your institution's GitHub account (or Bitbucket) and name it: [project-name]-islandora (example: digital-islandora ). Leave this repository empty.","title":"Create Two Private Institutional GIT Repositories"},{"location":"install/install-server/#set-your-remotes-upstream-and-origin","text":"Open a terminal and navigate to /opt/ISLE (or where you cloned the ISLE directory). Type git remote -v You want to have four lines returned, two that describe your private repository (called origin ) and two that describe the source ISLE github site (called upstream ): origin https://github.com/dwk2/ISLE-Documentation.git (fetch) origin https://github.com/dwk2/ISLE-Documentation.git (push) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) If the name of the https://github.com/Islandora-Collaboration-Group/ISLE.git is not upstream , then please correct that: Remove the non-upstream name: git remote rm non-upstream-name-here Rename it to be \"upstream\": git remote add upstream https://github.com/Islandora-Collaboration-Group/ISLE Add your private insitutional repository as the remote origin . In the line below, substitute your-institution and \"project-name\", then enter it in your terminal. git remote add origin https://github.com/your-institution/project-name-ISLE Pull from the remote upstream master and update the remote origin master branch. Pull from upstream: git pull upstream master Git will ask you to authenicate with username and password: $> Username for 'https://github.com': your-github-name $> Password for 'https://your-github-name@github.com': xxxxx TODO: Lookup how to have your server remember your pwd and link to that here. TODO: Do you have 2-factor auth set up for github? No - okay, enter your github account username and pwd Yes - have to setup keys (link to how to do that..) Push to origin: git push -u origin master (-u is a one-time command that sets up tracking for branches) Done: You have now setup your server to consider ICG as upstream and \"[project-name]-ISLE\" as origin. General outline of Git Workflow: Work on local Pull from upstream master Push to origin master On development, staging, and production environments: pull from your single institutional git repository (e.g. williamscollege/unbound-ISLE)","title":"Set your Remotes: Upstream and Origin"},{"location":"install/install-server/#docker-environment-files-env","text":"Edit the .env file and change the values of COMPOSE_PROJECT_NAME, BASE_DOMAIN, and CONTAINER_SHORT_ID. e.g. for a production site you may use: COMPOSE_PROJECT_NAME=isleproduction BASE_DOMAIN=mydomain.edu CONTAINER_SHORT_ID=prod Please note: Much of the file is already with comments guiding the end user to key areas or files to edit or modify accordingly.","title":"Docker Environment Files (.env)"},{"location":"install/install-server/#master-section","text":"* COMPOSE_PROJECT_NAME to something unique (e.g. `COMPOSE_PROJECT_NAME=isle-production-collections`) * This variable is appended to Docker objects like: volume names, network names. * BASE_DOMAIN to your domainname (e.g. `BASE_DOMAIN=project-name.yourdomain.edu`) * This variable specifies your domain name! * CONTAINER_SHORT_ID to something unique (e.g. `CONTAINER_SHORT_ID=prod`). * This variable is appended to the end of all running containers, keep it _short_! Environment Files - Tables contain important user names that relate to mysql and fedora and drupal databases.","title":"Master Section"},{"location":"install/install-server/#config-directory","text":"The config directory has many purposes like holding customized configuration files mounted to specific containers (which we have no covered here), but for a single simple site we only use it to hold our proxy configs and as a place to store our SSL Certificate and Key.","title":"Config Directory"},{"location":"install/install-server/#edit-file-docker-composeyml","text":"For Production and Staging Servers Only: Open the docker-compose.yml file and modify the environment variables called JAVA_MAX_MEM and JAVA_MIN_MEM for fedora, solr, and image-services. fedora: ... environment: - JAVA_MAX_MEM=2048M - JAVA_MIN_MEM=256M ... solr: ... environment: - JAVA_MAX_MEM=2048M - JAVA_MIN_MEM=256M ... image-services: ... environment: - JAVA_MAX_MEM=2048M - JAVA_MIN_MEM=128M","title":"Edit File docker-compose.yml"},{"location":"install/install-server/#proxy-directory","text":"If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. The proxy subdirectory contains all specific configurations necessary for the Traefik proxy to function properly with your changes. If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. There are also additional links for the end user to learn how to combine the SSL Certificate File with any available SSL Certificate Chain File for the proxy process to work properly. If you followed the Let's Encrypt configuration guide, you can skip to the next section: Spin up ISLE containers Copy your SSL certificates for the ISLE Proxy into config/proxy/ssl-certs . They will and should have different names than the examples provided below. There can only be 2 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem Edit the config/proxy/traefik.toml file: Change line 27 and 28: certFile = \"/certs/newsite-sample.cert\" ## Change to reflect your CERT, CRT, or PEM keyFile = \"/certs/newsite-sample-key.key\" ## Change to reflect your KEY, or PEM.","title":"Proxy Directory"},{"location":"install/install-server/#spin-up-isle-containers","text":"Run docker-compose up -d Wait for the stack to completely initialize, about 5 minutes (typically much less). Run docker exec -it isle-apache-<CONTAINER_SHORT_ID> bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh Using the value from the .env file here ( typically: isle-apache-prod, or -stage, -dev, etc. ) Give this process 15 - 25 minutes ( depending on the speed of the ISLE Host server internet connection ) Check the newly created and running new site by opening a browser and navigating to your site domain e.g. https://project-name.yourdomain.edu , you should now see an un-themed Drupal site. (Good points for somewhere else:) ISLE removes the need to manually edit the more complex config files that are part of the Islandora stack.","title":"Spin up ISLE Containers!"},{"location":"install/install-server/#additional-resources","text":"TBD: Demo ISLE Installation: Resources contains Docker container passwords and URLs for administrator tools. TBD: Demo ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc.","title":"Additional Resources"},{"location":"install/install-server/#end-of-remote-server-isle-installation","text":"","title":"End of Remote Server ISLE Installation."},{"location":"install/install-server/#migrate-to-isle-environment","text":"Please click Migrate to ISLE Environment if you are installing ISLE to migrate your existing production Islandora 7.x environment to an ISLE environment. This documentation will help you identify and copy your institution's preexisting Islandora data, files, and themes (including your data volume, Drupal site(s) and theme(s), and commonly customized xml and xslt files) to your ISLE environment.","title":"Migrate to ISLE Environment"},{"location":"migrate/export-checklist/","text":"Migration Export Checklist This section is a checklist of materials to COPY from the current running Islandora Production server(s) to the appropriate storage location / directory in order to build your ISLE instance. Please Note: Ubuntu / Debian style paths are used for all examples file locations below, end users might have different locations for these files HOWEVER the file and directory names etc should be roughly the same. Caution : While the ISLE Project recommends use of export methods or tools such as rsync, scp etc., it assumes that end users are familiar with them and are aware of possible dangers of improperly exporting or copying production data. Ensure adequate backups of any production system(s) are made prior to any attempts. If you are not familiar or are uncomfortable with these processes, it is highly advisable to work with an appropriate IT resource. Finally also please note: Instructions from this checklist and the Migrate to ISLE Environment may call for you to COPY data from your running Islandora environment to a newly created folder: yourdomain-data on your ISLE Host Server or current_prod_islandora_config on your local machine. You will then work from these copies for future steps. In some cases, you'll need to copy configurations down to your machine and merge contents as directed. ( if necessary ) In other cases, due to the size of the data e.g. Fedora data you will copy production data to the ISLE Host server ( ISLE Host server ) instead of your local machine. Contents of the production Islandora Apache html directory should be copied to a new directory called yourdomain-data/apache/html/ on your ISLE host server in the appropriate storage area. Contents of the production Islandora Fedora data directory should be copied to a new directory called yourdomain-data/fedora/data/ on your ISLE host server in the appropriate storage area. Once you've copied everything, you will add pointers to where all files and folders are stored in the docker-compose.yml file and you will be putting this custom config in a git repository to deploy to the ISLE host server. This should be all you need to do for everything to work with both your copied data and merged production settings. Recommend: Having adequate storage space available for the ISLE host server to accommodate a working copy of a production Islandora's associated configurations and data. Apache Copy the following below from the Islandora Production Server(s) to the suggested directories /current_prod_islandora_config/apache/ or /yourdomain-data/apache/ on either your local machine or ISLE Host server. /current_prod_islandora_config/apache/ should be a directory used for configuration files to be merged or edited on your machine /data/apache/ should be a directory used for apache website code and data copied directly from your production Islandora server to the target ISLE Host server due to size. This data and these configurations will be used in conjunction with an Apache container. Data Description Possible Location in current Islandora instance Suggested ISLE Path Destination Copy location html Islandora/Drupal Website /var/www/ yourdomain-data/apache/html/ ISLE Host server settings.php Drupal settings.php file /var/www/html/sites/default/ /current_prod_islandora_config/apache/ local machine php.ini PHP configuration file /etc/ /current_prod_islandora_config/apache/ local machine yoursite.conf Apache webserver vhost file /etc/apache2/sites-enabled/ /current_prod_islandora_config/apache/ local machine Apache Notes /var/www/ html Entire contents unless size prohibits should be copied to a directory on the remote ISLE host server. If html is not used, then substitute with the appropriate directory for the Islandora / Drupal site settings.php If running multi-sites separate or rename appropriately e.g. multisite2_name_settings.php, multisite3_name_settings.php and so on... WARNING: Be sure to move this file from yourdomain-data/apache/html/ only and not from your production Islandora site PRIOR to copying. yoursite.conf File will have different name but this should be the enabled Apache vhost file of your production Islandora website. There may also be a separate vhost that uses SSL and https. Copy that too if available. Fedora Copy the following below from the Islandora Production Server(s) to the suggested directories current_prod_islandora_config/fedora/ or /yourdomain-data/fedora on either your local machine or ISLE Host server. This data will be used in conjunction with a Fedora container. File / Directory Description Possible Location in current Islandora instance Suggested ISLE Path Destination Copy location datastreamStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/datastreamStore ISLE Host server fedora-xacml-policies Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/fedora-xacml-policies ISLE Host server objectStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/objectStore ISLE Host server fedora.fcfg Fedora repository config file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ local machine fedora-users.xml Fedora users config file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ local machine filter-drupal.xml Fedora Drupal filter file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ local machine Fedora Notes Do not copy the following directories from the production Islandora fedora /usr/local/fedora/data directory. * /usr/local/fedora/ data/activemq-data * /usr/local/fedora/ data/resourceIndex Gsearch Copy the following files from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/gsearch/ on your local machine. This data will be used in conjunction with a Fedora container. File / Directory Description Possible Location Suggested ISLE Path Destination Copy location fedoragsearch.properties Gsearch config file /var/lib/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ local machine fgsconfig-basic-configForIslandora.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ local machine fgsconfigObjects.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ local machine repository.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/repository/FgsRepos/ /current_prod_islandora_config/gsearch/ local machine islandora_transforms Transformation XSLTs directory /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/ /current_prod_islandora_config/gsearch/ local machine foxmlToSolr.xslt \"top-level\" transformational XSLT /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/ /current_prod_islandora_config/gsearch/ local machine MySQL Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/mysql/ on your local machine. This data will be used in conjunction with a MySQL container. Data Description Possible Location Suggested COPY Method Suggested ISLE Path Destination Copy location Databases Drupal website databases /var/lib/mysql CLI, MySQL Workbench or Sequel Pro etc. /current_prod_islandora_config/mysql/ local machine my.cnf MySQL server config file /etc/mysql/my.cnf rsync / scp /current_prod_islandora_config/mysql/ local machine MySQL Notes Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT resources for your institution's database naming conventions. CLI == Command line Recommended that the production databases be exported using the .sql and .gz file formats e.g. drupal_site_2018.sql.gz for better compression and minimal storage footprint. If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database as it will be recreated by the SQL index in later steps of the Migration Guide If possible, on the production Apache webserver, run drush cc all from the command line on the production server in the appropriate sites directory PRIOR to db export(s) Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows MySQL Tools for Export Here are a few pieces of documentation specific for the tasks above. Caution : While the ISLE Project recommends use of export methods or tools such as mysqldump etc., it assumes that end users are familiar with them and are aware of possible dangers of improperly exporting or copying production data. Ensure adequate backups of any production system(s) are made prior to any attempts. If you are not familiar or are uncomfortable with these processes, it is highly advisable to work with an appropriate IT resource. Official MySQL documentation mysqldump console utility documentation Digital Ocean quick start for mysqldump export Official MySQL GUI app - Workbench For Linux, MacOS and Windows Sequel Pro MacOS only Tomcat Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/tomcat located on the local machine. This data will be used in conjunction with the Tomcat service found on a Fedora or SOLR container. Data Description Possible Location Suggested ISLE Path Destination Copy location tomcat-users.xml Tomcat server config file /var/lib/tomcat7/conf/tomcat-users.xml /current_prod_islandora_config/tomcat/ local machine Solr Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/solr located on the local machine. This data will be used in conjunction with a SOLR container. Data Description Possible Location Suggested ISLE Path Destination Copy location schema.xml Solr schema file /var/lib/tomcat7/webapps/solr/collection1/conf/schema.xml /current_prod_islandora_config/solr local machine solrconfig.xml Solr config file /var/lib/tomcat7/webapps/solr/collection1/conf/solrconfig.xml /current_prod_islandora_config/solr local machine stopwords.txt Solr file for filtering out common words /var/lib/tomcat7/webapps/solr/collection1/conf/stopwords.txt /current_prod_islandora_config/solr local machine","title":"Migration Export Checklist"},{"location":"migrate/export-checklist/#migration-export-checklist","text":"This section is a checklist of materials to COPY from the current running Islandora Production server(s) to the appropriate storage location / directory in order to build your ISLE instance. Please Note: Ubuntu / Debian style paths are used for all examples file locations below, end users might have different locations for these files HOWEVER the file and directory names etc should be roughly the same. Caution : While the ISLE Project recommends use of export methods or tools such as rsync, scp etc., it assumes that end users are familiar with them and are aware of possible dangers of improperly exporting or copying production data. Ensure adequate backups of any production system(s) are made prior to any attempts. If you are not familiar or are uncomfortable with these processes, it is highly advisable to work with an appropriate IT resource. Finally also please note: Instructions from this checklist and the Migrate to ISLE Environment may call for you to COPY data from your running Islandora environment to a newly created folder: yourdomain-data on your ISLE Host Server or current_prod_islandora_config on your local machine. You will then work from these copies for future steps. In some cases, you'll need to copy configurations down to your machine and merge contents as directed. ( if necessary ) In other cases, due to the size of the data e.g. Fedora data you will copy production data to the ISLE Host server ( ISLE Host server ) instead of your local machine. Contents of the production Islandora Apache html directory should be copied to a new directory called yourdomain-data/apache/html/ on your ISLE host server in the appropriate storage area. Contents of the production Islandora Fedora data directory should be copied to a new directory called yourdomain-data/fedora/data/ on your ISLE host server in the appropriate storage area. Once you've copied everything, you will add pointers to where all files and folders are stored in the docker-compose.yml file and you will be putting this custom config in a git repository to deploy to the ISLE host server. This should be all you need to do for everything to work with both your copied data and merged production settings. Recommend: Having adequate storage space available for the ISLE host server to accommodate a working copy of a production Islandora's associated configurations and data.","title":"Migration Export Checklist"},{"location":"migrate/export-checklist/#apache","text":"Copy the following below from the Islandora Production Server(s) to the suggested directories /current_prod_islandora_config/apache/ or /yourdomain-data/apache/ on either your local machine or ISLE Host server. /current_prod_islandora_config/apache/ should be a directory used for configuration files to be merged or edited on your machine /data/apache/ should be a directory used for apache website code and data copied directly from your production Islandora server to the target ISLE Host server due to size. This data and these configurations will be used in conjunction with an Apache container. Data Description Possible Location in current Islandora instance Suggested ISLE Path Destination Copy location html Islandora/Drupal Website /var/www/ yourdomain-data/apache/html/ ISLE Host server settings.php Drupal settings.php file /var/www/html/sites/default/ /current_prod_islandora_config/apache/ local machine php.ini PHP configuration file /etc/ /current_prod_islandora_config/apache/ local machine yoursite.conf Apache webserver vhost file /etc/apache2/sites-enabled/ /current_prod_islandora_config/apache/ local machine","title":"Apache"},{"location":"migrate/export-checklist/#apache-notes","text":"/var/www/ html Entire contents unless size prohibits should be copied to a directory on the remote ISLE host server. If html is not used, then substitute with the appropriate directory for the Islandora / Drupal site settings.php If running multi-sites separate or rename appropriately e.g. multisite2_name_settings.php, multisite3_name_settings.php and so on... WARNING: Be sure to move this file from yourdomain-data/apache/html/ only and not from your production Islandora site PRIOR to copying. yoursite.conf File will have different name but this should be the enabled Apache vhost file of your production Islandora website. There may also be a separate vhost that uses SSL and https. Copy that too if available.","title":"Apache Notes"},{"location":"migrate/export-checklist/#fedora","text":"Copy the following below from the Islandora Production Server(s) to the suggested directories current_prod_islandora_config/fedora/ or /yourdomain-data/fedora on either your local machine or ISLE Host server. This data will be used in conjunction with a Fedora container. File / Directory Description Possible Location in current Islandora instance Suggested ISLE Path Destination Copy location datastreamStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/datastreamStore ISLE Host server fedora-xacml-policies Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/fedora-xacml-policies ISLE Host server objectStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/objectStore ISLE Host server fedora.fcfg Fedora repository config file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ local machine fedora-users.xml Fedora users config file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ local machine filter-drupal.xml Fedora Drupal filter file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ local machine","title":"Fedora"},{"location":"migrate/export-checklist/#fedora-notes","text":"Do not copy the following directories from the production Islandora fedora /usr/local/fedora/data directory. * /usr/local/fedora/ data/activemq-data * /usr/local/fedora/ data/resourceIndex","title":"Fedora Notes"},{"location":"migrate/export-checklist/#gsearch","text":"Copy the following files from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/gsearch/ on your local machine. This data will be used in conjunction with a Fedora container. File / Directory Description Possible Location Suggested ISLE Path Destination Copy location fedoragsearch.properties Gsearch config file /var/lib/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ local machine fgsconfig-basic-configForIslandora.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ local machine fgsconfigObjects.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ local machine repository.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/repository/FgsRepos/ /current_prod_islandora_config/gsearch/ local machine islandora_transforms Transformation XSLTs directory /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/ /current_prod_islandora_config/gsearch/ local machine foxmlToSolr.xslt \"top-level\" transformational XSLT /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/ /current_prod_islandora_config/gsearch/ local machine","title":"Gsearch"},{"location":"migrate/export-checklist/#mysql","text":"Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/mysql/ on your local machine. This data will be used in conjunction with a MySQL container. Data Description Possible Location Suggested COPY Method Suggested ISLE Path Destination Copy location Databases Drupal website databases /var/lib/mysql CLI, MySQL Workbench or Sequel Pro etc. /current_prod_islandora_config/mysql/ local machine my.cnf MySQL server config file /etc/mysql/my.cnf rsync / scp /current_prod_islandora_config/mysql/ local machine","title":"MySQL"},{"location":"migrate/export-checklist/#mysql-notes","text":"Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT resources for your institution's database naming conventions. CLI == Command line Recommended that the production databases be exported using the .sql and .gz file formats e.g. drupal_site_2018.sql.gz for better compression and minimal storage footprint. If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database as it will be recreated by the SQL index in later steps of the Migration Guide If possible, on the production Apache webserver, run drush cc all from the command line on the production server in the appropriate sites directory PRIOR to db export(s) Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows","title":"MySQL Notes"},{"location":"migrate/export-checklist/#mysql-tools-for-export","text":"Here are a few pieces of documentation specific for the tasks above. Caution : While the ISLE Project recommends use of export methods or tools such as mysqldump etc., it assumes that end users are familiar with them and are aware of possible dangers of improperly exporting or copying production data. Ensure adequate backups of any production system(s) are made prior to any attempts. If you are not familiar or are uncomfortable with these processes, it is highly advisable to work with an appropriate IT resource. Official MySQL documentation mysqldump console utility documentation Digital Ocean quick start for mysqldump export Official MySQL GUI app - Workbench For Linux, MacOS and Windows Sequel Pro MacOS only","title":"MySQL Tools for Export"},{"location":"migrate/export-checklist/#tomcat","text":"Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/tomcat located on the local machine. This data will be used in conjunction with the Tomcat service found on a Fedora or SOLR container. Data Description Possible Location Suggested ISLE Path Destination Copy location tomcat-users.xml Tomcat server config file /var/lib/tomcat7/conf/tomcat-users.xml /current_prod_islandora_config/tomcat/ local machine","title":"Tomcat"},{"location":"migrate/export-checklist/#solr","text":"Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/solr located on the local machine. This data will be used in conjunction with a SOLR container. Data Description Possible Location Suggested ISLE Path Destination Copy location schema.xml Solr schema file /var/lib/tomcat7/webapps/solr/collection1/conf/schema.xml /current_prod_islandora_config/solr local machine solrconfig.xml Solr config file /var/lib/tomcat7/webapps/solr/collection1/conf/solrconfig.xml /current_prod_islandora_config/solr local machine stopwords.txt Solr file for filtering out common words /var/lib/tomcat7/webapps/solr/collection1/conf/stopwords.txt /current_prod_islandora_config/solr local machine","title":"Solr"},{"location":"migrate/install-migration/","text":"Migrate to ISLE Environment Expectations: It may take at least 8 hours or more to read this documentation and complete this installation. Please proceed slowly. This will help you migrate your existing production Islandora 7.x environment to an ISLE environment for easily maintaining Islandora. This documentation will help you identify and copy your institution's preexisting Islandora data, files, and themes (including your data volume, Drupal site(s) and theme(s), and commonly customized xml and xslt files) to your ISLE environment. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites You have already completed the Hardware Requirements , Software Dependencies for your host server, and Remote Server ISLE Installation . SSL Certificates: Use the Let's Encrypt guide to generate SSL Certificates or ask your IT resource to provision SSL Certificates for the web domain. Never ever share or post your .env files publicly. The .env and tomcat.env files (\"Docker Environment files\") are your primary resources for customizing your ISLE stack. These .env files contain passwords and usernames and must be treated with the utmost care. You have disk space on - or mounted to - the host server large enough to store a full copy of your fedora data store. You have sufficient storage available for the ISLE host server to accommodate a working copy of a production Islandora's associated configurations and data. THIS SECTION IS IN DEVELOPMENT. PLEASE COME BACK SOON. Migrate Only: Finding Usernames and Passwords You have usernames and passwords for key parts of your current Islandora production environment which will be used for the migration. The next steps will walk you through finding this information. Login to your current Islandora production server. If your current production environment is located across multiple servers, you may need to check more than one server to find this information. To find your Drupal MySQL username, password, and database run the following command: grep --include=filter-drupal.xml -rnw -e 'dbname.*user.*password.*\"' / 2>/dev/null Example output: connection server=\"localhost\" port=\"3306\" dbname=\"**islandora**\" user=\"**drupalIslandora**\" password=\"**Kjs8n5zQXfPNhZ9k**\" Username: copy the value from user= Password: copy the value from password= Database: copy the value from dbname= To find your Fedora MySQL username, password, and database run the following command: grep --include=fedora.fcfg -rnw -e 'name=\"dbUsername\"' -e 'name=\"dbPassword\"' -e 'name=\"jdbcURL\"' / 2>/dev/null This command will print multiple lines. The first three lines are important but please save the rest (just in case). Example output: param name=\"dbUsername\" value=\"**fedoraDB**\" param name=\"jdbcURL\" value=\"jdbc:mysql://localhost/**fedora3**?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;autoReconnect=true\" param name=\"dbPassword\" value=\"**zMgBM6hGwjCeEuPD**\" Username: Copy the value from dbUsername value= Password: Copy the value from dbPassword value= Database: Copy from the value jdbcURL value= the database name which is directly between the \"/\" and the only \"?\" You know where your Fedora, Drupal (Islandora), and Solr data folders are located. Login to your current Islandora production server. If your current production environment is located across multiple servers, you may need to check more than one server to located these data folders. Finding your Fedora data folder (common locations include /usr/local/fedora/data or /usr/local/tomcat/fedora/data ): Run a find command: find / -type d -ipath '*fedora/data' -ls 2>/dev/null Finding your Drupal data folder (common location is under /var/www/ likely in a sub-folder; e.g., html, islandora, etc.) Run a grep command: grep --include=index.php -rl -e 'Drupal' / 2>/dev/null Finding your Solr data folder (common location: /usr/local/solr , /usr/local/tomcat/solr , or /usr/local/fedora/solr ) Run a find command: find / -type d -ipath '*solr/*/data' -ls 2>/dev/null Finding your FedoraGSearch data (i.e. transforms) folder Run a find command: find / -type d -ipath '*web-inf/classes/fgsconfigfinal' -ls 2>/dev/null You have a SQL dump (export) of the current production site's Drupal database. Ensure that the contents of any cache table are not exported. Login to your current Islandora production server and navigate to your Drupal data folder. Run the following command to generate a SQL dump of your Drupal database: mysqldump -u {DRUPAL_USERNAME} -p {DRUPAL_DATABASE_NAME} | gzip > drupal.sql.gz Finally also please note: Instructions from this guide and it's associated checklists call for you to COPY data from your current production Islandora environment to your ISLE Host Server or local computer. You work from these copies to build your ISLE environment. In some cases, you'll need to copy configurations down to your local computer ( Local ISLE config laptop ) and merge contents as directed. In other cases, due to the size of the data e.g. Fedora data you will copy directly to the ISLE Host server ( Remote ISLE Host server ). You will note where you have stored copies of files/data in a docker-compose.yml file. You will store your configured files in a git repository and use that to deploy to the ISLE host server. Create Data Storage Directory This area will be where all current Islandora production data is to be stored. This includes the Apache /var/www/html directory and the appropriate Fedora /usr/local/fedora/data subdirectories outlined below. ON your ISLE Host server: Create a directory named yourdomain-data (where \"yourdomain\" is your server domain name) Example: project-name.yourdomain.edu-data Ensure that the islandora user has ownership and permissions to access this data. chown -Rv islandora:islandora ~/project-name.yourdomain.edu-data Please note this path may change depending on how your ISLE host server storage area is setup. Migration Export Checklist In the /opt/ISLE/yourdoman-config directory create a new sub-directory (you can call this current_prod_islandora_config ) You will copy some files from your current Islandora Production server(s) into this directory following the Migration Export Checklist and you will copy some files and folders directly to your ISLE host server (in case the data involved is too large for your local workstation) as directed in the checklist. Noting most likely the Apache data ( /var/www/html ) & Fedora data ( /usr/local/fedora/data ) will be moved directly to your ISLE host server storage area and your new ISLE config files will be built on your local machine in the current_prod_islandora_config folder you just created. These copied files will be the source for edits and merges - just to be very clear, please don't work directly on these files in your currently running production Islandora system! To be even more clear, after following the checklist, you should now have two nearly identical /config subdirectories A. copied from the cloned ISLE repository and renamed with your domain e.g. yourdomain-config or project-name.yourdomain.edu-config B. copied from your currently running Islandora environment. e.g. current_prod_islandora_config Migration Merge Checklist The goal is to merge all site-specific data (domain names, variables, usernames, passwords, etc..) AND all site-specific customizations or settings from the files in directory B. into the matching files in directory A. Compare the data and settings of the files found within directory B. current_prod_islandora_config , and then merge, edit or copy as necessary with the templated settings found within the renamed directory A. yourdomain-config as guided in the Migration Merge Checklist . Customizations: ( optional ) Carefully compare the following most frequently customized files with the new, default versions found within your new ISLE config folder. Use a \"Diff\" tool (example: Beyond Compare to merge any desired customizations from your production Islandora files to persist within the new ISLE config folder of files: Compare and merge the Solr files: schema.xml Compare and merge the Solr files: solrconfig.xml Compare and merge the Solr files: stopwords Compare and merge the Fedora GSearch Islandora Transform (XSLTs) folder of files: islandora_transforms Final Steps Now that all the changes are made (be sure to save), ISLE should be ready to test. First you'll need to push these changes to your private code repository. Open a terminal - cd to the config directory you've been making the changes in... git status this will show you all the files that have been modified and ready to be added to your private repository along with handy paths for the next steps. git add /pathtoyourmodifiedfile (replace \"pathtoyourmodifiedfile\" with the path to your config directory) run these: git add apache git add fedora git add mysql git add proxy git add solr git add docker-compose.yml run git status again - everything should be in green now as all modified files have been added - if anything's still red use git add and the path to add it then run git commit -m \"initial config commit\" inside the double quotes is the commit message you can say whatever you want in this message - so for example if this is the config for your dev instance you could say that... run git push origin master this will push all your changes to the repository further changes should be made on branches for different servers or to master branch for this same server Clone Custom Configuration to Host Server Open a terminal - ssh into your host server using the islandora user cd to /opt/ISLE/config/ because your customizations are in a private repository, you'll need to add this islandora user's id_rsa.pub key to the repository via the website. This key is found in /home/islandora/.ssh/id_rsa.pub One can simply run cat /home/islandora/.ssh/id_rsa.pub and copy the output (ensure no whitespaces or extra returns) Go to the repository web site with a browser and locate your private repository. locate the ssh key entry location (in Bitbucket this is in Settings / Access Keys / add an ssh key w/ the label islandora host server paste in the key text and click Add Key Back at your terminal command line, run git clone URLpathtoyourremoteprivaterepo.git . (replacing \"URLpathtoyourremoteprivaterepo\" with the URL to the repository provided by the website) cd into the newly cloned directory - this is a good time to check that the ISLE directory contains your yourdomain-config directory and that it reflects all the edits and customizations. Spin Up ISLE Containers! Review or Pull Down ISLE Docker Images Please Note: You may have already done this in setting up the host server manually and / or with Ansible. However it is always a good idea to review and check using the first command below. Check if all ISLE images have been downloaded docker image ls If yes, then proceed to Step 7 If not, then pull the latest images: docker-compose pull Spin Up the Proxy Container ======= cd /opt/ISLE/yourdomain-config docker-compose up -d proxy Spin up the MySQL Container and Import Production Database(s) cd /opt/ISLE/yourdomain-config docker-compose up -d mysql Two methods for connecting to the MySQL Database (GUI / CLI) pick one. One may use SQL GUI clients e.g. Sequel Pro, Navicat, PHPMyAdmin etc. and import the production Drupal website database(s) If the above not practical, one may connect to the MySQL container and run the following. docker exec -it isle-mysql-institution bash to connect to the container swap out institution for the correct container name. appropriate mysql commands here: consult MySQL documentation - https://dev.mysql.com/doc/refman/5.7/en/ 2a. ( optional ) Only follow this if you have not first run drush cc all and then exported the MySQL databases or if you have not exported the MySQL databases excluding the contents of any table with cache in the name. The following are STEPS, not literal commands to prepare your db for ISLE ( doing this because we've found there are errors using exported db from production because of caches - causes problems - steps below help you remove this problem ) import the production databases into the isle-mysql-institution container ( with errors being ignored ) truncate all tables that start with cache on the isle-mysql-institution container export this new database to the mysql directory on the isle host server delete all tables ( not the database itself ) on the isle-mysql-institution container Re-import the new lighter database to the isle-mysql container Spin up the Fedora Container and Start the Reindex Processes Staying within /opt/ISLE/yourdomain-config docker-compose up -d fedora * optional check if fedora is running properly e.g. http://isle-prod-project.institution:8080/manager/html docker exec -it isle-fedora-institution bash Follow the steps outlined in the Migration Reindex Process Guide Follow the steps outlined in the Reindex Fedora RI (1 of 3) section Follow the steps outlined in the Reindex SQL database (2 of 3) section Pause here before attempting the steps within the Reindex Solr (3 of 3) section. Move onto the next section in this guide, Spin up apache container . Spin up Apache Container Staying within /opt/ISLE/yourdomain-config docker-compose up -d apache docker exec -it isle-apache-institution bash Run the vset script cd /var/www/html ./vsets.sh Edit .htaccess to enforce https echo \"SetEnvIf X-Forwarded-Proto https HTTPS=on\" | tee -a /var/www/html/.htaccess Check if the site is now is running properly by opening a web browser and navigating to your new ISLE domain e.g. https://isle-prod-project.institution Please note while you may be able to see objects being displayed, metadata and search results will be empty until you run the last step in the Reindex process. Troubleshooting Note Sites migrating from a version of Drupal prior to 7.50 may need to update their mysql tables to utf8mb4. On the new site, go to https://isle-prod-project.institution/admin/reports/status (you will need to be logged in as a Drupal Admin) and look for the following error: Instructions for converting the Drupal mysql database are available on the Drupal website Spin Up Solr Container and Complete the Reindex Processes ======= Staying within /opt/ISLE/yourdomain-config docker-compose up -d solr ( optional ) check if solr is running properly e.g. http://isle-prod-project.institution:8777/manager/html docker exec -it isle-fedora-institution bash NOTE FEDORA NOT SOLR! Follow the steps outlined in the Migration Reindex Process Guide Follow the steps outlined only in the Reindex Solr (3 of 3) section. ( Ensure that Tomcat and Fedora are running. ) Check the results on the site using Islandora simple search or the appropriate search method. Congratulations you should have successfully migrated your production Islandora site to ISLE!!","title":"Migrate to ISLE Environment"},{"location":"migrate/install-migration/#migrate-to-isle-environment","text":"Expectations: It may take at least 8 hours or more to read this documentation and complete this installation. Please proceed slowly. This will help you migrate your existing production Islandora 7.x environment to an ISLE environment for easily maintaining Islandora. This documentation will help you identify and copy your institution's preexisting Islandora data, files, and themes (including your data volume, Drupal site(s) and theme(s), and commonly customized xml and xslt files) to your ISLE environment. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Migrate to ISLE Environment"},{"location":"migrate/install-migration/#assumptions-prerequisites","text":"You have already completed the Hardware Requirements , Software Dependencies for your host server, and Remote Server ISLE Installation . SSL Certificates: Use the Let's Encrypt guide to generate SSL Certificates or ask your IT resource to provision SSL Certificates for the web domain. Never ever share or post your .env files publicly. The .env and tomcat.env files (\"Docker Environment files\") are your primary resources for customizing your ISLE stack. These .env files contain passwords and usernames and must be treated with the utmost care. You have disk space on - or mounted to - the host server large enough to store a full copy of your fedora data store. You have sufficient storage available for the ISLE host server to accommodate a working copy of a production Islandora's associated configurations and data.","title":"Assumptions / Prerequisites"},{"location":"migrate/install-migration/#this-section-is-in-development-please-come-back-soon","text":"","title":"THIS SECTION IS IN DEVELOPMENT. PLEASE COME BACK SOON."},{"location":"migrate/install-migration/#migrate-only-finding-usernames-and-passwords","text":"You have usernames and passwords for key parts of your current Islandora production environment which will be used for the migration. The next steps will walk you through finding this information. Login to your current Islandora production server. If your current production environment is located across multiple servers, you may need to check more than one server to find this information. To find your Drupal MySQL username, password, and database run the following command: grep --include=filter-drupal.xml -rnw -e 'dbname.*user.*password.*\"' / 2>/dev/null Example output: connection server=\"localhost\" port=\"3306\" dbname=\"**islandora**\" user=\"**drupalIslandora**\" password=\"**Kjs8n5zQXfPNhZ9k**\" Username: copy the value from user= Password: copy the value from password= Database: copy the value from dbname= To find your Fedora MySQL username, password, and database run the following command: grep --include=fedora.fcfg -rnw -e 'name=\"dbUsername\"' -e 'name=\"dbPassword\"' -e 'name=\"jdbcURL\"' / 2>/dev/null This command will print multiple lines. The first three lines are important but please save the rest (just in case). Example output: param name=\"dbUsername\" value=\"**fedoraDB**\" param name=\"jdbcURL\" value=\"jdbc:mysql://localhost/**fedora3**?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;autoReconnect=true\" param name=\"dbPassword\" value=\"**zMgBM6hGwjCeEuPD**\" Username: Copy the value from dbUsername value= Password: Copy the value from dbPassword value= Database: Copy from the value jdbcURL value= the database name which is directly between the \"/\" and the only \"?\" You know where your Fedora, Drupal (Islandora), and Solr data folders are located. Login to your current Islandora production server. If your current production environment is located across multiple servers, you may need to check more than one server to located these data folders. Finding your Fedora data folder (common locations include /usr/local/fedora/data or /usr/local/tomcat/fedora/data ): Run a find command: find / -type d -ipath '*fedora/data' -ls 2>/dev/null Finding your Drupal data folder (common location is under /var/www/ likely in a sub-folder; e.g., html, islandora, etc.) Run a grep command: grep --include=index.php -rl -e 'Drupal' / 2>/dev/null Finding your Solr data folder (common location: /usr/local/solr , /usr/local/tomcat/solr , or /usr/local/fedora/solr ) Run a find command: find / -type d -ipath '*solr/*/data' -ls 2>/dev/null Finding your FedoraGSearch data (i.e. transforms) folder Run a find command: find / -type d -ipath '*web-inf/classes/fgsconfigfinal' -ls 2>/dev/null You have a SQL dump (export) of the current production site's Drupal database. Ensure that the contents of any cache table are not exported. Login to your current Islandora production server and navigate to your Drupal data folder. Run the following command to generate a SQL dump of your Drupal database: mysqldump -u {DRUPAL_USERNAME} -p {DRUPAL_DATABASE_NAME} | gzip > drupal.sql.gz Finally also please note: Instructions from this guide and it's associated checklists call for you to COPY data from your current production Islandora environment to your ISLE Host Server or local computer. You work from these copies to build your ISLE environment. In some cases, you'll need to copy configurations down to your local computer ( Local ISLE config laptop ) and merge contents as directed. In other cases, due to the size of the data e.g. Fedora data you will copy directly to the ISLE Host server ( Remote ISLE Host server ). You will note where you have stored copies of files/data in a docker-compose.yml file. You will store your configured files in a git repository and use that to deploy to the ISLE host server.","title":"Migrate Only: Finding Usernames and Passwords"},{"location":"migrate/install-migration/#create-data-storage-directory","text":"This area will be where all current Islandora production data is to be stored. This includes the Apache /var/www/html directory and the appropriate Fedora /usr/local/fedora/data subdirectories outlined below. ON your ISLE Host server: Create a directory named yourdomain-data (where \"yourdomain\" is your server domain name) Example: project-name.yourdomain.edu-data Ensure that the islandora user has ownership and permissions to access this data. chown -Rv islandora:islandora ~/project-name.yourdomain.edu-data Please note this path may change depending on how your ISLE host server storage area is setup.","title":"Create Data Storage Directory"},{"location":"migrate/install-migration/#migration-export-checklist","text":"In the /opt/ISLE/yourdoman-config directory create a new sub-directory (you can call this current_prod_islandora_config ) You will copy some files from your current Islandora Production server(s) into this directory following the Migration Export Checklist and you will copy some files and folders directly to your ISLE host server (in case the data involved is too large for your local workstation) as directed in the checklist. Noting most likely the Apache data ( /var/www/html ) & Fedora data ( /usr/local/fedora/data ) will be moved directly to your ISLE host server storage area and your new ISLE config files will be built on your local machine in the current_prod_islandora_config folder you just created. These copied files will be the source for edits and merges - just to be very clear, please don't work directly on these files in your currently running production Islandora system! To be even more clear, after following the checklist, you should now have two nearly identical /config subdirectories A. copied from the cloned ISLE repository and renamed with your domain e.g. yourdomain-config or project-name.yourdomain.edu-config B. copied from your currently running Islandora environment. e.g. current_prod_islandora_config","title":"Migration Export Checklist"},{"location":"migrate/install-migration/#migration-merge-checklist","text":"The goal is to merge all site-specific data (domain names, variables, usernames, passwords, etc..) AND all site-specific customizations or settings from the files in directory B. into the matching files in directory A. Compare the data and settings of the files found within directory B. current_prod_islandora_config , and then merge, edit or copy as necessary with the templated settings found within the renamed directory A. yourdomain-config as guided in the Migration Merge Checklist . Customizations: ( optional ) Carefully compare the following most frequently customized files with the new, default versions found within your new ISLE config folder. Use a \"Diff\" tool (example: Beyond Compare to merge any desired customizations from your production Islandora files to persist within the new ISLE config folder of files: Compare and merge the Solr files: schema.xml Compare and merge the Solr files: solrconfig.xml Compare and merge the Solr files: stopwords Compare and merge the Fedora GSearch Islandora Transform (XSLTs) folder of files: islandora_transforms","title":"Migration Merge Checklist"},{"location":"migrate/install-migration/#final-steps","text":"Now that all the changes are made (be sure to save), ISLE should be ready to test. First you'll need to push these changes to your private code repository. Open a terminal - cd to the config directory you've been making the changes in... git status this will show you all the files that have been modified and ready to be added to your private repository along with handy paths for the next steps. git add /pathtoyourmodifiedfile (replace \"pathtoyourmodifiedfile\" with the path to your config directory) run these: git add apache git add fedora git add mysql git add proxy git add solr git add docker-compose.yml run git status again - everything should be in green now as all modified files have been added - if anything's still red use git add and the path to add it then run git commit -m \"initial config commit\" inside the double quotes is the commit message you can say whatever you want in this message - so for example if this is the config for your dev instance you could say that... run git push origin master this will push all your changes to the repository further changes should be made on branches for different servers or to master branch for this same server","title":"Final Steps"},{"location":"migrate/install-migration/#clone-custom-configuration-to-host-server","text":"Open a terminal - ssh into your host server using the islandora user cd to /opt/ISLE/config/ because your customizations are in a private repository, you'll need to add this islandora user's id_rsa.pub key to the repository via the website. This key is found in /home/islandora/.ssh/id_rsa.pub One can simply run cat /home/islandora/.ssh/id_rsa.pub and copy the output (ensure no whitespaces or extra returns) Go to the repository web site with a browser and locate your private repository. locate the ssh key entry location (in Bitbucket this is in Settings / Access Keys / add an ssh key w/ the label islandora host server paste in the key text and click Add Key Back at your terminal command line, run git clone URLpathtoyourremoteprivaterepo.git . (replacing \"URLpathtoyourremoteprivaterepo\" with the URL to the repository provided by the website) cd into the newly cloned directory - this is a good time to check that the ISLE directory contains your yourdomain-config directory and that it reflects all the edits and customizations.","title":"Clone Custom Configuration to Host Server"},{"location":"migrate/install-migration/#spin-up-isle-containers","text":"","title":"Spin Up ISLE Containers!"},{"location":"migrate/install-migration/#review-or-pull-down-isle-docker-images","text":"Please Note: You may have already done this in setting up the host server manually and / or with Ansible. However it is always a good idea to review and check using the first command below. Check if all ISLE images have been downloaded docker image ls If yes, then proceed to Step 7 If not, then pull the latest images: docker-compose pull","title":"Review or Pull Down ISLE Docker Images"},{"location":"migrate/install-migration/#spin-up-the-proxy-container","text":"======= cd /opt/ISLE/yourdomain-config docker-compose up -d proxy","title":"Spin Up the Proxy Container"},{"location":"migrate/install-migration/#spin-up-the-mysql-container-and-import-production-databases","text":"cd /opt/ISLE/yourdomain-config docker-compose up -d mysql Two methods for connecting to the MySQL Database (GUI / CLI) pick one. One may use SQL GUI clients e.g. Sequel Pro, Navicat, PHPMyAdmin etc. and import the production Drupal website database(s) If the above not practical, one may connect to the MySQL container and run the following. docker exec -it isle-mysql-institution bash to connect to the container swap out institution for the correct container name. appropriate mysql commands here: consult MySQL documentation - https://dev.mysql.com/doc/refman/5.7/en/ 2a. ( optional ) Only follow this if you have not first run drush cc all and then exported the MySQL databases or if you have not exported the MySQL databases excluding the contents of any table with cache in the name. The following are STEPS, not literal commands to prepare your db for ISLE ( doing this because we've found there are errors using exported db from production because of caches - causes problems - steps below help you remove this problem ) import the production databases into the isle-mysql-institution container ( with errors being ignored ) truncate all tables that start with cache on the isle-mysql-institution container export this new database to the mysql directory on the isle host server delete all tables ( not the database itself ) on the isle-mysql-institution container Re-import the new lighter database to the isle-mysql container","title":"Spin up the MySQL Container and Import Production Database(s)"},{"location":"migrate/install-migration/#spin-up-the-fedora-container-and-start-the-reindex-processes","text":"Staying within /opt/ISLE/yourdomain-config docker-compose up -d fedora * optional check if fedora is running properly e.g. http://isle-prod-project.institution:8080/manager/html docker exec -it isle-fedora-institution bash Follow the steps outlined in the Migration Reindex Process Guide Follow the steps outlined in the Reindex Fedora RI (1 of 3) section Follow the steps outlined in the Reindex SQL database (2 of 3) section Pause here before attempting the steps within the Reindex Solr (3 of 3) section. Move onto the next section in this guide, Spin up apache container .","title":"Spin up the Fedora Container and Start the Reindex Processes"},{"location":"migrate/install-migration/#spin-up-apache-container","text":"Staying within /opt/ISLE/yourdomain-config docker-compose up -d apache docker exec -it isle-apache-institution bash Run the vset script cd /var/www/html ./vsets.sh Edit .htaccess to enforce https echo \"SetEnvIf X-Forwarded-Proto https HTTPS=on\" | tee -a /var/www/html/.htaccess Check if the site is now is running properly by opening a web browser and navigating to your new ISLE domain e.g. https://isle-prod-project.institution Please note while you may be able to see objects being displayed, metadata and search results will be empty until you run the last step in the Reindex process. Troubleshooting Note Sites migrating from a version of Drupal prior to 7.50 may need to update their mysql tables to utf8mb4. On the new site, go to https://isle-prod-project.institution/admin/reports/status (you will need to be logged in as a Drupal Admin) and look for the following error: Instructions for converting the Drupal mysql database are available on the Drupal website","title":"Spin up Apache Container"},{"location":"migrate/install-migration/#spin-up-solr-container-and-complete-the-reindex-processes","text":"======= Staying within /opt/ISLE/yourdomain-config docker-compose up -d solr ( optional ) check if solr is running properly e.g. http://isle-prod-project.institution:8777/manager/html docker exec -it isle-fedora-institution bash NOTE FEDORA NOT SOLR! Follow the steps outlined in the Migration Reindex Process Guide Follow the steps outlined only in the Reindex Solr (3 of 3) section. ( Ensure that Tomcat and Fedora are running. ) Check the results on the site using Islandora simple search or the appropriate search method. Congratulations you should have successfully migrated your production Islandora site to ISLE!!","title":"Spin Up Solr Container and Complete the Reindex Processes"},{"location":"migrate/merge-checklist/","text":"Migration Merge Checklist This section is to serve as a new checklist for the editing or merging of the copied Islandora Production server(s) data and config files to the appropriate config directory on the enduser's local laptop and ultimately copied / deployed back to the new ISLE Host Server. The suggested workflow is for endusers to review the Production file(s) first, make note of any settings and then make appropriate edits within the yourdomain-config directory to change values, add passwords or usernames etc on your local laptop with the ultimate goal of checking all results into a git repository for deploy later on the ISLE Host server. The only change is that unless otherwise directed e.g. Apache html and Fedora data . all changes should be made on the local laptop in the yourdomain-config directory. Please note as per the migration guide instructions the name of this directory shouldn't literally be \"yourdomain-config\" or \"yourdomain-data\" so replace \"yourdomain\" with the name of your intended Islandora site's domain. While this checklist will attempt to point out most of the merge challenges or pitfalls, you may encounter unique situations depending on the edits and customizations made to your Islandora environment in the past. This is a good place to reach out to the Islandora community for assistance. Please note: In some cases, some of the configuration files copied from your running production Islandora may have comments (#) in them to help guide endusers to make the appropriate edits e.g. (# end user edit here) In most cases, many of the configuration files copied from ISLE repository to yourdomain-config will have fake or empty settings in them. Please remove, edit or enter new values as advised. Apache Compare, edit, merge or copy the following from the source directory current-production-config/apache/ to: yourdomain-config/apache/ on your local laptop. Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location html Islandora/Drupal Website current-production-config/apache/ yourdomain-data/apache/ Remote ISLE Host server settings.php Drupal settings.php file current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop site.conf Apache webserver vhost file current-production-config/apache/ reference file but do not copy Local ISLE config laptop Apache Edits html - endusers will have copied this entire directory instead to a new directory called yourdomain-data/apache/html/ on your remote ISLE host server in the appropriate storage area. settings.php - endusers will want to edit database and user names for Drupal sites to connect properly. Lines 251 -253: Change the appropriate settings for the Drupal website database, associate database user name and password. Do not change the host settings. Line 288: Recommend adding a Drupal hash value here of 25+ alpha-numeric characters Line 312: $base_url should be commented out as it isn't used due to the proxy. Apache - Sites-Enabled Please note that endusers will take values from the site.conf file and flow the information as needed into the to be renamed newsite-sample-ssl.conf & newsite-sample.conf files accordingly with the domain name of your choice. This file will not be copied to yourdomain-config/apache/ for any usage. Within the sites-enabled directory, rename the files newsite-sample-ssl.conf and newsite-sample.conf to your domain names - example: project-name.yourdomain.edu_ssl.conf project-name.yourdomain.edu.conf Edit the previously named newsite-sample.conf file and change lines 3 and 4 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/project-name.yourdomain.edu.ssl.error.log CustomLog /var/log/apache2/project-name.yourdomain.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 4 and 5 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/project-name.yourdomain.edu.ssl.error.log CustomLog /var/log/apache2/project-name.yourdomain.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 12, 13 and 14 to point to the location of your certs on the apache container - example: ``` SSLCertificateFile /certs/newsite-sample.pem SSLCertificateChainFile /certs/newsite-sample-interm.pem SSLCertificateKeyFile /certs/newsite-sample-key.pem ``` If there are any additional customizations required, you'll need to copy them into these two vhost files accordingly. Apache Optional Edits Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location php.ini PHP configuration file current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop php.ini - endusers can make appropriate edits within yourdomain-config/apache/php.ini to increase the upload settings, memory etc. as needed. Otherwise leaving the default values should work. Please note: an additional line will have to be added to the associated docker-compose.yml in the Apache volumes: section for this edit to work e.g. - ./apache/php.ini:/etc/php.ini Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location tmpreaper Cronjob for tmpreaper current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop tmpreaper - (optional) endusers may want to edit this tmpreaper cron job for different locations and/or times. The docker-compose.yml file will need an associated bind-mount for this change. Please note: an additional line will have to be added to the associated docker-compose.yml in the Apache volumes: section for this edit to work e.g. - ./apache/tmpreaper/cron:/etc/cron.d/tmpreaper-cron Apache - SSL-Certs If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. Copy your original production SSL certificates for Apache into the apache/ssl-certs subdirectory. They will and should have different names than the examples provided below dependent on the ISLE environment you are setting up e.g. ( production, staging, or development ). There can be up to 2 - 3 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem 1 x SSL Certificate Chain File e.g. newsite-sample-interm.pem This file may be optional in some setups but is generally recommended for use by the apache container when available. It will not be used by the proxy container. Please also note that the file extensions can also be: .cer , .crt or .pem Apache - SSL-Certs (multi) When creating multiple environments for ISLE, please change all of the file and key names accordingly to reflect the environment e.g. adding ( -prod, -stage, -dev to file names). Later on, this process will assist in organizing proper filing of files for the proxy container and stop any situation where a file gets overwritten or improperly referenced by the wrong environment. Example: * 1 x SSL Certificate Key File e.g. `newsite-dev-key.pem` * 1 x SSL Certificate File e.g. `newsite-dev.pem` * 1 x SSL Certificate Chain File e.g. `newsite-dev-interm.pem` Fedora Compare, edit, merge or copy the following from the suggested directory current-production-config/fedora/ to: yourdomain-config/fedora/ on your local laptop. Data Description Possible Location Merge, Copy or Edit Location / Destination Copy location datastreamStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/datastreamStore Remote ISLE Host server fedora-xacml-policies Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/fedora-xacml-policies Remote ISLE Host server objectStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/objectStore Remote ISLE Host server fedora.fcfg Fedora repository config file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop fedora-users.xml Fedora users config file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop filter-drupal.xml Fedora Drupal filter file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop repository-policies Fedora Drupal filter file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop Fedora Edits The outlined contents (above) of the production Islandora Fedora data directory should be copied to a new directory called yourdomain-data/fedora/data/ on your remote ISLE host server in the appropriate storage area. Do not copy the following directories from the production Islandora fedora /usr/local/fedora/data directory. /usr/local/fedora/ data/activemq-data /usr/local/fedora/ data/resourceIndex fedora.fcfg - endusers will want to edit the following: Line: 562 (optional) to change the fedora_admin username for the fedora3 database Line: 598 (necessary) to enter the fedora_admin user password for the fedora3 database fedora-users.xml - endusers will want to edit the following: Lines 3, 8, 14 and 19: Add the appropriate passwords or users as needed. filter-drupal.xml - endusers will want to edit Line 3: Add the appropriate Drupal site database name, Drupal site database user and Drupal site database user password in between all \"\" Please note: For endusers using Drupal multi-sites, please add additional sites as guided in the example below Example <?xml version=\"1.0\" encoding=\"UTF-8\"?> <FilterDrupal_Connection> <connection server=\"mysql\" port=\"3306\" dbname=\"drupalsite1\" user=\"drupalsite1_user\" password=\"drupalsite1_user_pw\"> <sql> SELECT DISTINCT u.uid AS userid, u.name AS Name, u.pass AS Pass,r.name AS Role FROM (users u LEFT JOIN users_roles ON u.uid=users_roles.uid) LEFT JOIN role r ON r.rid=users_roles.rid WHERE u.name=? AND u.pass=?; </sql> </connection> <connection server=\"mysql\" port=\"3306\" dbname=\"drupalsite2\" user=\"drupalsite2_user\" password=\"drupalsite2_user_pw\"> <sql> SELECT DISTINCT u.uid AS userid, u.name AS Name, u.pass AS Pass,r.name AS Role FROM (users u LEFT JOIN users_roles ON u.uid=users_roles.uid) LEFT JOIN role r ON r.rid=users_roles.rid WHERE u.name=? AND u.pass=?; </sql> </connection> </FilterDrupal_Connection> fedora/repository-policies - endusers can edit the files contained within for more granular or customized Fedora user permissions or repository access. MySQL The mysql subdirectory contains all specific configurations and overrides necessary for the ISLE mysql image and resulting container to function properly with your changes. This is the Mysql database server that will contain at least two databases, one for the Islandora / Drupal website and the other for the Fedora repository. If you are running Drupal multi-sites, you'll need to create the additional users and database creation scripts. ( Optional ) Edit the Mysql configuration file my.cnf as needed otherwise leave alone. Mysql - initscripts This subdirectory houses SQL scripts necessary for a one time creation of your associated new site and fedora3 database. You'll want to rename newsite_sample_db.sql to the database or domain name of your choice. Edit the contents of newsite_sample_db.sql to create the new drupal site database and user. Line 1: Change the database name from newsite_sample_db to the database name of your choice. Line 2: Change the database user name from newsite_sample_db_user to the database user name of your choice. Line 3: At almost the end of the line, change the value of newsite_sample_db.* to the to the database name of your choice ensuring the .* remain without a space. Line 3: At the end of the line, change the value of newsite_sample_db_user' to the to the database user name of your choice ensuring the values remain with in the '' quotes without spaces. Do not alter the remaining code ( @'%';' ) beyond that point. Edit the contents of fedora3 to change the fedora_admin user password only. Line 2: Change the fedora_admin user password from newsite_sample_fedora_admin_pw to the password of your choice. It is not recommended to change anything else. Solr Compare, edit, merge or copy the following from the source directory current-production-config/solr/ to: yourdomain-config/solr/ on your local laptop. Data Description Possible Location Merge, Copy or Edit Location / Destination Copy location schema.xml Solr index config file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop solrconfig.xml Solr config file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop stopwords.txt solr webserver vhost file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop Solr Edits schema.xml Usually the first file one configures when setting up a new Solr installation The schema declares what kinds of fields there are which field should be used as the unique/primary key which fields are required how to index and search each field solrconfig.xml The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, one can configure the following: request handlers, which process requests to Solr, e.g. requests to add documents to the index or requests to return results for a query processes that \"listen\" for particular query-related events; listeners can be used to trigger the execution of special code the Request Dispatcher for managing HTTP communications the Admin Web interface parameters related to replication and duplication stopwords.txt _Using the stopwords.txt file, one can avoid the common words of a language, which do not add a significant value to any search. For example, a, an, the, you, I, am, and so on. One can specify words to be removed from the Solr search in this file line-by-line. Additional Locations: /opt/solr /usr/local/solr /var/lib/tomcat7/webapps/solr /usr/share/tomcat/webapps/solr Proxy Directory If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. This directory and service will not exist on any current islandora production systems. Please follow the Remote Server ISLE Installation , ### Proxy Directory section, lines 317 - 395.","title":"Migration Merge Checklist"},{"location":"migrate/merge-checklist/#migration-merge-checklist","text":"This section is to serve as a new checklist for the editing or merging of the copied Islandora Production server(s) data and config files to the appropriate config directory on the enduser's local laptop and ultimately copied / deployed back to the new ISLE Host Server. The suggested workflow is for endusers to review the Production file(s) first, make note of any settings and then make appropriate edits within the yourdomain-config directory to change values, add passwords or usernames etc on your local laptop with the ultimate goal of checking all results into a git repository for deploy later on the ISLE Host server. The only change is that unless otherwise directed e.g. Apache html and Fedora data . all changes should be made on the local laptop in the yourdomain-config directory. Please note as per the migration guide instructions the name of this directory shouldn't literally be \"yourdomain-config\" or \"yourdomain-data\" so replace \"yourdomain\" with the name of your intended Islandora site's domain. While this checklist will attempt to point out most of the merge challenges or pitfalls, you may encounter unique situations depending on the edits and customizations made to your Islandora environment in the past. This is a good place to reach out to the Islandora community for assistance. Please note: In some cases, some of the configuration files copied from your running production Islandora may have comments (#) in them to help guide endusers to make the appropriate edits e.g. (# end user edit here) In most cases, many of the configuration files copied from ISLE repository to yourdomain-config will have fake or empty settings in them. Please remove, edit or enter new values as advised.","title":"Migration Merge Checklist"},{"location":"migrate/merge-checklist/#apache","text":"Compare, edit, merge or copy the following from the source directory current-production-config/apache/ to: yourdomain-config/apache/ on your local laptop. Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location html Islandora/Drupal Website current-production-config/apache/ yourdomain-data/apache/ Remote ISLE Host server settings.php Drupal settings.php file current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop site.conf Apache webserver vhost file current-production-config/apache/ reference file but do not copy Local ISLE config laptop","title":"Apache"},{"location":"migrate/merge-checklist/#apache-edits","text":"html - endusers will have copied this entire directory instead to a new directory called yourdomain-data/apache/html/ on your remote ISLE host server in the appropriate storage area. settings.php - endusers will want to edit database and user names for Drupal sites to connect properly. Lines 251 -253: Change the appropriate settings for the Drupal website database, associate database user name and password. Do not change the host settings. Line 288: Recommend adding a Drupal hash value here of 25+ alpha-numeric characters Line 312: $base_url should be commented out as it isn't used due to the proxy.","title":"Apache Edits"},{"location":"migrate/merge-checklist/#apache-sites-enabled","text":"Please note that endusers will take values from the site.conf file and flow the information as needed into the to be renamed newsite-sample-ssl.conf & newsite-sample.conf files accordingly with the domain name of your choice. This file will not be copied to yourdomain-config/apache/ for any usage. Within the sites-enabled directory, rename the files newsite-sample-ssl.conf and newsite-sample.conf to your domain names - example: project-name.yourdomain.edu_ssl.conf project-name.yourdomain.edu.conf Edit the previously named newsite-sample.conf file and change lines 3 and 4 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/project-name.yourdomain.edu.ssl.error.log CustomLog /var/log/apache2/project-name.yourdomain.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 4 and 5 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/project-name.yourdomain.edu.ssl.error.log CustomLog /var/log/apache2/project-name.yourdomain.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 12, 13 and 14 to point to the location of your certs on the apache container - example: ``` SSLCertificateFile /certs/newsite-sample.pem SSLCertificateChainFile /certs/newsite-sample-interm.pem SSLCertificateKeyFile /certs/newsite-sample-key.pem ``` If there are any additional customizations required, you'll need to copy them into these two vhost files accordingly.","title":"Apache - Sites-Enabled"},{"location":"migrate/merge-checklist/#apache-optional-edits","text":"Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location php.ini PHP configuration file current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop php.ini - endusers can make appropriate edits within yourdomain-config/apache/php.ini to increase the upload settings, memory etc. as needed. Otherwise leaving the default values should work. Please note: an additional line will have to be added to the associated docker-compose.yml in the Apache volumes: section for this edit to work e.g. - ./apache/php.ini:/etc/php.ini Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location tmpreaper Cronjob for tmpreaper current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop tmpreaper - (optional) endusers may want to edit this tmpreaper cron job for different locations and/or times. The docker-compose.yml file will need an associated bind-mount for this change. Please note: an additional line will have to be added to the associated docker-compose.yml in the Apache volumes: section for this edit to work e.g. - ./apache/tmpreaper/cron:/etc/cron.d/tmpreaper-cron","title":"Apache Optional Edits"},{"location":"migrate/merge-checklist/#apache-ssl-certs","text":"If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. Copy your original production SSL certificates for Apache into the apache/ssl-certs subdirectory. They will and should have different names than the examples provided below dependent on the ISLE environment you are setting up e.g. ( production, staging, or development ). There can be up to 2 - 3 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem 1 x SSL Certificate Chain File e.g. newsite-sample-interm.pem This file may be optional in some setups but is generally recommended for use by the apache container when available. It will not be used by the proxy container. Please also note that the file extensions can also be: .cer , .crt or .pem","title":"Apache - SSL-Certs"},{"location":"migrate/merge-checklist/#apache-ssl-certs-multi","text":"When creating multiple environments for ISLE, please change all of the file and key names accordingly to reflect the environment e.g. adding ( -prod, -stage, -dev to file names). Later on, this process will assist in organizing proper filing of files for the proxy container and stop any situation where a file gets overwritten or improperly referenced by the wrong environment. Example: * 1 x SSL Certificate Key File e.g. `newsite-dev-key.pem` * 1 x SSL Certificate File e.g. `newsite-dev.pem` * 1 x SSL Certificate Chain File e.g. `newsite-dev-interm.pem`","title":"Apache - SSL-Certs (multi)"},{"location":"migrate/merge-checklist/#fedora","text":"Compare, edit, merge or copy the following from the suggested directory current-production-config/fedora/ to: yourdomain-config/fedora/ on your local laptop. Data Description Possible Location Merge, Copy or Edit Location / Destination Copy location datastreamStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/datastreamStore Remote ISLE Host server fedora-xacml-policies Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/fedora-xacml-policies Remote ISLE Host server objectStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/objectStore Remote ISLE Host server fedora.fcfg Fedora repository config file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop fedora-users.xml Fedora users config file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop filter-drupal.xml Fedora Drupal filter file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop repository-policies Fedora Drupal filter file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop","title":"Fedora"},{"location":"migrate/merge-checklist/#fedora-edits","text":"The outlined contents (above) of the production Islandora Fedora data directory should be copied to a new directory called yourdomain-data/fedora/data/ on your remote ISLE host server in the appropriate storage area. Do not copy the following directories from the production Islandora fedora /usr/local/fedora/data directory. /usr/local/fedora/ data/activemq-data /usr/local/fedora/ data/resourceIndex fedora.fcfg - endusers will want to edit the following: Line: 562 (optional) to change the fedora_admin username for the fedora3 database Line: 598 (necessary) to enter the fedora_admin user password for the fedora3 database fedora-users.xml - endusers will want to edit the following: Lines 3, 8, 14 and 19: Add the appropriate passwords or users as needed. filter-drupal.xml - endusers will want to edit Line 3: Add the appropriate Drupal site database name, Drupal site database user and Drupal site database user password in between all \"\" Please note: For endusers using Drupal multi-sites, please add additional sites as guided in the example below Example <?xml version=\"1.0\" encoding=\"UTF-8\"?> <FilterDrupal_Connection> <connection server=\"mysql\" port=\"3306\" dbname=\"drupalsite1\" user=\"drupalsite1_user\" password=\"drupalsite1_user_pw\"> <sql> SELECT DISTINCT u.uid AS userid, u.name AS Name, u.pass AS Pass,r.name AS Role FROM (users u LEFT JOIN users_roles ON u.uid=users_roles.uid) LEFT JOIN role r ON r.rid=users_roles.rid WHERE u.name=? AND u.pass=?; </sql> </connection> <connection server=\"mysql\" port=\"3306\" dbname=\"drupalsite2\" user=\"drupalsite2_user\" password=\"drupalsite2_user_pw\"> <sql> SELECT DISTINCT u.uid AS userid, u.name AS Name, u.pass AS Pass,r.name AS Role FROM (users u LEFT JOIN users_roles ON u.uid=users_roles.uid) LEFT JOIN role r ON r.rid=users_roles.rid WHERE u.name=? AND u.pass=?; </sql> </connection> </FilterDrupal_Connection> fedora/repository-policies - endusers can edit the files contained within for more granular or customized Fedora user permissions or repository access.","title":"Fedora Edits"},{"location":"migrate/merge-checklist/#mysql","text":"The mysql subdirectory contains all specific configurations and overrides necessary for the ISLE mysql image and resulting container to function properly with your changes. This is the Mysql database server that will contain at least two databases, one for the Islandora / Drupal website and the other for the Fedora repository. If you are running Drupal multi-sites, you'll need to create the additional users and database creation scripts. ( Optional ) Edit the Mysql configuration file my.cnf as needed otherwise leave alone.","title":"MySQL"},{"location":"migrate/merge-checklist/#mysql-initscripts","text":"This subdirectory houses SQL scripts necessary for a one time creation of your associated new site and fedora3 database. You'll want to rename newsite_sample_db.sql to the database or domain name of your choice. Edit the contents of newsite_sample_db.sql to create the new drupal site database and user. Line 1: Change the database name from newsite_sample_db to the database name of your choice. Line 2: Change the database user name from newsite_sample_db_user to the database user name of your choice. Line 3: At almost the end of the line, change the value of newsite_sample_db.* to the to the database name of your choice ensuring the .* remain without a space. Line 3: At the end of the line, change the value of newsite_sample_db_user' to the to the database user name of your choice ensuring the values remain with in the '' quotes without spaces. Do not alter the remaining code ( @'%';' ) beyond that point. Edit the contents of fedora3 to change the fedora_admin user password only. Line 2: Change the fedora_admin user password from newsite_sample_fedora_admin_pw to the password of your choice. It is not recommended to change anything else.","title":"Mysql - initscripts"},{"location":"migrate/merge-checklist/#solr","text":"Compare, edit, merge or copy the following from the source directory current-production-config/solr/ to: yourdomain-config/solr/ on your local laptop. Data Description Possible Location Merge, Copy or Edit Location / Destination Copy location schema.xml Solr index config file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop solrconfig.xml Solr config file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop stopwords.txt solr webserver vhost file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop","title":"Solr"},{"location":"migrate/merge-checklist/#solr-edits","text":"schema.xml Usually the first file one configures when setting up a new Solr installation The schema declares what kinds of fields there are which field should be used as the unique/primary key which fields are required how to index and search each field solrconfig.xml The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, one can configure the following: request handlers, which process requests to Solr, e.g. requests to add documents to the index or requests to return results for a query processes that \"listen\" for particular query-related events; listeners can be used to trigger the execution of special code the Request Dispatcher for managing HTTP communications the Admin Web interface parameters related to replication and duplication stopwords.txt _Using the stopwords.txt file, one can avoid the common words of a language, which do not add a significant value to any search. For example, a, an, the, you, I, am, and so on. One can specify words to be removed from the Solr search in this file line-by-line. Additional Locations: /opt/solr /usr/local/solr /var/lib/tomcat7/webapps/solr /usr/share/tomcat/webapps/solr","title":"Solr Edits"},{"location":"migrate/merge-checklist/#proxy-directory","text":"If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. This directory and service will not exist on any current islandora production systems. Please follow the Remote Server ISLE Installation , ### Proxy Directory section, lines 317 - 395.","title":"Proxy Directory"},{"location":"migrate/reindex-process/","text":"Migration Reindex Process When migrating any non-ISLE Islandora site, it is crucial to rebuild (reindex) the following three indices from the FOXML and datastream files on disk. Fedora's indices: Resource Index - The Resource Index is the Fedora module that provides the infrastructure for indexing relationships among objects and their components. SQL database - fedora3 contains information vital for the Drupal site to connect to Fedora correctly. Solr index Solr Index - Solr an open source enterprise search platform works in conjunction with the Islandora Solr module to provide a way to configure the Islandora search functions, the search results display, and the display of metadata on object pages. The index serves as a list of those objects for fast searching across large collections. You can use the command-line interactive utility fedora-rebuild.sh on the fedora container to rebuild all indices when the Fedora (not Tomcat) server is offline. Depending on the size of your repository, this entire process may take minutes (thousands of objects) or hours (millions of objects) to complete. Assumptions / Prerequisites All containers are currently running tomcat_admin_password = The tomcat admin password from the Fedora container. ISLE_HOST_IP = The IP address of your ISLE Host server. Shutdown Fedora Method 1: Open a browser and navigate to http://ISLE_HOST_IP:8080/manager/html User: admin Password: tomcat_admin_password Scroll down to the fedora row and on the right in the Commands column, click the stop button. Wait 20 seconds. Move onto the Reindex Fedora RI (1 of 3) section. Shutdown Fedora Method 2: tomcat_admin_password = Change this to your tomcat admin password from the Fedora container. Shell into the running fedora container * docker exec -it compass-fedora-dev bash wget \"http://admin:tomcat_admin_password:8080/manager/text/stop?path=/fedora\" -O - -q Type: exit to exit the fedora container. Move onto the Reindex Fedora RI (1 of 3) section. Reindex Fedora RI (1 of 3) Shell into the fedora container: docker exec -it compass-fedora-dev bash cd /usr/local/fedora/server/bin This command will take from 10 - 30+ mins to complete depending on the size of your Fedora collection. If it fails immediately, check the log it creates for details: tail -f /usr/local/tomcat/logs/fedora_ri.log /bin/sh fedora-rebuild.sh -r org.fcrepo.server.resourceIndex.ResourceIndexRebuilder > /usr/local/tomcat/logs/fedora_ri.log 2>&1 Stay within the fedora container and continue to the next section Reindex SQL database (2 of 3). Reindex SQL Database (2 of 3) mysqlrootpassword = Change this to your MySQL root password from the MySQL container. Connect to the mysql container from the fedora container to truncate fedora3 tables. mysql -h mysql -u root -pmysqlrootpassword Please note: ^ there should be no space between the last command -p and your mysql root password. (mysqlrootpassword) The mysql prompt should now appear. You are now connected to the mysql container via the mysql client on the fedora container. Select the fedora3 database. use fedora3; The mysql prompt should now display something similar to this: MySQL [fedora3]> Display all of the tables of the fedora3 database. show tables; Example: +---------------------+ | Tables_in_fedora3 | +---------------------+ | dcDates | | doFields | | doRegistry | | fcrepoRebuildStatus | | modelDeploymentMap | | pidGen | +---------------------+ 6 rows in set (0.00 sec) Enter the following commands: truncate table dcDates; truncate table doFields; truncate table doRegistry; truncate table fcrepoRebuildStatus; truncate table modelDeploymentMap; truncate table pidGen; Return to the terminal with fedora container shelled in. exit The mysql prompt should disappear and the prompt for fedora should reappear. You've been returned to the fedora container. cd /usr/local/fedora/server/bin This command will take from 10 - 30+ mins to complete depending on the size of your Fedora collection. If it fails immediately, check the log it creates for details: tail -f /usr/local/tomcat/logs/sql_ri.log /bin/sh fedora-rebuild.sh -r org.fcrepo.server.utilities.rebuild.SQLRebuilder > /usr/local/tomcat/logs/sql_ri.log 2>&1 Stay within the fedora container and continue to the next section Reindex Solr (3 of 3). Reindex Solr (3 of 3) fgsAdmin_password = Change this to your Fedora Gsearch (fgsAdmin) password from the Fedora container. WARNING This reindex process takes the longest of all three, with up to 1 - 30 or more hours to complete depending on the size of your Fedora collection. As such, it is recommended starting a screen session prior to running the following command. Learn more about screen here Whether you use screen prior or not, shell into the fedora container: docker exec -it compass-fedora-dev bash cd /usr/local/tomcat/webapps/fedoragsearch/client /bin/sh runRESTClient.sh localhost:8080 updateIndex fromFoxmlFiles User: fgsAdmin Password: fgsAdmin_password Again this process will take up to 1 - 30 or more hours to complete depending on the size of your Fedora collection. You can tail either Fedora Gsearch or Solr logs, ( locations here ) to watch the indexing process ( if necessary ). Type exit when finished to exit the container.","title":"Migration Reindex Process"},{"location":"migrate/reindex-process/#migration-reindex-process","text":"When migrating any non-ISLE Islandora site, it is crucial to rebuild (reindex) the following three indices from the FOXML and datastream files on disk. Fedora's indices: Resource Index - The Resource Index is the Fedora module that provides the infrastructure for indexing relationships among objects and their components. SQL database - fedora3 contains information vital for the Drupal site to connect to Fedora correctly. Solr index Solr Index - Solr an open source enterprise search platform works in conjunction with the Islandora Solr module to provide a way to configure the Islandora search functions, the search results display, and the display of metadata on object pages. The index serves as a list of those objects for fast searching across large collections. You can use the command-line interactive utility fedora-rebuild.sh on the fedora container to rebuild all indices when the Fedora (not Tomcat) server is offline. Depending on the size of your repository, this entire process may take minutes (thousands of objects) or hours (millions of objects) to complete.","title":"Migration Reindex Process"},{"location":"migrate/reindex-process/#assumptions-prerequisites","text":"All containers are currently running tomcat_admin_password = The tomcat admin password from the Fedora container. ISLE_HOST_IP = The IP address of your ISLE Host server.","title":"Assumptions / Prerequisites"},{"location":"migrate/reindex-process/#shutdown-fedora-method-1","text":"Open a browser and navigate to http://ISLE_HOST_IP:8080/manager/html User: admin Password: tomcat_admin_password Scroll down to the fedora row and on the right in the Commands column, click the stop button. Wait 20 seconds. Move onto the Reindex Fedora RI (1 of 3) section.","title":"Shutdown Fedora Method 1:"},{"location":"migrate/reindex-process/#shutdown-fedora-method-2","text":"tomcat_admin_password = Change this to your tomcat admin password from the Fedora container. Shell into the running fedora container * docker exec -it compass-fedora-dev bash wget \"http://admin:tomcat_admin_password:8080/manager/text/stop?path=/fedora\" -O - -q Type: exit to exit the fedora container. Move onto the Reindex Fedora RI (1 of 3) section.","title":"Shutdown Fedora Method 2:"},{"location":"migrate/reindex-process/#reindex-fedora-ri-1-of-3","text":"Shell into the fedora container: docker exec -it compass-fedora-dev bash cd /usr/local/fedora/server/bin This command will take from 10 - 30+ mins to complete depending on the size of your Fedora collection. If it fails immediately, check the log it creates for details: tail -f /usr/local/tomcat/logs/fedora_ri.log /bin/sh fedora-rebuild.sh -r org.fcrepo.server.resourceIndex.ResourceIndexRebuilder > /usr/local/tomcat/logs/fedora_ri.log 2>&1 Stay within the fedora container and continue to the next section Reindex SQL database (2 of 3).","title":"Reindex Fedora RI (1 of 3)"},{"location":"migrate/reindex-process/#reindex-sql-database-2-of-3","text":"mysqlrootpassword = Change this to your MySQL root password from the MySQL container. Connect to the mysql container from the fedora container to truncate fedora3 tables. mysql -h mysql -u root -pmysqlrootpassword Please note: ^ there should be no space between the last command -p and your mysql root password. (mysqlrootpassword) The mysql prompt should now appear. You are now connected to the mysql container via the mysql client on the fedora container. Select the fedora3 database. use fedora3; The mysql prompt should now display something similar to this: MySQL [fedora3]> Display all of the tables of the fedora3 database. show tables; Example: +---------------------+ | Tables_in_fedora3 | +---------------------+ | dcDates | | doFields | | doRegistry | | fcrepoRebuildStatus | | modelDeploymentMap | | pidGen | +---------------------+ 6 rows in set (0.00 sec) Enter the following commands: truncate table dcDates; truncate table doFields; truncate table doRegistry; truncate table fcrepoRebuildStatus; truncate table modelDeploymentMap; truncate table pidGen; Return to the terminal with fedora container shelled in. exit The mysql prompt should disappear and the prompt for fedora should reappear. You've been returned to the fedora container. cd /usr/local/fedora/server/bin This command will take from 10 - 30+ mins to complete depending on the size of your Fedora collection. If it fails immediately, check the log it creates for details: tail -f /usr/local/tomcat/logs/sql_ri.log /bin/sh fedora-rebuild.sh -r org.fcrepo.server.utilities.rebuild.SQLRebuilder > /usr/local/tomcat/logs/sql_ri.log 2>&1 Stay within the fedora container and continue to the next section Reindex Solr (3 of 3).","title":"Reindex SQL Database (2 of 3)"},{"location":"migrate/reindex-process/#reindex-solr-3-of-3","text":"fgsAdmin_password = Change this to your Fedora Gsearch (fgsAdmin) password from the Fedora container. WARNING This reindex process takes the longest of all three, with up to 1 - 30 or more hours to complete depending on the size of your Fedora collection. As such, it is recommended starting a screen session prior to running the following command. Learn more about screen here Whether you use screen prior or not, shell into the fedora container: docker exec -it compass-fedora-dev bash cd /usr/local/tomcat/webapps/fedoragsearch/client /bin/sh runRESTClient.sh localhost:8080 updateIndex fromFoxmlFiles User: fgsAdmin Password: fgsAdmin_password Again this process will take up to 1 - 30 or more hours to complete depending on the size of your Fedora collection. You can tail either Fedora Gsearch or Solr logs, ( locations here ) to watch the indexing process ( if necessary ). Type exit when finished to exit the container.","title":"Reindex Solr (3 of 3)"},{"location":"release-notes/release-1-1/","text":"ISLE Release 1.1 (Codenamed Pembroke ) Base Images to serve them all: In Docker fashion two new base-images were created for the 1.1 ISLE stack. There are major benefits both for the committers and users of ISLE. Keeping our users safe has never been easier. For users and committers alike when a security update or patch arrives we (the ISLE committers) need only update the base image. By virtue of inheritance these updates are automatically inherited and built into each and every component of the ISLE stack. Quick downloads, faster launch: these shared base images decrease the time to pull and launch the ISLE stack. Since the images have the same layers (like a cake) they are downloaded only once and reused as building blocks for the rest of the ISLE stack. This also significantly decreases the overall size of all images because we are able to finely tune and trim our base images so they\u2019re stable, without being bloated by unneeded components. ISLE-Ubuntu-Base ISLE-Tomcat-Base Image-Services Image Services with an S . ImageServices is a 1.2 GB container that simultaneously runs both Adore-Djatoka and Cantaloupe IIIF . By default the ISLE-Installer prefers Cantaloupe IIIF over AD, but AD remains a component for backward compatibility to be deprecated in a future release. ISLE-Apache Automatically pull the newest build tools on launch, never be with an outdated stack. By default the Apache container will connect to GitHub and pull the ISLE-build. This is controlled by an environment variable and can be disabled. In future releases we intend to make it so that you can fork our build tools, or make your own, and set your own repository for the container to fetch on boot. Note that while currently running the build tools is only done once we\u2019re thinking ahead. In future planned iterations of ISLE-Apache the build tools will separate core Drupal code ( core ) from the Islandora modules ( contrib ). TL;DR: We hope to bring automated Drupal core updates, as well as offer an option to update Islandora modules -- though we acknowledge this might not be for everyone! ImageMagick 7.x (ISLE images involved: ImageServices and Apache) ImageMagick, the tool which converts and handles derivative generation (in most part) has been updated to the latest 7.x branch and is compiled with JP2 read and write support from OpenJPEG . This update also includes the PHP Imagick extension which is now built from source to support the new version of ImageMagick with JP2 support. ISLE-Proxy is now magiek We have replaced NGiNX with Traefik Traefik is a modern reverse proxy with several key benefits Institutions and users alike can use ACME for the automatic and free creation and maintenance of SSL certificates from Let's Encrypt (https://letsencrypt.org/) Added Portainer , a visual dashboard of your running stack(s) Provides quick access to logs, shells, and startup/shutdown functions for running containers. Logging Services are now logged out to Docker while also being stored on the containers. In case we\u2019ve missed anything all uncaught logs are still logged by S6 overlay. .env for your Environment Lorem Ipsum Muli-Environment (e.g., dev, stage, prod) in a greatly simplified manner Repo for multi-env incoming","title":"1.1"},{"location":"release-notes/release-1-1/#isle-release-11-codenamed-pembroke","text":"Base Images to serve them all: In Docker fashion two new base-images were created for the 1.1 ISLE stack. There are major benefits both for the committers and users of ISLE. Keeping our users safe has never been easier. For users and committers alike when a security update or patch arrives we (the ISLE committers) need only update the base image. By virtue of inheritance these updates are automatically inherited and built into each and every component of the ISLE stack. Quick downloads, faster launch: these shared base images decrease the time to pull and launch the ISLE stack. Since the images have the same layers (like a cake) they are downloaded only once and reused as building blocks for the rest of the ISLE stack. This also significantly decreases the overall size of all images because we are able to finely tune and trim our base images so they\u2019re stable, without being bloated by unneeded components. ISLE-Ubuntu-Base ISLE-Tomcat-Base Image-Services Image Services with an S . ImageServices is a 1.2 GB container that simultaneously runs both Adore-Djatoka and Cantaloupe IIIF . By default the ISLE-Installer prefers Cantaloupe IIIF over AD, but AD remains a component for backward compatibility to be deprecated in a future release. ISLE-Apache Automatically pull the newest build tools on launch, never be with an outdated stack. By default the Apache container will connect to GitHub and pull the ISLE-build. This is controlled by an environment variable and can be disabled. In future releases we intend to make it so that you can fork our build tools, or make your own, and set your own repository for the container to fetch on boot. Note that while currently running the build tools is only done once we\u2019re thinking ahead. In future planned iterations of ISLE-Apache the build tools will separate core Drupal code ( core ) from the Islandora modules ( contrib ). TL;DR: We hope to bring automated Drupal core updates, as well as offer an option to update Islandora modules -- though we acknowledge this might not be for everyone! ImageMagick 7.x (ISLE images involved: ImageServices and Apache) ImageMagick, the tool which converts and handles derivative generation (in most part) has been updated to the latest 7.x branch and is compiled with JP2 read and write support from OpenJPEG . This update also includes the PHP Imagick extension which is now built from source to support the new version of ImageMagick with JP2 support. ISLE-Proxy is now magiek We have replaced NGiNX with Traefik Traefik is a modern reverse proxy with several key benefits Institutions and users alike can use ACME for the automatic and free creation and maintenance of SSL certificates from Let's Encrypt (https://letsencrypt.org/) Added Portainer , a visual dashboard of your running stack(s) Provides quick access to logs, shells, and startup/shutdown functions for running containers. Logging Services are now logged out to Docker while also being stored on the containers. In case we\u2019ve missed anything all uncaught logs are still logged by S6 overlay. .env for your Environment Lorem Ipsum Muli-Environment (e.g., dev, stage, prod) in a greatly simplified manner Repo for multi-env incoming","title":"ISLE Release 1.1 (Codenamed Pembroke)"},{"location":"release-notes/release/","text":"Release Notes - ISLE v.1.1.1, 2019-05-01 Updates and testing performed by ISLE Committer Gavin Morris, Born-Digital ISLE (main project) docker-compose.yml Release header changed to 1.1.1 with date of release All isle-image tags changed to 1.1.1 Upgraded traefik to 1.7.9 Images isle-ubuntu-basebox Updated ubuntu:bionic build image Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded S6_OVERLAY to 1.21.7.0 Upgraded Java (Server JRE) to jre-8u202 /1.8.0_202 isle-tomcat Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.40 isle-fedora Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Updated Islandora XACML policies to Jan 2019 commit Upgraded Islandora Drupal Filter to 7.1.12 Upgraded Apache Maven to 3.6.0 Updated Discovery Garden's basic-solr 4.10.x config to newest March 19, 2019 commit Updated Discovery Garden's Islandora Transforms to March 19, 2019 commit isle-imageservices Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Updated openjpeg to Dec 21,2018 commit Upgraded Imagemagick to 7.0.8-42 isle-solr Server package management updates via apt-get isle-apache Upgraded Imagemagick to version ImageMagick-7.0.8-42.x86_64 Upgraded Composer to version 1.8.5 Upgraded Drush to 8.2.3 with 8.1.18 as fallback Upgraded FITS to 1.4 (Nov 2018) isle-mysql Updated mysql:5.7 build image ISLE Release 1.1 (Codenamed Pembroke ) Base Images to serve them all: In Docker fashion two new base-images were created for the 1.1 ISLE stack. There are major benefits both for the contributors and users of ISLE. Keeping our users safe has never been easier. For users and contributors alike when a security update or patch arrives we (the ISLE Contributors) need only update the base image. By virtue of inheritance these updates are automatically inherited and built into each and every component of the ISLE stack. Quick downloads, faster launch: these shared base images decrease the time to pull and launch the ISLE stack. Since the images have the same layers (like a cake) they are downloaded only once and reused as building blocks for the rest of the ISLE stack. This also significantly decreases the overall size of all images because we are able to finely tune and trim our base images so they\u2019re stable, without being bloated by unneeded components. ISLE-Ubuntu-Base ISLE-Tomcat-Base Image-Services Image Services with an S . ImageServices is a 1.2 GB container that simultaneously runs both Adore-Djatoka and Cantaloupe IIIF . By default the ISLE-Installer prefers Cantaloupe IIIF over AD, but AD remains a component for backward compatibility to be deprecated in a future release. ISLE-Apache Automatically pull the newest build tools on launch, never be with an outdated stack. By default the Apache container will connect to GitHub and pull the ISLE-build. This is controlled by an environment variable and can be disabled. In future releases we intend to make it so that you can fork our build tools, or make your own, and set your own repository for the container to fetch on boot. Note that while currently running the build tools is only done once we\u2019re thinking ahead. In future planned iterations of ISLE-Apache the build tools will separate core Drupal code ( core ) from the Islandora modules ( contrib ). TL;DR: We hope to bring automated Drupal core updates, as well as offer an option to update Islandora modules -- though we acknowledge this might not be for everyone! ImageMagick 7.x (ISLE images involved: ImageServices and Apache) ImageMagick, the tool which converts and handles derivative generation (in most part) has been updated to the latest 7.x branch and is compiled with JP2 read and write support from OpenJPEG . This update also includes the PHP Imagick extension which is now built from source to support the new version of ImageMagick with JP2 support. ISLE-Proxy is now magiek We have replaced NGiNX with Traefik Traefik is a modern reverse proxy with several key benefits Institutions and users alike can use ACME for the automatic and free creation and maintenance of SSL certificates from Let's Encrypt (https://letsencrypt.org/) Added Portainer , a visual dashboard of your running stack(s) Provides quick access to logs, shells, and startup/shutdown functions for running containers. Logging Services are now logged out to Docker while also being stored on the containers. In case we\u2019ve missed anything all uncaught logs are still logged by S6 overlay. .env for your Environment Lorem Ipsum Muli-Environment (e.g., dev, stage, prod) in a greatly simplified manner Repo for multi-env incoming","title":"Latest release: 1.1.1"},{"location":"release-notes/release/#release-notes-isle-v111-2019-05-01","text":"","title":"Release Notes - ISLE v.1.1.1, 2019-05-01"},{"location":"release-notes/release/#updates-and-testing-performed-by-isle-committer-gavin-morris-born-digital","text":"","title":"Updates and testing performed by ISLE Committer Gavin Morris, Born-Digital"},{"location":"release-notes/release/#isle-main-project","text":"docker-compose.yml Release header changed to 1.1.1 with date of release All isle-image tags changed to 1.1.1 Upgraded traefik to 1.7.9","title":"ISLE (main project)"},{"location":"release-notes/release/#images","text":"","title":"Images"},{"location":"release-notes/release/#isle-ubuntu-basebox","text":"Updated ubuntu:bionic build image Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded S6_OVERLAY to 1.21.7.0 Upgraded Java (Server JRE) to jre-8u202 /1.8.0_202","title":"isle-ubuntu-basebox"},{"location":"release-notes/release/#isle-tomcat","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.40","title":"isle-tomcat"},{"location":"release-notes/release/#isle-fedora","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Updated Islandora XACML policies to Jan 2019 commit Upgraded Islandora Drupal Filter to 7.1.12 Upgraded Apache Maven to 3.6.0 Updated Discovery Garden's basic-solr 4.10.x config to newest March 19, 2019 commit Updated Discovery Garden's Islandora Transforms to March 19, 2019 commit","title":"isle-fedora"},{"location":"release-notes/release/#isle-imageservices","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Updated openjpeg to Dec 21,2018 commit Upgraded Imagemagick to 7.0.8-42","title":"isle-imageservices"},{"location":"release-notes/release/#isle-solr","text":"Server package management updates via apt-get","title":"isle-solr"},{"location":"release-notes/release/#isle-apache","text":"Upgraded Imagemagick to version ImageMagick-7.0.8-42.x86_64 Upgraded Composer to version 1.8.5 Upgraded Drush to 8.2.3 with 8.1.18 as fallback Upgraded FITS to 1.4 (Nov 2018)","title":"isle-apache"},{"location":"release-notes/release/#isle-mysql","text":"Updated mysql:5.7 build image","title":"isle-mysql"},{"location":"release-notes/release/#isle-release-11-codenamed-pembroke","text":"Base Images to serve them all: In Docker fashion two new base-images were created for the 1.1 ISLE stack. There are major benefits both for the contributors and users of ISLE. Keeping our users safe has never been easier. For users and contributors alike when a security update or patch arrives we (the ISLE Contributors) need only update the base image. By virtue of inheritance these updates are automatically inherited and built into each and every component of the ISLE stack. Quick downloads, faster launch: these shared base images decrease the time to pull and launch the ISLE stack. Since the images have the same layers (like a cake) they are downloaded only once and reused as building blocks for the rest of the ISLE stack. This also significantly decreases the overall size of all images because we are able to finely tune and trim our base images so they\u2019re stable, without being bloated by unneeded components. ISLE-Ubuntu-Base ISLE-Tomcat-Base Image-Services Image Services with an S . ImageServices is a 1.2 GB container that simultaneously runs both Adore-Djatoka and Cantaloupe IIIF . By default the ISLE-Installer prefers Cantaloupe IIIF over AD, but AD remains a component for backward compatibility to be deprecated in a future release. ISLE-Apache Automatically pull the newest build tools on launch, never be with an outdated stack. By default the Apache container will connect to GitHub and pull the ISLE-build. This is controlled by an environment variable and can be disabled. In future releases we intend to make it so that you can fork our build tools, or make your own, and set your own repository for the container to fetch on boot. Note that while currently running the build tools is only done once we\u2019re thinking ahead. In future planned iterations of ISLE-Apache the build tools will separate core Drupal code ( core ) from the Islandora modules ( contrib ). TL;DR: We hope to bring automated Drupal core updates, as well as offer an option to update Islandora modules -- though we acknowledge this might not be for everyone! ImageMagick 7.x (ISLE images involved: ImageServices and Apache) ImageMagick, the tool which converts and handles derivative generation (in most part) has been updated to the latest 7.x branch and is compiled with JP2 read and write support from OpenJPEG . This update also includes the PHP Imagick extension which is now built from source to support the new version of ImageMagick with JP2 support. ISLE-Proxy is now magiek We have replaced NGiNX with Traefik Traefik is a modern reverse proxy with several key benefits Institutions and users alike can use ACME for the automatic and free creation and maintenance of SSL certificates from Let's Encrypt (https://letsencrypt.org/) Added Portainer , a visual dashboard of your running stack(s) Provides quick access to logs, shells, and startup/shutdown functions for running containers. Logging Services are now logged out to Docker while also being stored on the containers. In case we\u2019ve missed anything all uncaught logs are still logged by S6 overlay. .env for your Environment Lorem Ipsum Muli-Environment (e.g., dev, stage, prod) in a greatly simplified manner Repo for multi-env incoming","title":"ISLE Release 1.1 (Codenamed Pembroke)"},{"location":"specifications/diagram-network/","text":"","title":"Diagram network"},{"location":"specifications/docker-containers-images/","text":"ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-apache isle-apache Docker Tag latest, 2.4 uses the official Docker base image Apache 2.4 /var/log/apache2/ ubuntu:14.04 Djatoka 1.1 Drupal 7.5x+ Islandora 7.x-1.1x OpenJDK JDK 8.x Oracle Java JDK 8.x PHP 5.6 ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-fedora isle-fedora Docker Tag latest, 3.8.1 uses the official Docker base image Djatoka 1.1 /usr/local/tomcat/logs/djatoka.log tomcat:8.0-jre8 Drupal filter 3.8.1 Fedora 3.8.1 /usr/local/fedora/server/logs/fedora.log Gsearch DG Patched (2.8.x) /usr/local/fedora/server/logs/fedoragsearch.daily.log GSearch Extensions 0.1.3 Islandora Transforms (XSLTs) latest XSLTs from DG repo MySQL (client) 5.6 OpenJDK JDK 8.x Oracle Java JDK 8.x Tomcat 8.x /usr/local/tomcat/logs/ ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-mysql isle-mysql Docker Tag latest, 5.6 uses the official Docker base image MySQL (server) 5.6 /var/log/mysql/ mysql:5.6 ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-solr isle-solr Docker Tag latest, 4.10.4 uses the official Docker base image OpenJDK JDK 8.x tomcat:8.0-jre8 Solr 4.10.4 /usr/local/tomcat/logs/solr.log Tomcat 8.x /usr/local/tomcat/logs/ ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-proxy isle-proxy Docker Tag latest, 1.13 uses the official Docker base image Nginx 1.13 nginx:latest","title":"Docker containers images"},{"location":"specifications/dockerfiles/","text":"The ISLE Images are created by the use of Dockerfiles, text documents that contain all the commands an ISLE contributor could call on the command line to assemble an image. Using docker build users e.g. ISLE Contributors or Developers can create an automated build that executes several command-line instructions in succession. Assumptions / Prerequisites ISLE Contributors, Developers have pre-existing knowledge or familiarity with Dockerfile Dockerfiles , their editing process and compositions are familiar or known concepts. Dockerfile Locations These files can be found within the cloned ISLE project directory. Each subdirectory is grouped by the image / container software type and each contains a respective Dockerfile. apache fedora mysql proxy solr \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ansible \u251c\u2500\u2500 apache \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 isle-newsite-sample \u251c\u2500\u2500 docker-compose-build.yml \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 fedora \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 mysql \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 proxy \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 solr \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u2514\u2500\u2500 vagrant Dockerfile Conventions Making changes within these files will alter the contents and functionality of the ISLE images. Ensure that each Dockerfile does not have a file suffix or extension. Each command needs to be terminated with a \\ unless it is the final command. Each new command or action added will increase the size of the image once built. Attempt to balance size with functionality. All ISLE images use official Docker build images. Review the Docker Containers & Images Specifications Page for a listing of those builds. Dockerfile Composition Following standard Docker convention , all ISLE Dockerfiles have similar structures. Examples displayed are from the Apache Dockerfile FROM command indicating which official Docker image is used as the base build. The Apache image uses two base images to first compile ffmpeg and ghostscript and then copying the resulting binaries and libraries to a new clean base image so that the development tools are not installed on the final image. Reduces size. FROM ubuntu:14.04 AS ffmpeg_base is the first base image used. FROM ubuntu:14.04 is the second base image used. LABEL - For ISLE Committers to version control image descriptions, functionality and additional meta-data. ( optional ) RUN - Execute commands e.g. RUN apt-get update etc. COPY - Within each ISLE image directory there are additional files or subdirectories are copied from the local laptop to the image itself. e.g. COPY envinit.sh /opt/adore-djatoka-1.1/bin/envinit.sh ENV - sets any environmental variables necessary for software to run or be configured properly. ENV JAVA_HOME=/usr/lib/jvm/java-8-oracle \\ JRE_HOME=/usr/lib/jvm/java-8-oracle/jre \\ PATH=$PATH:$HOME/.composer/vendor/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/jre/bin \\ KAKADU_LIBRARY_PATH=/opt/adore-djatoka-1.1/lib/Linux-x86-64 \\ KAKADU_HOME=/opt/adore-djatoka-1.1/lib/Linux-x86-64 VOLUME - Exposes a volume for data necessary for the build to continue. e.g. VOLUME /var/www/html EXPOSE - Opens up ports (80,443) on the temporary build containers created and to persist in further usage. Can be overridden by any docker-compose.yml file ENTRYPOINT - Allows you to configure a container that will run as an executable. Within the apache Dockerfile , the server is told to \"run\" using the apache2ctl utility by this last line: ENTRYPOINT [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"] Dockerfile Commenting For ISLE Contributors when possible it is highly recommended that all sections be commented appropriately to explain functionality or actions to all Developers looking to customize or curious end users. Example: ### # Update apt RUN apt-get update ### # Add software to provide add-apt-repository RUN apt-get install -y software-properties-common \\ python-software-properties","title":"Dockerfiles"},{"location":"specifications/dockerfiles/#assumptions-prerequisites","text":"ISLE Contributors, Developers have pre-existing knowledge or familiarity with Dockerfile Dockerfiles , their editing process and compositions are familiar or known concepts.","title":"Assumptions / Prerequisites"},{"location":"specifications/dockerfiles/#dockerfile-locations","text":"These files can be found within the cloned ISLE project directory. Each subdirectory is grouped by the image / container software type and each contains a respective Dockerfile. apache fedora mysql proxy solr \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ansible \u251c\u2500\u2500 apache \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 isle-newsite-sample \u251c\u2500\u2500 docker-compose-build.yml \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 fedora \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 mysql \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 proxy \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 solr \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u2514\u2500\u2500 vagrant","title":"Dockerfile Locations"},{"location":"specifications/dockerfiles/#dockerfile-conventions","text":"Making changes within these files will alter the contents and functionality of the ISLE images. Ensure that each Dockerfile does not have a file suffix or extension. Each command needs to be terminated with a \\ unless it is the final command. Each new command or action added will increase the size of the image once built. Attempt to balance size with functionality. All ISLE images use official Docker build images. Review the Docker Containers & Images Specifications Page for a listing of those builds.","title":"Dockerfile Conventions"},{"location":"specifications/dockerfiles/#dockerfile-composition","text":"Following standard Docker convention , all ISLE Dockerfiles have similar structures. Examples displayed are from the Apache Dockerfile FROM command indicating which official Docker image is used as the base build. The Apache image uses two base images to first compile ffmpeg and ghostscript and then copying the resulting binaries and libraries to a new clean base image so that the development tools are not installed on the final image. Reduces size. FROM ubuntu:14.04 AS ffmpeg_base is the first base image used. FROM ubuntu:14.04 is the second base image used. LABEL - For ISLE Committers to version control image descriptions, functionality and additional meta-data. ( optional ) RUN - Execute commands e.g. RUN apt-get update etc. COPY - Within each ISLE image directory there are additional files or subdirectories are copied from the local laptop to the image itself. e.g. COPY envinit.sh /opt/adore-djatoka-1.1/bin/envinit.sh ENV - sets any environmental variables necessary for software to run or be configured properly. ENV JAVA_HOME=/usr/lib/jvm/java-8-oracle \\ JRE_HOME=/usr/lib/jvm/java-8-oracle/jre \\ PATH=$PATH:$HOME/.composer/vendor/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/jre/bin \\ KAKADU_LIBRARY_PATH=/opt/adore-djatoka-1.1/lib/Linux-x86-64 \\ KAKADU_HOME=/opt/adore-djatoka-1.1/lib/Linux-x86-64 VOLUME - Exposes a volume for data necessary for the build to continue. e.g. VOLUME /var/www/html EXPOSE - Opens up ports (80,443) on the temporary build containers created and to persist in further usage. Can be overridden by any docker-compose.yml file ENTRYPOINT - Allows you to configure a container that will run as an executable. Within the apache Dockerfile , the server is told to \"run\" using the apache2ctl utility by this last line: ENTRYPOINT [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]","title":"Dockerfile Composition"},{"location":"specifications/dockerfiles/#dockerfile-commenting","text":"For ISLE Contributors when possible it is highly recommended that all sections be commented appropriately to explain functionality or actions to all Developers looking to customize or curious end users. Example: ### # Update apt RUN apt-get update ### # Add software to provide add-apt-repository RUN apt-get install -y software-properties-common \\ python-software-properties","title":"Dockerfile Commenting"},{"location":"specifications/supported-drupal-modules-matrix/","text":"Please find below a list of all involved Drupal and Islandora Modules on the test site isle.locadomain . Package Name Type Status Version Administration Actions permissions (VBO) (actions_permissions) Module Not installed 7.x-3.4 Administration Administration Development tools (admin_devel) Module Not installed 7.x-3.0-rc5 Administration Administration menu (admin_menu) Module Not installed 7.x-3.0-rc5 Administration Administration menu Toolbar style (admin_menu_toolbar) Module Not installed 7.x-3.0-rc5 Chaos tool suite Bulk Export (bulk_export) Module Not installed 7.x-1.14 Chaos tool suite Chaos tools (ctools) Module Enabled 7.x-1.14 Chaos tool suite Chaos Tools (CTools) AJAX Example (ctools_ajax_sample) Module Not installed 7.x-1.14 Chaos tool suite Chaos Tools (CTools) Plugin Example (ctools_plugin_example) Module Not installed 7.x-1.14 Chaos tool suite Custom content panes (ctools_custom_content) Module Not installed 7.x-1.14 Chaos tool suite Custom rulesets (ctools_access_ruleset) Module Not installed 7.x-1.14 Chaos tool suite Page manager (page_manager) Module Not installed 7.x-1.14 Chaos tool suite Stylizer (stylizer) Module Not installed 7.x-1.14 Chaos tool suite Term Depth access (term_depth) Module Not installed 7.x-1.14 Chaos tool suite Views content panes (views_content) Module Not installed 7.x-1.14 Core Aggregator (aggregator) Module Not installed 7.57 Core Block (block) Module Enabled 7.57 Core Blog (blog) Module Not installed 7.57 Core Book (book) Module Not installed 7.57 Core Color (color) Module Enabled 7.57 Core Comment (comment) Module Enabled 7.57 Core Contact (contact) Module Not installed 7.57 Core Content translation (translation) Module Not installed 7.57 Core Contextual links (contextual) Module Enabled 7.57 Core Dashboard (dashboard) Module Enabled 7.57 Core Database logging (dblog) Module Enabled 7.57 Core Field (field) Module Enabled 7.57 Core Field SQL storage (field_sql_storage) Module Enabled 7.57 Core Field UI (field_ui) Module Enabled 7.57 Core File (file) Module Enabled 7.57 Core Filter (filter) Module Enabled 7.57 Core Forum (forum) Module Not installed 7.57 Core Help (help) Module Enabled 7.57 Core Image (image) Module Enabled 7.57 Core List (list) Module Enabled 7.57 Core Locale (locale) Module Not installed 7.57 Core Menu (menu) Module Enabled 7.57 Core Node (node) Module Enabled 7.57 Core Number (number) Module Enabled 7.57 Core OpenID (openid) Module Not installed 7.57 Core Options (options) Module Enabled 7.57 Core Overlay (overlay) Module Enabled 7.57 Core Path (path) Module Enabled 7.57 Core PHP filter (php) Module Not installed 7.57 Core Poll (poll) Module Not installed 7.57 Core RDF (rdf) Module Enabled 7.57 Core Search (search) Module Enabled 7.57 Core Shortcut (shortcut) Module Enabled 7.57 Core Statistics (statistics) Module Not installed 7.57 Core Syslog (syslog) Module Not installed 7.57 Core System (system) Module Enabled 7.57 Core Taxonomy (taxonomy) Module Enabled 7.57 Core Testing (simpletest) Module Not installed 7.57 Core Text (text) Module Enabled 7.57 Core Toolbar (toolbar) Module Enabled 7.57 Core Tracker (tracker) Module Not installed 7.57 Core Trigger (trigger) Module Not installed 7.57 Core Update manager (update) Module Enabled 7.57 Core User (user) Module Enabled 7.57 Date/Time Date (date) Module Not installed 7.x-2.10 Date/Time Date All Day (date_all_day) Module Not installed 7.x-2.10 Date/Time Date API (date_api) Module Enabled 7.x-2.10 Date/Time Date Context (date_context) Module Not installed 7.x-2.10 Date/Time Date Picker (datepicker) Module Enabled 7.x-1.0 Date/Time Date Picker Block (datepicker_block) Module Not installed 7.x-1.0 Date/Time Date Picker Views (datepicker_views) Module Enabled 7.x-1.0 Date/Time Date Popup (date_popup) Module Enabled 7.x-2.10 Date/Time Date Repeat API (date_repeat) Module Not installed 7.x-2.10 Date/Time Date Repeat Field (date_repeat_field) Module Not installed 7.x-2.10 Date/Time Date Tools (date_tools) Module Not installed 7.x-2.10 Date/Time Date Views (date_views) Module Enabled 7.x-2.10 Development Devel (devel) Module Not installed 7.x-1.5 Development Devel generate (devel_generate) Module Not installed 7.x-1.5 Development Devel node access (devel_node_access) Module Not installed 7.x-1.5 Development Nodequeue generate (nodequeue_generate) Module Not installed 7.x-2.1 Features Date Migration Example (date_migrate_example) Module Not installed 7.x-2.10 Features Features (features) Module Not installed 7.x-2.10 Features extra FE Block (fe_block) Module Not installed 7.x-1.0 Features extra FE Date (fe_date) Module Not installed 7.x-1.0 Features extra FE Nodequeue (fe_nodequeue) Module Not installed 7.x-1.0 Features extra FE Profile (fe_profile) Module Not installed 7.x-1.0 Fields Entity Reference (entityreference) Module Not installed 7.x-1.5 Fields Entity Reference Behavior Example (entityreference_behavior_example) Module Not installed 7.x-1.5 Fields Field Group (field_group) Module Enabled 7.x-1.6 Fields Link (link) Module Not installed 7.x-1.4 Islandora Compound Object Zip File Importer Module Not installed 7.x-dev (islandora_compound_object_zip_importer) Islandora Islandora (islandora) Module Enabled 7.x-dev Islandora Islandora Book Batch (islandora_book_batch) Module Enabled 7.x-dev Islandora Islandora Entities CSV Import (islandora_entities_csv_import) Module Enabled 7.x-dev Islandora Islandora Multi Importer (islandora_multi_importer) Module Enabled Islandora Islandora Newspaper Batch (islandora_newspaper_batch) Module Enabled 7.x-dev Islandora Islandora Populator (islandora_populator) Module Enabled 7.x-dev Islandora Islandora Solr Facet Pages (islandora_solr_facet_pages) Module Enabled 7.x-dev Islandora Islandora Solr Metadata (islandora_solr_metadata) Module Enabled 7.x-dev Islandora Islandora Webform (islandora_webform) Module Enabled 7.x-1.4-rc1 Islandora Islandora Webform Ingest (islandora_webform_ingest) Module Enabled Islandora Islandora XSLT Populator (islandora_xslt_populator) Module Not installed 7.x-dev Islandora Dependencies Islandora Form - Fieldpanel element (islandora_form_fieldpanel) Module Enabled 7.x-dev Islandora Dependencies Islandora XML Form API (xml_form_api) Module Enabled 7.x-dev Islandora Dependencies Islandora XML Form Elements (xml_form_elements) Module Enabled 7.x-dev Islandora Dependencies Islandora XML Schema API (xml_schema_api) Module Enabled 7.x-dev Islandora Dependencies Objective Forms (objective_forms) Module Enabled 7.x-dev Islandora Dependencies PHP Lib (php_lib) Module Enabled 7.x-dev Islandora Search Islandora Solr (islandora_solr) Module Enabled 7.x-dev Islandora Search Islandora Solr display profiles (islandora_solr_config) Module Enabled 7.x-dev Islandora Search Islandora Solr Views (islandora_solr_views) Module Enabled 7.x-dev Islandora Solution Packs Bibutils (bibutils) Module Enabled 7.x-dev Islandora Solution Packs Citation Exporter (citation_exporter) Module Enabled 7.x-dev Islandora Solution Packs Citeproc (citeproc) Module Enabled 7.x-dev Islandora Solution Packs DOI Importer (doi_importer) Module Enabled 7.x-dev Islandora Solution Packs DOI Populator (doi_populator) Module Not installed 7.x-dev Islandora Solution Packs EndNote XML Populator (endnotexml_populator) Module Not installed 7.x-dev Islandora Solution Packs EndNoteXML Importer (endnotexml_importer) Module Enabled 7.x-dev Islandora Solution Packs Islandora Audio (islandora_audio) Module Enabled 7.x-dev Islandora Solution Packs Islandora basic collection (islandora_basic_collection) Module Enabled 7.x-dev Islandora Solution Packs Islandora basic image (islandora_basic_image) Module Enabled 7.x-dev Islandora Solution Packs Islandora Bibliography (islandora_bibliography) Module Enabled 7.x-dev Islandora Solution Packs Islandora Book Solution Pack (islandora_book) Module Enabled 7.x-dev Islandora Solution Packs Islandora compound object (islandora_compound_object) Module Enabled 7.x-dev Islandora Solution Packs Islandora Disk Image Solution Pack (islandora_disk_image) Module Enabled 7.x-dev Islandora Solution Packs Islandora DOI (islandora_doi) Module Enabled 7.x-dev Islandora Solution Packs Islandora EndNote XML (islandora_endnotexml) Module Enabled 7.x-dev Islandora Solution Packs Islandora Entities (islandora_entities) Module Enabled 7.x-dev Islandora Solution Packs Islandora example simple text (islandora_example_simple_text) Module Not installed 7.x-dev Islandora Solution Packs Islandora Google Scholar (islandora_google_scholar) Module Enabled 7.x-dev Islandora Solution Packs Islandora Large Image Solution Pack (islandora_large_image) Module Enabled 7.x-dev Islandora Solution Packs Islandora newspaper (islandora_newspaper) Module Enabled 7.x-dev Islandora Solution Packs Islandora Paged Content (islandora_paged_content) Module Enabled 7.x-dev Islandora Solution Packs Islandora PDF (islandora_pdf) Module Enabled 7.x-dev Islandora Solution Packs Islandora PMID (islandora_pmid) Module Enabled 7.x-dev Islandora Solution Packs Islandora RIS (islandora_ris) Module Enabled 7.x-dev Islandora Solution Packs Islandora Scholar (islandora_scholar) Module Enabled 7.x-dev Islandora Solution Packs Islandora Scholar Embargo (islandora_scholar_embargo) Module Enabled 7.x-dev Islandora Solution Packs Islandora Video Solution Pack (islandora_video) Module Enabled 7.x-dev Islandora Solution Packs Islandora Web ARChive Solution Pack (islandora_web_archive) Module Enabled 7.x-dev Islandora Solution Packs PMID Populator (pmid_populator) Module Not installed 7.x-dev Islandora Solution Packs Pubmed Importer (pmid_importer) Module Enabled 7.x-dev Islandora Solution Packs RIS Importer (ris_importer) Module Enabled 7.x-dev Islandora Solution Packs RIS Populator (ris_populator) Module Not installed 7.x-dev Islandora Tools CSL (csl) Module Enabled 7.x-dev Islandora Tools Islandora Altmetrics Badge (islandora_altmetrics) Module Enabled Islandora Tools Islandora Badges (islandora_badges) Module Enabled Islandora Tools Islandora BagIt (islandora_bagit) Module Enabled 7.x-dev Islandora Tools Islandora Batch (islandora_batch) Module Enabled 7.x-dev Islandora Tools Islandora Batch Importer (islandora_importer) Module Enabled 7.x-dev Islandora Tools Islandora Batch Report (islandora_batch_report) Module Enabled 7.x-dev Islandora Tools Islandora Bookmark (islandora_bookmark) Module Enabled 7.x-dev Islandora Tools Islandora Bookmark CSV Exports (islandora_bookmark_csv_exports) Module Not installed 7.x-dev Islandora Tools Islandora Checksum (islandora_checksum) Module Not installed 7.x-dev Islandora Tools Islandora Checksum Checker (islandora_checksum_checker) Module Not installed 7.x-dev Islandora Tools Islandora FITS (islandora_fits) Module Enabled 7.x-dev Islandora Tools Islandora Image Annotation (islandora_image_annotation) Module Not installed Islandora Tools Islandora MARCXML (islandora_marcxml) Module Enabled 7.x-dev Islandora Tools Islandora oaDOI (islandora_oadoi) Module Not installed Islandora Tools Islandora OAI Provider (islandora_oai) Module Enabled 7.x-dev Islandora Tools Islandora OCR (islandora_ocr) Module Enabled 7.x-dev Islandora Tools Islandora pathauto (islandora_pathauto) Module Enabled 7.x-dev Islandora Tools Islandora PREMIS (islandora_premis) Module Enabled 7.x-dev Islandora Tools Islandora Scopus Badge (islandora_scopus) Module Not installed Islandora Tools Islandora Simple Workflow (islandora_simple_workflow) Module Enabled 7.x-dev Islandora Tools Islandora Sync (islandora_sync) Module Not installed Islandora Tools Islandora Usage Stats (islandora_usage_stats) Module Enabled 7.x-dev Islandora Tools Islandora Web of Science Badge (islandora_wos) Module Not installed Islandora Tools Islandora Xacml Api (islandora_xacml_api) Module Enabled 7.x-dev Islandora Tools Islandora XACML Editor (islandora_xacml_editor) Module Enabled 7.x-dev Islandora Tools Islandora XML Form Builder (xml_form_builder) Module Enabled 7.x-dev Islandora Tools Islandora XML Forms (xml_forms) Module Enabled 7.x-dev Islandora Tools Islandora XML sitemap (islandora_xmlsitemap) Module Enabled 7.x-dev Islandora Tools Zip File Importer (zip_importer) Module Enabled 7.x-dev Islandora Viewers Islandora Internet Archive BookReader Module Enabled 7.x-dev (islandora_internet_archive_bookreader) Islandora Viewers Islandora JW Player (islandora_jwplayer) Module Enabled 7.x-dev Islandora Viewers Islandora OpenSeadragon (islandora_openseadragon) Module Enabled 7.x-dev Islandora Viewers Islandora pdf.js (islandora_pdfjs) Module Enabled 7.x-dev Islandora Viewers Islandora video.js (islandora_videojs) Module Enabled 7.x-dev Multilingual - Panels translation (i18n_panels) Module Not installed 7.x-3.9 Internationalization Multilingual - Rules translation (rules_i18n) Module Not installed 7.x-2.10 Internationalization Nodequeue Nodequeue (nodequeue) Module Not installed 7.x-2.1 Nodequeue Nodequeue Service (nodequeue_service) Module Not installed 7.x-2.1 Nodequeue Smartqueue taxonomy (smartqueue) Module Not installed 7.x-2.1 Other Colorbox (colorbox) Module Enabled 7.x-2.13 Other Entity API (entity) Module Enabled 7.x-1.9 Other Entity tokens (entity_token) Module Enabled 7.x-1.9 Other Entity view modes (entity_view_mode) Module Not installed 7.x-1.0-rc1 Other Environment indicator (environment_indicator) Module Not installed 7.x-2.9 Other Environment indicator variables (environment_indicator_variable) Module Not installed 7.x-2.9 Other ImageMagick (imagemagick) Module Enabled 7.x-1.0 Other ImageMagick Advanced (imagemagick_advanced) Module Not installed 7.x-1.0 Other Islandora Sync Field Collection (islandora_sync_field_collection) Module Not installed Other Islandora Sync Relation (islandora_sync_relation) Module Not installed Other Libraries (libraries) Module Enabled 7.x-2.3 Other Pathauto (pathauto) Module Enabled 7.x-1.3 Other Stage File Proxy (stage_file_proxy) Module Not installed 7.x-1.7 Other Strongarm (strongarm) Module Not installed 7.x-2.0 Other Token (token) Module Enabled 7.x-1.7 Panels Mini panels (panels_mini) Module Not installed 7.x-3.9 Panels Panel nodes (panels_node) Module Not installed 7.x-3.9 Panels Panels (panels) Module Not installed 7.x-3.9 Panels Panels In-Place Editor (panels_ipe) Module Not installed 7.x-3.9 Rules Rules (rules) Module Enabled 7.x-2.10 Rules Rules Scheduler (rules_scheduler) Module Not installed 7.x-2.10 Rules Rules UI (rules_admin) Module Not installed 7.x-2.10 Statistics Google Analytics (googleanalytics) Module Not installed 7.x-2.4 Testing Features Extra test feature (features_extra_test) Module Not installed 7.x-1.0 User interface jQuery Update (jquery_update) Module Enabled 7.x-2.7 Views Views (views) Module Enabled 7.x-3.18 Views Views Bulk Operations (views_bulk_operations) Module Not installed 7.x-3.4 Views Views Data Export (views_data_export) Module Enabled 7.x-3.2 Views Views Slideshow (views_slideshow) Module Not installed 7.x-3.9 Views Views Slideshow Simple Pager (views_slideshow_simple_pager) Module Not installed 7.x-3.9 Views Views Slideshow: Cycle (views_slideshow_cycle) Module Not installed 7.x-3.9 Views Views UI (views_ui) Module Enabled 7.x-3.18 Webform Webform (webform) Module Enabled 7.x-4.16 Webform Webform AJAX (webform_ajax) Module Enabled 7.x-1.1 Webform Webform Bonus Pack (webform_bonus) Module Enabled 7.x-3.x-dev Webform Webform Digest (webform_digest) Module Not installed 7.x-3.x-dev Webform Webform to Google Docs (webform_to_gdocs) Module Not installed 7.x-4.3 Webform Webform Workflow (webform_workflow) Module Not installed 7.x-1.0-alpha2 XML sitemap XML sitemap (xmlsitemap) Module Enabled 7.x-2.3 XML sitemap XML sitemap custom (xmlsitemap_custom) Module Enabled 7.x-2.3 XML sitemap XML sitemap engines (xmlsitemap_engines) Module Not installed 7.x-2.3 XML sitemap XML sitemap internationalization (xmlsitemap_i18n) Module Not installed 7.x-2.3 XML sitemap XML sitemap menu (xmlsitemap_menu) Module Not installed 7.x-2.3 XML sitemap XML sitemap node (xmlsitemap_node) Module Not installed 7.x-2.3 XML sitemap XML sitemap taxonomy (xmlsitemap_taxonomy) Module Not installed 7.x-2.3 XML sitemap XML sitemap user (xmlsitemap_user) Module Not installed 7.x-2.3 Core Bartik (bartik) Theme Enabled 7.57 Core Garland (garland) Theme Disabled 7.57 Core Seven (seven) Theme Enabled 7.57 Core Stark (stark) Theme Disabled 7.57","title":"Supported drupal modules matrix"},{"location":"specifications/supported-software-matrix/","text":"Software Version Software Website Apache 2.4 https://httpd.apache.org/ Djatoka 1.1 https://sourceforge.net/projects/djatoka/ Drupal 7.5x+ https://www.drupal.org/ Drupal filter 3.8.1 https://github.com/Islandora/islandora_drupal_filter Fedora 3.8.1 http://fedorarepository.org/ Gsearch 2.8.x https://github.com/discoverygarden/gsearch GSearch Extensions 0.1.3 https://github.com/discoverygarden/dgi_gsearch_extensions Islandora 7.x-1.1x https://github.com/Islandora/islandora Islandora Transforms (XSLTs) latest https://github.com/discoverygarden/islandora_transforms MySQL 5.6 https://www.mysql.com/ Nginx 1.13 https://www.nginx.com/ OpenJDK JDK 8.x http://openjdk.java.net/ Oracle Java JDK 8.x http://www.oracle.com/technetwork/java/javase/overview/index.html PHP 5.6 http://www.php.net/ Solr 4.10.4 http://lucene.apache.org/solr/ Tomcat 8.x http://tomcat.apache.org/","title":"Supported software matrix"},{"location":"update/update/","text":"Update ISLE Update an existing ISLE installation to install the newest improvements and security updates. This process is intended to be backwards compatible with your existing ISLE site. Important information: These instructions assume you have already installed a version of ISLE using git. As with any enterprise system, it is strongly suggested you run these update steps in a test environment before updating your production server. Please always read the latest Release Notes . Update your version of ISLE to the latest release: In the command line, navigate to the ISLE directory. This directory should contain the docker-compose.yml file. Stop and remove your existing ISLE containers docker-compose down Update the docker files via git git pull Update the docker containers docker-compose pull This may take a few minutes depending on your network connection Run the new docker containers docker-compose up -d The new containers should start up and your Islandora site should be available, without any loss of existing content. If you run into trouble, please see the Cleanup section of the quick start guide . Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Update ISLE"},{"location":"update/update/#update-isle","text":"Update an existing ISLE installation to install the newest improvements and security updates. This process is intended to be backwards compatible with your existing ISLE site. Important information: These instructions assume you have already installed a version of ISLE using git. As with any enterprise system, it is strongly suggested you run these update steps in a test environment before updating your production server. Please always read the latest Release Notes . Update your version of ISLE to the latest release: In the command line, navigate to the ISLE directory. This directory should contain the docker-compose.yml file. Stop and remove your existing ISLE containers docker-compose down Update the docker files via git git pull Update the docker containers docker-compose pull This may take a few minutes depending on your network connection Run the new docker containers docker-compose up -d The new containers should start up and your Islandora site should be available, without any loss of existing content. If you run into trouble, please see the Cleanup section of the quick start guide . Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Update ISLE"}]}