{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ISLE: Islandora Enterprise ISLE is a set of resources for building and updating a fully functioning Islandora system quickly using a system building tool called Docker . The purpose of this documentation is to provide clear instructions on how to do one, or all, of the following: Test ISLE installation on my laptop or workstation Create a new ISLE site on a production, staging or development server Migrate to ISLE on a production, staging or development server Test ISLE Below are the recommended specifications for a laptop or desktop running a TEST version of ISLE: 8 - 16 GB RAM is recommended Minimum 1 - 2 CPUs (w/ 1 - 4 cores each) 128 - 500GB for the Desktop OS Sufficient HD space to hold a test collection ISLE is designed and tested to work on the following operating systems. Follow the link for your system for instructions on setting up the testing environment. Mac OSX High Sierra Windows 10 Ubuntu 18.04 Centos 7.x Advice for installing a test instance of ISLE on other platforms may be available from the ISLE ISLE Google Group . Create a new ISLE site or site(s) Typically new sites are used in production, staging or shared development environments. If you do not have an existing Islandora installation you need to migrate, follow these instructions. Below are the recommended minimum specifications for a production server. The server can be a local physical server, a VM, or on a hosted platform such as Amazon's AWS or Google's GCP. Ubuntu 18.04 LTS or CentOS 7.x running on a server or VM Minimum 2 CPU's (w/ 1 - 4 cores each) Sufficient HD or attached storage to hold your collection 30 - 50GB for the Server OS & overhead 16 - 32 GB of RAM is recommended First, follow one of the guides below to configure your server for ISLE ( Please Note : These instructions assume you have already installed the base operating system (Ubuntu 18.04 or Centos 7.x) and have ssh and root/sudo access for the user islandora ): Ubuntu 18.04 Centos 7.x Once the prerequisites are installed, you will need to install Islandora: If you are only going to setup one ISLE site within a single environment (e.g. production only) or run all of your ISLE environments on separate ISLE host servers or VMs please using the: New ISLE Site - Single Env once you have set up the host server. If you are going to setup multiple ISLE sites using multiple environments (e.g. dev, stage, and prod etc.) on one ISLE Host server or VM please using the: New ISLE Sites - Multi Envs once you have set up the host server. Note: setting up multiple ISLE sites and environments on one ISLE host server will require adequate resources. A good rule of thumb is to take the specifications outlined in the ISLE Host Server OS requirements and divide by three as an initial concept. Bear in mind, that any dev environment doesn't need as much resource but any potential stage and prod environments should mirror each other in resource usage and setup. Migrate to ISLE Typically migrated sites are used in production, staging or shared development environments. Below are the recommended minimum specifications for a production server. The server can be a local physical server, a VM, or on a hosted platform such as Amazon's AWS or Google's GCP. Ubuntu 18.04 LTS or CentOS 7.x running on a server or VM Minimum 2 CPU's (w/ 1 - 4 cores each) Sufficient HD or attached storage to hold your collection 30 - 50GB for the Server OS & overhead 16 - 32 GB of RAM is recommended First, follow one of the guides below to configure your server for ISLE ( Please Note : These instructions assume you have already installed the base operating system (Ubuntu 18.04 or Centos 7.x) and have ssh and root/sudo access for the user islandora ): Ubuntu 18.04 Centos 7.x Once the prerequisites are installed, you will need to install Islandora: Migrate to ISLE","title":"Home"},{"location":"#isle-islandora-enterprise","text":"ISLE is a set of resources for building and updating a fully functioning Islandora system quickly using a system building tool called Docker . The purpose of this documentation is to provide clear instructions on how to do one, or all, of the following: Test ISLE installation on my laptop or workstation Create a new ISLE site on a production, staging or development server Migrate to ISLE on a production, staging or development server","title":"ISLE: Islandora Enterprise"},{"location":"#test-isle","text":"Below are the recommended specifications for a laptop or desktop running a TEST version of ISLE: 8 - 16 GB RAM is recommended Minimum 1 - 2 CPUs (w/ 1 - 4 cores each) 128 - 500GB for the Desktop OS Sufficient HD space to hold a test collection ISLE is designed and tested to work on the following operating systems. Follow the link for your system for instructions on setting up the testing environment. Mac OSX High Sierra Windows 10 Ubuntu 18.04 Centos 7.x Advice for installing a test instance of ISLE on other platforms may be available from the ISLE ISLE Google Group .","title":"Test ISLE"},{"location":"#create-a-new-isle-site-or-sites","text":"Typically new sites are used in production, staging or shared development environments. If you do not have an existing Islandora installation you need to migrate, follow these instructions. Below are the recommended minimum specifications for a production server. The server can be a local physical server, a VM, or on a hosted platform such as Amazon's AWS or Google's GCP. Ubuntu 18.04 LTS or CentOS 7.x running on a server or VM Minimum 2 CPU's (w/ 1 - 4 cores each) Sufficient HD or attached storage to hold your collection 30 - 50GB for the Server OS & overhead 16 - 32 GB of RAM is recommended First, follow one of the guides below to configure your server for ISLE ( Please Note : These instructions assume you have already installed the base operating system (Ubuntu 18.04 or Centos 7.x) and have ssh and root/sudo access for the user islandora ): Ubuntu 18.04 Centos 7.x Once the prerequisites are installed, you will need to install Islandora: If you are only going to setup one ISLE site within a single environment (e.g. production only) or run all of your ISLE environments on separate ISLE host servers or VMs please using the: New ISLE Site - Single Env once you have set up the host server. If you are going to setup multiple ISLE sites using multiple environments (e.g. dev, stage, and prod etc.) on one ISLE Host server or VM please using the: New ISLE Sites - Multi Envs once you have set up the host server. Note: setting up multiple ISLE sites and environments on one ISLE host server will require adequate resources. A good rule of thumb is to take the specifications outlined in the ISLE Host Server OS requirements and divide by three as an initial concept. Bear in mind, that any dev environment doesn't need as much resource but any potential stage and prod environments should mirror each other in resource usage and setup.","title":"Create a new ISLE site or site(s)"},{"location":"#migrate-to-isle","text":"Typically migrated sites are used in production, staging or shared development environments. Below are the recommended minimum specifications for a production server. The server can be a local physical server, a VM, or on a hosted platform such as Amazon's AWS or Google's GCP. Ubuntu 18.04 LTS or CentOS 7.x running on a server or VM Minimum 2 CPU's (w/ 1 - 4 cores each) Sufficient HD or attached storage to hold your collection 30 - 50GB for the Server OS & overhead 16 - 32 GB of RAM is recommended First, follow one of the guides below to configure your server for ISLE ( Please Note : These instructions assume you have already installed the base operating system (Ubuntu 18.04 or Centos 7.x) and have ssh and root/sudo access for the user islandora ): Ubuntu 18.04 Centos 7.x Once the prerequisites are installed, you will need to install Islandora: Migrate to ISLE","title":"Migrate to ISLE"},{"location":"get_help/","text":"Getting Help with ISLE The best place to get help installing or configuring ISLE is the Islandora ISLE Google group (public).","title":"Get Help"},{"location":"get_help/#getting-help-with-isle","text":"The best place to get help installing or configuring ISLE is the Islandora ISLE Google group (public).","title":"Getting Help with ISLE"},{"location":"glossary/","text":"ISLE Basics In simple terms, ISLE is a set of resources that allow one to build a fully functioning Islandora system fairly quickly using a system building tool called Docker Glossary of Terms Docker Containers : Docker containers are lightweight, stand-alone, executable packages of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. Each major component of Islandora runs in its own container. Docker : used to build ISLE - Docker is used to create containers (similar to virtual servers) based on pre-built images. A \"recipe\" file called docker-compose.yml orchestrates the setting up and networking of the containers. Dockerfile : Docker can build images automatically by reading the instructions from a Dockerfile . A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. Docker for Mac : Docker for Mac is an easy-to-install desktop app for building, debugging and testing Dockerized apps on a Mac. Docker for Mac is a complete development environment deeply integrated with the MacOS Hypervisor framework, networking and filesystem Dockerhub : website / repository that provides access to the latest Docker images for the ISLE containers. Host Server : Also called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a laptop (LOCAL), or a server you connected to via ssh (REMOTE). Images : Docker images - source for the containers - these are built with installed software and updated by ISLE developers and stored on Dockerhub. You can see what software is used in each of the image's Dockerfiles e.g. apache/Dockerfile etc. This will contain additional information on official Docker images used as a Docker base image ISLE on GitHub : the ISLE repository on github.com contains documentation and configuration files necessary to build ISLE. Network refers to a defined Docker network that is controlled by docker. This has powerful implications in production. ISLE services: fedora , solr , apache , mysql , and proxy communicate using an internal private stack network. The service proxy also joins an insecure network that is accessible to the WAN (or for testing \"WAN\" likely means a smaller internal network). Why two networks? Swarms, scaling, replicating. Volume a Docker controlled place to hold data on the local file system. Used to persist data across containers. Documentation / Development CLI / cli - A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface[1] and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). A program which handles the interface is called a command language interpreter or shell. Git - A free and open source distributed software version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. https://git-scm.com/ The ISLE project and its documentation is hosted by an online git service called Github.com Git branches - Branching means you diverge from the main line of development and continue to do work without messing with that main line. Learn more about branching here Markdown is a lightweight markup language with plain text formatting syntax. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). https://en.wikipedia.org/wiki/Markdown https://daringfireball.net/projects/markdown/syntax http://kirkstrobeck.github.io/whatismarkdown.com/ https://help.github.com/categories/writing-on-github/ TL;DR - \"Too long; didn't read.\" - used to indicate a large post, article etc. that has a brief summary of said post, article etc. as it might be too long to read. YAML (YAML Ain't Markup Language) is a human-readable data serialization language. It is commonly used for configuration files, but could be used in many applications where data is being stored (e.g. debugging output) or transmitted (e.g. document headers). https://en.wikipedia.org/wiki/YAML http://yaml.org/ Solr Please note: Online versions of the SOLR documentation are for 6.6+ or higher, ISLE currently users version 4.10.4 only. Solr - an open source enterprise search platform with the such features as full-text search, hit highlighting, faceted search, real-time indexing, dynamic clustering, database integration, NoSQL features[1] and rich document (e.g., Word, PDF) handling. Providing distributed search and index replication, Solr is designed for scalability and fault tolerance. Learn more about Solr here Learn more about using Solr 4.10.4 Core - In Solr, the term core is used to refer to a single index and associated transaction log and configuration files (including the solrconfig.xml and Schema files, among others). Your Solr installation can have multiple cores if needed, which allows you to index data with different structures in the same server, and maintain more control over how your data is presented to different audiences. schema.xml - Solr organizes its data into documents, which consist of fields. The schema.xml file contains information about these fields, how they are analyzed and then filtered during searches. Different field types can contain different types of data so Solr uses the schema.xml file to determine how to build indexes from these input documents, and how to perform index and query time processing. solr.xml - The solr.xml file specifies configuration options for each Solr core, including configuration options for multiple cores. The file also contains mappings for request URLs, and indicates which cores to load when the server starts. solrconfig.xml - The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, you configure important features such as: request handlers, which process the requests to Solr, such as requests to add documents to the index or requests to return results for a query listeners processes that \"listen\" for particular query-related events. Listeners can be used to trigger the execution of special code, such as invoking some common queries to warm-up caches and much more... stopwords.txt - The stopwords.txt file is a configuration file that lists the words to be used by the Solr stop filter to be excluded from appearing or being used for searches. Examples of these common words are a large list that can include \"a\", \"the\", or \"is\" which in a page could easily appear hundreds of times or more. When a user performs a search, an algorithm calculates the relevancy of any document in the search index by counting the number of times a word appears in the text being searched and since words like \"the\" have no bearing on a document's actual relevancy; they are then excluded from this ranking algorithm's results. Systems cronjob - The software utility cron is a time-based job scheduler in Unix-like computer operating systems. People who set up and maintain software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration Learn more here . This is used by such utilities like tmpreaper and the Drupal site on the apache container. domain - A domain name is your website name for the IP address where Internet users can access your website. A domain name is used for finding and identifying computers on the Internet. Computers use IP addresses, which are a series of numbers. However, it is difficult for humans to remember strings of numbers. Because of this, domain names were developed and used to identify entities on the Internet rather than using IP addresses. Learn more about domains here or here dhparam - A script to create this file can be found in the /config/isle-newsite-sample/proxy/config/ssl-certs directory. This file is used in conjunction with the nginx reverse proxy on the proxy container to further secure the communication / traffic between the external network (ISLE Host) and the internal ISLE network (other four containers.) The Diffie\u2013Hellman key exchange is an alternative to RSA-based key exchange using an ephemeral but slower Diffie-Hellman algorithm which generates session keys in such a way that only the two parties involved in the communication can obtain them. No one else can, even if they have access to the server's private key. After the session is complete, and both parties destroy the session keys, the only way to decrypt the communication is to break the session keys themselves. This protocol feature is known as Forward Secrecy. Learn more about Diffie-Hellman parameters environment - An ISLE environment can be a production, development or staging environment. However ISLE is flexible and can be named anything using any convention of the enduser's desire, one is not forced to do the following. Following a recommended workflow of \"code up, data down\" for Islandora development typically: a production ISLE environment is a separate ISLE instance running all production (final and tested) potentially public facing code, themes, databases and a full amount of collection data or objects. a staging ISLE environment is a separate ISLE instance running all running all pre-production (final and tested) private (non-public) facing code, themes, databases and a full amount of collection data or objects. staging should be an exact mirror of production (RAM, CPU, storage etc) with the exception of new code to be reviewed and tested internally prior to pushing to production. a development ISLE environment is a separate ISLE instance running all development (experimental and untested) private (non-public) facing code, themes, databases and a limited amount of collection data or objects. development should not be a mirror of production and can be greatly limited and underpowered in its resource footprint e.g. less RAM, CPU, HD etc. Root User - the user name or account that by default has access to all commands and files on a Linux or other Unix-like operating system. It is also referred to as the root account, root, root user and the superuser. Learn more about root user SSH - is a cryptographic network protocol for operating network services securely over an unsecured network. The best known example application is for remote login to computer systems by users. Learn more about SSH SSL certificates - files that digitally bind a cryptographic key to an organization\u2019s web domain (URL). When installed on a web server, it can display a green padlock and https appears in the browser path which allow secure connections from a web server to a user's browser. Typically, SSL certificates are used to secure credit card transactions, data transfer and logins, and more. Learn more about SSL Certificates These certificates are used in new or migrated ISLE sites by the apache & proxy containers and copied into their respective new or migrated ISLE config directories. Read more about SSL Chaining In order to provision a full chain SSL certificate for the proxy container config directory and usage. Provision full chain cert for Nginx link 1: https://support.comodo.com/index.php?/comodo/Knowledgebase/Article/View/1091/0/certificate-installation--nginx Provision full chain cert for Nginx link 2: https://futurestud.io/tutorials/how-to-configure-nginx-ssl-certifcate-chain In order to determine if a SSL Certificate ChainFile is warranted for your apache container config directory and usage. In most cases one can use the intermediate and root certs separately for the apache container. Read more about a SSL Certificate File e.g. /certs/newsite-sample.pem used as an example in later documentation. This file is required in all setups. Read more about a SSL Certificate ChainFile e.g. /certs/newsite-sample-interm.pem used as an example in later documentation. This file may be optional in some setups but is generally recommended for use by the apache container when available. Read more about a SSL Certificate Key File e.g. /certs/newsite-sample-key.pem used as an example in later documentation. This file is required in all setups. sudo - short for \"substitute user do\" and it allows the user to have root permissions when entered in front of a command. Learn more about sudo Virtualization Vagrant : Vagrant provides easy to configure, reproducible, and portable work environments. Vagrant works on Mac, Linux, Windows, and more. Within the ISLE project there is a vagrant folder. Vagrantfile : Vagrantfile used to describe the type of virtual machine required for the ISLE project, and how to configure and provision these virtual machines. Vagrantfiles are called Vagrantfiles because the actual literal filename for the file is Vagrantfile. Vagrant is meant to run with one Vagrantfile per project which allows endusers to check out the code, run vagrant up, and be on their way. Vagrantfiles are used primarily for use on local workstations and laptops running a Ubuntu or CentOS ISLE Host server. Virtualbox : VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. VM : Virtual Machine - A virtual machine is a software computer that, similar to a physical computer, runs an operating system and applications comprised of specification and configuration files backed by the resources of a host (the physical computer).","title":"Glossary of Terms and Variables"},{"location":"glossary/#isle-basics","text":"In simple terms, ISLE is a set of resources that allow one to build a fully functioning Islandora system fairly quickly using a system building tool called Docker Glossary of Terms","title":"ISLE Basics"},{"location":"glossary/#docker","text":"Containers : Docker containers are lightweight, stand-alone, executable packages of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. Each major component of Islandora runs in its own container. Docker : used to build ISLE - Docker is used to create containers (similar to virtual servers) based on pre-built images. A \"recipe\" file called docker-compose.yml orchestrates the setting up and networking of the containers. Dockerfile : Docker can build images automatically by reading the instructions from a Dockerfile . A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. Docker for Mac : Docker for Mac is an easy-to-install desktop app for building, debugging and testing Dockerized apps on a Mac. Docker for Mac is a complete development environment deeply integrated with the MacOS Hypervisor framework, networking and filesystem Dockerhub : website / repository that provides access to the latest Docker images for the ISLE containers. Host Server : Also called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a laptop (LOCAL), or a server you connected to via ssh (REMOTE). Images : Docker images - source for the containers - these are built with installed software and updated by ISLE developers and stored on Dockerhub. You can see what software is used in each of the image's Dockerfiles e.g. apache/Dockerfile etc. This will contain additional information on official Docker images used as a Docker base image ISLE on GitHub : the ISLE repository on github.com contains documentation and configuration files necessary to build ISLE. Network refers to a defined Docker network that is controlled by docker. This has powerful implications in production. ISLE services: fedora , solr , apache , mysql , and proxy communicate using an internal private stack network. The service proxy also joins an insecure network that is accessible to the WAN (or for testing \"WAN\" likely means a smaller internal network). Why two networks? Swarms, scaling, replicating. Volume a Docker controlled place to hold data on the local file system. Used to persist data across containers.","title":"Docker"},{"location":"glossary/#documentation-development","text":"CLI / cli - A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface[1] and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). A program which handles the interface is called a command language interpreter or shell. Git - A free and open source distributed software version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. https://git-scm.com/ The ISLE project and its documentation is hosted by an online git service called Github.com Git branches - Branching means you diverge from the main line of development and continue to do work without messing with that main line. Learn more about branching here Markdown is a lightweight markup language with plain text formatting syntax. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). https://en.wikipedia.org/wiki/Markdown https://daringfireball.net/projects/markdown/syntax http://kirkstrobeck.github.io/whatismarkdown.com/ https://help.github.com/categories/writing-on-github/ TL;DR - \"Too long; didn't read.\" - used to indicate a large post, article etc. that has a brief summary of said post, article etc. as it might be too long to read. YAML (YAML Ain't Markup Language) is a human-readable data serialization language. It is commonly used for configuration files, but could be used in many applications where data is being stored (e.g. debugging output) or transmitted (e.g. document headers). https://en.wikipedia.org/wiki/YAML http://yaml.org/","title":"Documentation / Development"},{"location":"glossary/#solr","text":"Please note: Online versions of the SOLR documentation are for 6.6+ or higher, ISLE currently users version 4.10.4 only. Solr - an open source enterprise search platform with the such features as full-text search, hit highlighting, faceted search, real-time indexing, dynamic clustering, database integration, NoSQL features[1] and rich document (e.g., Word, PDF) handling. Providing distributed search and index replication, Solr is designed for scalability and fault tolerance. Learn more about Solr here Learn more about using Solr 4.10.4 Core - In Solr, the term core is used to refer to a single index and associated transaction log and configuration files (including the solrconfig.xml and Schema files, among others). Your Solr installation can have multiple cores if needed, which allows you to index data with different structures in the same server, and maintain more control over how your data is presented to different audiences. schema.xml - Solr organizes its data into documents, which consist of fields. The schema.xml file contains information about these fields, how they are analyzed and then filtered during searches. Different field types can contain different types of data so Solr uses the schema.xml file to determine how to build indexes from these input documents, and how to perform index and query time processing. solr.xml - The solr.xml file specifies configuration options for each Solr core, including configuration options for multiple cores. The file also contains mappings for request URLs, and indicates which cores to load when the server starts. solrconfig.xml - The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, you configure important features such as: request handlers, which process the requests to Solr, such as requests to add documents to the index or requests to return results for a query listeners processes that \"listen\" for particular query-related events. Listeners can be used to trigger the execution of special code, such as invoking some common queries to warm-up caches and much more... stopwords.txt - The stopwords.txt file is a configuration file that lists the words to be used by the Solr stop filter to be excluded from appearing or being used for searches. Examples of these common words are a large list that can include \"a\", \"the\", or \"is\" which in a page could easily appear hundreds of times or more. When a user performs a search, an algorithm calculates the relevancy of any document in the search index by counting the number of times a word appears in the text being searched and since words like \"the\" have no bearing on a document's actual relevancy; they are then excluded from this ranking algorithm's results.","title":"Solr"},{"location":"glossary/#systems","text":"cronjob - The software utility cron is a time-based job scheduler in Unix-like computer operating systems. People who set up and maintain software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration Learn more here . This is used by such utilities like tmpreaper and the Drupal site on the apache container. domain - A domain name is your website name for the IP address where Internet users can access your website. A domain name is used for finding and identifying computers on the Internet. Computers use IP addresses, which are a series of numbers. However, it is difficult for humans to remember strings of numbers. Because of this, domain names were developed and used to identify entities on the Internet rather than using IP addresses. Learn more about domains here or here dhparam - A script to create this file can be found in the /config/isle-newsite-sample/proxy/config/ssl-certs directory. This file is used in conjunction with the nginx reverse proxy on the proxy container to further secure the communication / traffic between the external network (ISLE Host) and the internal ISLE network (other four containers.) The Diffie\u2013Hellman key exchange is an alternative to RSA-based key exchange using an ephemeral but slower Diffie-Hellman algorithm which generates session keys in such a way that only the two parties involved in the communication can obtain them. No one else can, even if they have access to the server's private key. After the session is complete, and both parties destroy the session keys, the only way to decrypt the communication is to break the session keys themselves. This protocol feature is known as Forward Secrecy. Learn more about Diffie-Hellman parameters environment - An ISLE environment can be a production, development or staging environment. However ISLE is flexible and can be named anything using any convention of the enduser's desire, one is not forced to do the following. Following a recommended workflow of \"code up, data down\" for Islandora development typically: a production ISLE environment is a separate ISLE instance running all production (final and tested) potentially public facing code, themes, databases and a full amount of collection data or objects. a staging ISLE environment is a separate ISLE instance running all running all pre-production (final and tested) private (non-public) facing code, themes, databases and a full amount of collection data or objects. staging should be an exact mirror of production (RAM, CPU, storage etc) with the exception of new code to be reviewed and tested internally prior to pushing to production. a development ISLE environment is a separate ISLE instance running all development (experimental and untested) private (non-public) facing code, themes, databases and a limited amount of collection data or objects. development should not be a mirror of production and can be greatly limited and underpowered in its resource footprint e.g. less RAM, CPU, HD etc. Root User - the user name or account that by default has access to all commands and files on a Linux or other Unix-like operating system. It is also referred to as the root account, root, root user and the superuser. Learn more about root user SSH - is a cryptographic network protocol for operating network services securely over an unsecured network. The best known example application is for remote login to computer systems by users. Learn more about SSH SSL certificates - files that digitally bind a cryptographic key to an organization\u2019s web domain (URL). When installed on a web server, it can display a green padlock and https appears in the browser path which allow secure connections from a web server to a user's browser. Typically, SSL certificates are used to secure credit card transactions, data transfer and logins, and more. Learn more about SSL Certificates These certificates are used in new or migrated ISLE sites by the apache & proxy containers and copied into their respective new or migrated ISLE config directories. Read more about SSL Chaining In order to provision a full chain SSL certificate for the proxy container config directory and usage. Provision full chain cert for Nginx link 1: https://support.comodo.com/index.php?/comodo/Knowledgebase/Article/View/1091/0/certificate-installation--nginx Provision full chain cert for Nginx link 2: https://futurestud.io/tutorials/how-to-configure-nginx-ssl-certifcate-chain In order to determine if a SSL Certificate ChainFile is warranted for your apache container config directory and usage. In most cases one can use the intermediate and root certs separately for the apache container. Read more about a SSL Certificate File e.g. /certs/newsite-sample.pem used as an example in later documentation. This file is required in all setups. Read more about a SSL Certificate ChainFile e.g. /certs/newsite-sample-interm.pem used as an example in later documentation. This file may be optional in some setups but is generally recommended for use by the apache container when available. Read more about a SSL Certificate Key File e.g. /certs/newsite-sample-key.pem used as an example in later documentation. This file is required in all setups. sudo - short for \"substitute user do\" and it allows the user to have root permissions when entered in front of a command. Learn more about sudo","title":"Systems"},{"location":"glossary/#virtualization","text":"Vagrant : Vagrant provides easy to configure, reproducible, and portable work environments. Vagrant works on Mac, Linux, Windows, and more. Within the ISLE project there is a vagrant folder. Vagrantfile : Vagrantfile used to describe the type of virtual machine required for the ISLE project, and how to configure and provision these virtual machines. Vagrantfiles are called Vagrantfiles because the actual literal filename for the file is Vagrantfile. Vagrant is meant to run with one Vagrantfile per project which allows endusers to check out the code, run vagrant up, and be on their way. Vagrantfiles are used primarily for use on local workstations and laptops running a Ubuntu or CentOS ISLE Host server. Virtualbox : VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. VM : Virtual Machine - A virtual machine is a software computer that, similar to a physical computer, runs an operating system and applications comprised of specification and configuration files backed by the resources of a host (the physical computer).","title":"Virtualization"},{"location":"install_start_here/","text":"Please select your desired use case for ISLE. I would like to: Test ISLE installation on my laptop or workstation Create a new ISLE site on a production, staging or development server Migrate to ISLE on a production, staging or development server Update ISLE to install the newest improvements and security updates Please note: There is a Glossary with relevant terms to help guide installation. Test ISLE The recommended non-production environments for using the prebuilt ISLE test site ( isle.localdomain ) are with the following type of laptops or workstations. Please review the ISLE Host Server OS requirements prior to any installation. ISLE is designed and tested to work on the following OSes and environments. Follow the link for your preferred system for instructions on setting up the testing environment. Mac OSX High Sierra and Docker Mac OSX High Sierra and Vagrant & VirtualBox Windows and Docker Ubuntu 18.04 Centos 7.x Advice for installing a test instance of ISLE on other platforms may be available from the ISLE ISLE Google Group . Create a new ISLE site or site(s) Typically new sites are used in production, staging or shared development environments. If you do not have an existing Islandora installation you need to migrate, follow these instructions. Please review the ISLE Host Server OS requirements prior to any installation. Please Note : These instructions assume you have already installed the base operating system (Ubuntu 18.04 or Centos 7.x) and have ssh and root/sudo access for the user islandora . The server can be a local physical server, a VM, or on a hosted platform such as Amazon's AWS or Google's GCP. First, follow one of the guides below to configure your server for ISLE: Ubuntu 18.04 Centos 7.x Once the prerequisites are installed, you will need to install Islandora: If you are only going to setup one ISLE site within a single environment (e.g. production only) or run all of your ISLE environments on separate ISLE host servers or VMs please using the: New ISLE Site - Single Env once you have set up the host server. If you are going to setup multiple ISLE sites using multiple environments (e.g. dev, stage, and prod etc.) on one ISLE Host server or VM please using the: New ISLE Sites - Multi Envs once you have set up the host server. Note: setting up multiple ISLE sites and environments on one ISLE host server will require adequate resources. A good rule of thumb is to take the specifications outlined in the ISLE Host Server OS requirements and divide by three as an initial concept. Bear in mind, that any dev environment doesn't need as much resource but any potential stage and prod environments should mirror each other in resource usage and setup. Migrate to ISLE The recommended environments for migrating a current production Islandora site to a new ISLE environment are with the following type of servers. ( not desktop or workstation ) Typically migrated sites are used in production, staging or shared development environments. Please review the ISLE Host Server OS requirements prior to any installation. Please Note : These instructions assume you have already installed the base operating system (Ubuntu 18.04 or Centos 7.x) and have ssh and root/sudo access for the user islandora . The server can be a local physical server, a VM, or on a hosted platform such as Amazon's AWS or Google's GCP. First, follow one of the guides below to configure your server for ISLE: Ubuntu 18.04 Centos 7.x Once the prerequisites are installed, you will need to install Islandora: Migrate to ISLE Update ISLE The following offers a method for updating an existing ISLE installation to install the newest improvements and security updates, regardless of environment. This process is backwards compatible with your existing ISLE site. DETAILS COMING SOON...","title":"Install start here"},{"location":"install_start_here/#test-isle","text":"The recommended non-production environments for using the prebuilt ISLE test site ( isle.localdomain ) are with the following type of laptops or workstations. Please review the ISLE Host Server OS requirements prior to any installation. ISLE is designed and tested to work on the following OSes and environments. Follow the link for your preferred system for instructions on setting up the testing environment. Mac OSX High Sierra and Docker Mac OSX High Sierra and Vagrant & VirtualBox Windows and Docker Ubuntu 18.04 Centos 7.x Advice for installing a test instance of ISLE on other platforms may be available from the ISLE ISLE Google Group .","title":"Test ISLE"},{"location":"install_start_here/#create-a-new-isle-site-or-sites","text":"Typically new sites are used in production, staging or shared development environments. If you do not have an existing Islandora installation you need to migrate, follow these instructions. Please review the ISLE Host Server OS requirements prior to any installation. Please Note : These instructions assume you have already installed the base operating system (Ubuntu 18.04 or Centos 7.x) and have ssh and root/sudo access for the user islandora . The server can be a local physical server, a VM, or on a hosted platform such as Amazon's AWS or Google's GCP. First, follow one of the guides below to configure your server for ISLE: Ubuntu 18.04 Centos 7.x Once the prerequisites are installed, you will need to install Islandora: If you are only going to setup one ISLE site within a single environment (e.g. production only) or run all of your ISLE environments on separate ISLE host servers or VMs please using the: New ISLE Site - Single Env once you have set up the host server. If you are going to setup multiple ISLE sites using multiple environments (e.g. dev, stage, and prod etc.) on one ISLE Host server or VM please using the: New ISLE Sites - Multi Envs once you have set up the host server. Note: setting up multiple ISLE sites and environments on one ISLE host server will require adequate resources. A good rule of thumb is to take the specifications outlined in the ISLE Host Server OS requirements and divide by three as an initial concept. Bear in mind, that any dev environment doesn't need as much resource but any potential stage and prod environments should mirror each other in resource usage and setup.","title":"Create a new ISLE site or site(s)"},{"location":"install_start_here/#migrate-to-isle","text":"The recommended environments for migrating a current production Islandora site to a new ISLE environment are with the following type of servers. ( not desktop or workstation ) Typically migrated sites are used in production, staging or shared development environments. Please review the ISLE Host Server OS requirements prior to any installation. Please Note : These instructions assume you have already installed the base operating system (Ubuntu 18.04 or Centos 7.x) and have ssh and root/sudo access for the user islandora . The server can be a local physical server, a VM, or on a hosted platform such as Amazon's AWS or Google's GCP. First, follow one of the guides below to configure your server for ISLE: Ubuntu 18.04 Centos 7.x Once the prerequisites are installed, you will need to install Islandora: Migrate to ISLE","title":"Migrate to ISLE"},{"location":"install_start_here/#update-isle","text":"The following offers a method for updating an existing ISLE installation to install the newest improvements and security updates, regardless of environment. This process is backwards compatible with your existing ISLE site. DETAILS COMING SOON...","title":"Update ISLE"},{"location":"01_installation_host_server/host_server_system_specifications/","text":"ISLE will (using Docker) install and manage a set of virtual \"servers\" (containers) that will run all the components of Islandora. Docker requires a host server upon which to do this. This host server can be a virtual machine (VM) on your desktop or on the cloud, it can also be a physical server. An SSH connection with a user that has root or admin privileges is necessary. If an IT department is doing this initial setup, see this page for sample language to use in requesting the server. The basic requirements for this host machine vary depending on intended use. A VM on a desktop computer will be sufficient to set up a test or development instance. Specifications for Desktop or Laptops Desktop: A laptop or workstation running Docker, Docker Compose and ISLE. 8 - 16 GB RAM is recommended Minimum 1 - 2 CPUs (w/ 1 - 4 cores each) 128 - 500GB for the Desktop OS Sufficient HD space to hold a test collection MacOS High Sierra 10.13.x Windows 10 Home or Pro Ubuntu 18.04+ Desktop Specifications for Production Servers However, if the intent is a new or migrated site that will see actual production use then it is recommended that increased processor speed, memory, and storage space will be required. Server Specifications Ubuntu 18.04 LTS or CentOS 7.x running on a server or VM Minimum 2 CPU's (w/ 1 - 4 cores each) Sufficient HD or attached storage to hold your collection 30 - 50GB for the Server OS & overhead 16 - 32 GB of RAM is recommended * Ubuntu 16.04 and CentOS 7.x have been tested with ISLE - currently RHELS does not support Docker Community Edition (CE), see Note about Red Hat section below Note about Production Host Storage (optional) While ISLE and its configs, images, software etc are typically cloned to /opt/ISLE and controlled from that location some data can be stored in /var/docker . Please ensure that both the host server's /opt and /var directories are on disks, mounts or storage systems that can accommodate at least 200 GB in size. Some institutions have increased the size of the host server's opt directory by: Potentially increasing the overall size of the host server VM beyond 200GB Attaching separate storage capacity directly to the /opt and /var directories","title":"Host Server Specifications"},{"location":"01_installation_host_server/host_server_system_specifications/#specifications-for-desktop-or-laptops","text":"Desktop: A laptop or workstation running Docker, Docker Compose and ISLE. 8 - 16 GB RAM is recommended Minimum 1 - 2 CPUs (w/ 1 - 4 cores each) 128 - 500GB for the Desktop OS Sufficient HD space to hold a test collection MacOS High Sierra 10.13.x Windows 10 Home or Pro Ubuntu 18.04+ Desktop","title":"Specifications for Desktop or Laptops"},{"location":"01_installation_host_server/host_server_system_specifications/#specifications-for-production-servers","text":"However, if the intent is a new or migrated site that will see actual production use then it is recommended that increased processor speed, memory, and storage space will be required. Server Specifications Ubuntu 18.04 LTS or CentOS 7.x running on a server or VM Minimum 2 CPU's (w/ 1 - 4 cores each) Sufficient HD or attached storage to hold your collection 30 - 50GB for the Server OS & overhead 16 - 32 GB of RAM is recommended * Ubuntu 16.04 and CentOS 7.x have been tested with ISLE - currently RHELS does not support Docker Community Edition (CE), see Note about Red Hat section below","title":"Specifications for Production Servers"},{"location":"01_installation_host_server/host_server_system_specifications/#note-about-production-host-storage-optional","text":"While ISLE and its configs, images, software etc are typically cloned to /opt/ISLE and controlled from that location some data can be stored in /var/docker . Please ensure that both the host server's /opt and /var directories are on disks, mounts or storage systems that can accommodate at least 200 GB in size. Some institutions have increased the size of the host server's opt directory by: Potentially increasing the overall size of the host server VM beyond 200GB Attaching separate storage capacity directly to the /opt and /var directories","title":"Note about Production Host Storage (optional)"},{"location":"01_installation_host_server/install_docker_for_mac/","text":"MacOS desktop version to use: 10.13.x+ This is a detailed operating system-specific guide to setup and install all ISLE pre-requisites on a MacOS local laptop or workstation using Docker for Mac. Called \"the host\" - this is the base computer upon which the entire ISLE stack is built. Please note: This guide is for using Docker for Mac software only on a MacOS system instead of Vagrant or a Virtual Machine (VM). Assumptions / Pre-Requisites Enduser has a local laptop / workstation that conforms to the specifications outlined in the Host Server Specifications Enduser must have administrator rights on the MacOS computer to proceed or the installation will fail. This guide is not intended for production usage. Install process overview Install git Install Docker for Mac Clone the ISLE project repository Pull down the ISLE images from Dockerhub Next steps Step 1: Git Installation In order to get a copy (clone) of the current ISLE project, git will need to be installed. Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people. Open a terminal and enter: git --version . This command will inform the enduser if git is already installed. $git --version git version 2.15.1 If git is not installed, running that previous command may trigger the Install Command Line Developer Tools prompt. If the prompt appears: Click on the blue Install button for the license agreement. Click the white Agree button. The package will take 1-2 minutes to download. Click the Done button once finished. If git is not installed and the prompt doesn't show, then follow one of the recommended methods for installing git in this nice tutorial If git is already installed, then please proceed to the next section. Step 2: Docker for Mac Installation Open a browser and navigate to Docker for Mac Click the Download from Docker Store button in the center of the page Click the blue Get Docker button on the right of the page The Docker.dmg file should start to download. Check your Downloads directory Double-click the Docker.dmg file. The file should open and mount in a new window / prompt. As instructed within the prompt, drag and drop the whale icon to the right towards the Applications directory shortcut, a tiny green plus sign should appear, now let go from the mouse or trackpad. The application should start to copy data to the Applications directory, this process may take 1 - 5 mins depending on the speed of your hard-drive. Launch the Docker application from the Applications directory This process should may take 2 -5 mins depending on the speed of your hard-drive. Once fully started, one can see a whale icon at the top of their screen. If this is clicked, a dropdown should appear indicating that Docker is now running. Please note: This process also installs the newest version of Docker-Compose . (Optional) - Open a terminal and enter docker ps -a , this should return the following: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Step 3: Clone the ISLE repository In this section, the enduser will need to decide on an appropriate area on their laptop to clone the current ISLE project software to. Some endusers create a new directory e.g. Projects or Code within their Documents directory. It is entirely up to the enduser to decide. The steps below are an example. The built-in terminal for MacOs can be found in ~/Applications/Utilities/Terminal Open a terminal cd ~/Documents git clone https://github.com/Islandora-Collaboration-Group/ISLE This process will take 3 - 5 minutes depending on internet bandwidth A new directory ISLE should now be visible. The enduser can check by either: using the Finder application to navigate to this directory Or within the same terminal, enter ls and verifying that ISLE appears in the list. Step 4: Pull down the ISLE images from Dockerhub This process should may take 15 - 60+ mins depending on the speed of your Internet connection. Open a terminal and enter the following command: docker-compose pull Next steps Return to the Install Start Here section for additional instructions.","title":"Docker for Mac Hig Sierra"},{"location":"01_installation_host_server/install_docker_for_mac/#assumptions-pre-requisites","text":"Enduser has a local laptop / workstation that conforms to the specifications outlined in the Host Server Specifications Enduser must have administrator rights on the MacOS computer to proceed or the installation will fail. This guide is not intended for production usage.","title":"Assumptions / Pre-Requisites"},{"location":"01_installation_host_server/install_docker_for_mac/#install-process-overview","text":"Install git Install Docker for Mac Clone the ISLE project repository Pull down the ISLE images from Dockerhub Next steps","title":"Install process overview"},{"location":"01_installation_host_server/install_docker_for_mac/#step-1-git-installation","text":"In order to get a copy (clone) of the current ISLE project, git will need to be installed. Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people. Open a terminal and enter: git --version . This command will inform the enduser if git is already installed. $git --version git version 2.15.1 If git is not installed, running that previous command may trigger the Install Command Line Developer Tools prompt. If the prompt appears: Click on the blue Install button for the license agreement. Click the white Agree button. The package will take 1-2 minutes to download. Click the Done button once finished. If git is not installed and the prompt doesn't show, then follow one of the recommended methods for installing git in this nice tutorial If git is already installed, then please proceed to the next section.","title":"Step 1: Git Installation"},{"location":"01_installation_host_server/install_docker_for_mac/#step-2-docker-for-mac-installation","text":"Open a browser and navigate to Docker for Mac Click the Download from Docker Store button in the center of the page Click the blue Get Docker button on the right of the page The Docker.dmg file should start to download. Check your Downloads directory Double-click the Docker.dmg file. The file should open and mount in a new window / prompt. As instructed within the prompt, drag and drop the whale icon to the right towards the Applications directory shortcut, a tiny green plus sign should appear, now let go from the mouse or trackpad. The application should start to copy data to the Applications directory, this process may take 1 - 5 mins depending on the speed of your hard-drive. Launch the Docker application from the Applications directory This process should may take 2 -5 mins depending on the speed of your hard-drive. Once fully started, one can see a whale icon at the top of their screen. If this is clicked, a dropdown should appear indicating that Docker is now running. Please note: This process also installs the newest version of Docker-Compose . (Optional) - Open a terminal and enter docker ps -a , this should return the following: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES","title":"Step 2: Docker for Mac Installation"},{"location":"01_installation_host_server/install_docker_for_mac/#step-3-clone-the-isle-repository","text":"In this section, the enduser will need to decide on an appropriate area on their laptop to clone the current ISLE project software to. Some endusers create a new directory e.g. Projects or Code within their Documents directory. It is entirely up to the enduser to decide. The steps below are an example. The built-in terminal for MacOs can be found in ~/Applications/Utilities/Terminal Open a terminal cd ~/Documents git clone https://github.com/Islandora-Collaboration-Group/ISLE This process will take 3 - 5 minutes depending on internet bandwidth A new directory ISLE should now be visible. The enduser can check by either: using the Finder application to navigate to this directory Or within the same terminal, enter ls and verifying that ISLE appears in the list.","title":"Step 3: Clone the ISLE repository"},{"location":"01_installation_host_server/install_docker_for_mac/#step-4-pull-down-the-isle-images-from-dockerhub","text":"This process should may take 15 - 60+ mins depending on the speed of your Internet connection. Open a terminal and enter the following command: docker-compose pull","title":"Step 4: Pull down the ISLE images from Dockerhub"},{"location":"01_installation_host_server/install_docker_for_mac/#next-steps","text":"Return to the Install Start Here section for additional instructions.","title":"Next steps"},{"location":"01_installation_host_server/install_docker_for_windows/","text":"Windows desktop version to use: 10 or higher This is a detailed operating system-specific guide to setup and install all ISLE pre-requisites on a Windows 10 local laptop or workstation using Docker for Windows. Called \"the host\" - this is the base computer upon which the entire ISLE stack is built. Please note: This guide is for using Docker for Windows software only on a Windows 10 system instead of Vagrant or a Virtual Machine (VM). The current version of Docker for Windows clashes with Virtualbox. If you with to test ISLE on a Windows 10 computer that must have Virtualbox installed on it, it is suggested that you install ISLE on a guest virtual machine running Centos or Ubuntu . Assumptions / Pre-Requisites Enduser has a local laptop / workstation that conforms to the specifications outlined in the Host Server Specifications Enduser must have administrator rights on the Windows 10 computer to proceed or the installation will fail. This guide is not intended for production usage. Install process overview Install git Install Docker for Windows Clone the ISLE project repository Pull down the ISLE images from Dockerhub Next steps Step 1: Git Installation In order to get a copy (clone) of the current ISLE project, git will need to be installed. Git for Windows is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people. Dowload the installer and run. The installer will prompt for several choices. Generally, you should be okay with defaults except: Change \"use vi\" to either Notepad++ (if installed) or nano. Vi can be difficult to learn and Notepad++ and nano are simpler choices for those unfamiliar with vi. If git is already installed, then please proceed to the next section. Step 2: Docker for Windows Installation Go to https://store.docker.com/editions/community/docker-ce-desktop-windows Choose the \"Get Docker CE for Windows (stable)\" link to download the installer. You may need to create an account on Docker.com to continue. Run the installer and follow the prompts. The default settings should be okay. You will be required to logout when the installation is complete. After logging back in, Docker will run automatically. If you are asked to enable Hyper-V and Containers, click to continue. Your system will reboot after a few minutes. Once fully started, one can see a whale icon in the notification area. If you are prompted to log in to Docker, you can choose to do so with your Docker.com account information, or you can simply close the window. Docker is running and you do not need to log in to use it. Please note: This process also installs the newest version of Docker-Compose . Step 3: Clone the ISLE repository In this section, the enduser will need to decide on an appropriate area on their laptop to clone the current ISLE project software to. Some endusers create a new directory e.g. Projects or Code within their Documents directory. It is entirely up to the enduser to decide. In the steps below, we will create a directory called ISLE in Documents . Please note: Windows PowerShell is already installed on Windows 10. Launch PowerShell Click on the Windows/Start icon and start typing \"powershell\". The icon for PowerShell will appear in the menu. Double-click the icon to start. cd ~\\Documents git clone https://github.com/Islandora-Collaboration-Group/ISLE.git This process will take 3 - 5 minutes depending on internet bandwidth A new directory ISLE should now be visible. The enduser can check by either: using the File Explorer application to navigate to this directory Or within the same terminal, enter ls and verifying that ISLE appears in the list. In the ISLE directory, find the file called .env (You may have to have Windows 10 show file extenions by following these steps ) and open it in Notepad. Find the following line # COMPOSE_CONVERT_WINDOWS_PATHS=1 Delete the # and save the file. Step 4: Pull down the ISLE images from Dockerhub This process should may take 15 - 60+ mins depending on the speed of your Internet connection. In PowerShell enter the following commands, one at a time: cd ~\\Documents\\ISLE docker-compose up -d If you are prompted by Docker to share your drive, choose Share. You may need to enter your password as well. Next steps Return to the Install Start Here section for additional instructions or set up a test version of ISLE .","title":"Docker for Windows 10"},{"location":"01_installation_host_server/install_docker_for_windows/#assumptions-pre-requisites","text":"Enduser has a local laptop / workstation that conforms to the specifications outlined in the Host Server Specifications Enduser must have administrator rights on the Windows 10 computer to proceed or the installation will fail. This guide is not intended for production usage.","title":"Assumptions / Pre-Requisites"},{"location":"01_installation_host_server/install_docker_for_windows/#install-process-overview","text":"Install git Install Docker for Windows Clone the ISLE project repository Pull down the ISLE images from Dockerhub Next steps","title":"Install process overview"},{"location":"01_installation_host_server/install_docker_for_windows/#step-1-git-installation","text":"In order to get a copy (clone) of the current ISLE project, git will need to be installed. Git for Windows is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people. Dowload the installer and run. The installer will prompt for several choices. Generally, you should be okay with defaults except: Change \"use vi\" to either Notepad++ (if installed) or nano. Vi can be difficult to learn and Notepad++ and nano are simpler choices for those unfamiliar with vi. If git is already installed, then please proceed to the next section.","title":"Step 1: Git Installation"},{"location":"01_installation_host_server/install_docker_for_windows/#step-2-docker-for-windows-installation","text":"Go to https://store.docker.com/editions/community/docker-ce-desktop-windows Choose the \"Get Docker CE for Windows (stable)\" link to download the installer. You may need to create an account on Docker.com to continue. Run the installer and follow the prompts. The default settings should be okay. You will be required to logout when the installation is complete. After logging back in, Docker will run automatically. If you are asked to enable Hyper-V and Containers, click to continue. Your system will reboot after a few minutes. Once fully started, one can see a whale icon in the notification area. If you are prompted to log in to Docker, you can choose to do so with your Docker.com account information, or you can simply close the window. Docker is running and you do not need to log in to use it. Please note: This process also installs the newest version of Docker-Compose .","title":"Step 2: Docker for Windows Installation"},{"location":"01_installation_host_server/install_docker_for_windows/#step-3-clone-the-isle-repository","text":"In this section, the enduser will need to decide on an appropriate area on their laptop to clone the current ISLE project software to. Some endusers create a new directory e.g. Projects or Code within their Documents directory. It is entirely up to the enduser to decide. In the steps below, we will create a directory called ISLE in Documents . Please note: Windows PowerShell is already installed on Windows 10. Launch PowerShell Click on the Windows/Start icon and start typing \"powershell\". The icon for PowerShell will appear in the menu. Double-click the icon to start. cd ~\\Documents git clone https://github.com/Islandora-Collaboration-Group/ISLE.git This process will take 3 - 5 minutes depending on internet bandwidth A new directory ISLE should now be visible. The enduser can check by either: using the File Explorer application to navigate to this directory Or within the same terminal, enter ls and verifying that ISLE appears in the list. In the ISLE directory, find the file called .env (You may have to have Windows 10 show file extenions by following these steps ) and open it in Notepad. Find the following line # COMPOSE_CONVERT_WINDOWS_PATHS=1 Delete the # and save the file.","title":"Step 3: Clone the ISLE repository"},{"location":"01_installation_host_server/install_docker_for_windows/#step-4-pull-down-the-isle-images-from-dockerhub","text":"This process should may take 15 - 60+ mins depending on the speed of your Internet connection. In PowerShell enter the following commands, one at a time: cd ~\\Documents\\ISLE docker-compose up -d If you are prompted by Docker to share your drive, choose Share. You may need to enter your password as well.","title":"Step 4: Pull down the ISLE images from Dockerhub"},{"location":"01_installation_host_server/install_docker_for_windows/#next-steps","text":"Return to the Install Start Here section for additional instructions or set up a test version of ISLE .","title":"Next steps"},{"location":"01_installation_host_server/install_macos_vagrant/","text":"Install ISLE on a Mac with Vagrant PLEASE NOTE Installing ISLE on a Mac using Docker is simpler and can be done on a less powerful laptop or workstation. Support for installing ISLE on a Mac with Vagrant is deprecated. MacOS desktop version to use: 10.13.x+ This is a detailed operating system-specific guide to setup and install all ISLE pre-requisites on a MacOS local laptop or workstation using Vagrant and VirtualBox. Please note: This guide is for using Vagrant / Virtualbox software only on a MacOS system instead of Docker for Mac . Assumptions / Pre-Requisites Enduser has a local laptop / workstation that conforms to the specifications outlined in the Host Server Specifications Enduser must have administrator rights on the MacOS computer to proceed or the installation will fail. This guide is not intended for production usage. Install process overview Install git Install VirtualBox Install VirtualBox Extensions Install Vagrant Install Vagrant plugin Clone the ISLE project repository Start the ISLE Host VM (using vagrant) Next steps Step 1: Git Installation In order to get a copy (clone) of the current ISLE project, git will need to be installed. Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people. Open a terminal and enter: git --version . This command will inform the enduser if git is already installed. $git --version git version 2.15.1 If git is not installed, running that previous command may trigger the Install Command Line Developer Tools prompt. If the prompt appears: Click on the blue Install button for the license agreement. Click the white Agree button. The package will take 1-2 minutes to download. Click the Done button once finished. If git is not installed and the prompt doesn't show, then follow one of the recommended methods for installing git in this nice tutorial . If git is already installed, then please proceed to the next section. Step 2: VirtualBox Installation VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. Go to https://www.virtualbox.org/wiki/Downloads to download and install the latest platform package for OS X hosts. Step 3: VirtualBox Extensions for VirtualBox Installation Return to https://www.virtualbox.org/wiki/Downloads to download the latest version. Click on the Oracle VM VirtualBox Extension Pack All supported platforms link to start. Once the Oracle_VM_VirtualBox_Extension_Pack-x.x.xxx.vbox-extpack download has completed, open the download folder and double click on the file. Follow the prompts to install the Extension Pack. Step 4: Vagrant Installation Vagrant is a tool for building and managing virtual machine environments in a single workflow. Endusers can read more here Go to https://www.vagrantup.com/downloads.html to download and install the latest version for Mac OS X. Step 5: Vagrant Plugin Installation Open a terminal and enter the following: vagrant plugin install vagrant-hostsupdater This process should take 10 - 30 seconds depending on Internet speed Example vagrant plugin install vagrant-hostsupdater Installing the 'vagrant-hostsupdater' plugin. This can take a few minutes... Installed the plugin 'vagrant-hostsupdater (1.0.2)'! Step 6: Clone the ISLE repository In this section, the enduser will need to decide on an appropriate area on their laptop to clone the current ISLE project software to. Some endusers create a new directory e.g. Projects or Code within their Documents directory. It is entirely up to the enduser to decide. The steps below are an example and will install ISLE in ~/Documents/ISLE . The built-in terminal for MacOs can be found in ~/Applications/Utilities/Terminal Open a terminal cd ~/Documents git clone https://github.com/Islandora-Collaboration-Group/ISLE This process will take 3 - 5 minutes depending on internet bandwidth A new directory ISLE should now be visible. The enduser can check by either: using the Finder application to navigate to this directory Or within the same terminal, enter ls -lha Step 7: Start the ISLE Host Vagrant VM and ssh in Endusers have a choice of using a CentOS or Ubuntu Vagrant VM. Within the ISLE/vagrant directory, there are two child directories: CentOS - contains a Vagrantfile configured for a CentOS 7.x+ server with the IP of 10.10.10.30 Ubuntu - contains a Vagrantfile configured for a CentOS 7.x+ server with the IP of 10.10.10.30 Open a terminal and enter the following: cd ~/path_to/ISLE/vagrant/ vagrant up This process should start the ISLE Host Vagrant VM and should take anywhere from 10 - 20 minutes for the software ( Vagrant box ) to download and start. Once this process finishes and the ISLE Host Vagrant VM is running. The enduser should enter in the terminal: vagrant ssh This command shells in the vagrant user to the ISLE Host. Next steps Return to the Install Start Here section for additional instructions.","title":"Vagrant & VirtualBox on MacOS (Deprecated)"},{"location":"01_installation_host_server/install_macos_vagrant/#install-isle-on-a-mac-with-vagrant","text":"PLEASE NOTE Installing ISLE on a Mac using Docker is simpler and can be done on a less powerful laptop or workstation. Support for installing ISLE on a Mac with Vagrant is deprecated. MacOS desktop version to use: 10.13.x+ This is a detailed operating system-specific guide to setup and install all ISLE pre-requisites on a MacOS local laptop or workstation using Vagrant and VirtualBox. Please note: This guide is for using Vagrant / Virtualbox software only on a MacOS system instead of Docker for Mac .","title":"Install ISLE on a Mac with Vagrant"},{"location":"01_installation_host_server/install_macos_vagrant/#assumptions-pre-requisites","text":"Enduser has a local laptop / workstation that conforms to the specifications outlined in the Host Server Specifications Enduser must have administrator rights on the MacOS computer to proceed or the installation will fail. This guide is not intended for production usage.","title":"Assumptions / Pre-Requisites"},{"location":"01_installation_host_server/install_macos_vagrant/#install-process-overview","text":"Install git Install VirtualBox Install VirtualBox Extensions Install Vagrant Install Vagrant plugin Clone the ISLE project repository Start the ISLE Host VM (using vagrant) Next steps","title":"Install process overview"},{"location":"01_installation_host_server/install_macos_vagrant/#step-1-git-installation","text":"In order to get a copy (clone) of the current ISLE project, git will need to be installed. Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people. Open a terminal and enter: git --version . This command will inform the enduser if git is already installed. $git --version git version 2.15.1 If git is not installed, running that previous command may trigger the Install Command Line Developer Tools prompt. If the prompt appears: Click on the blue Install button for the license agreement. Click the white Agree button. The package will take 1-2 minutes to download. Click the Done button once finished. If git is not installed and the prompt doesn't show, then follow one of the recommended methods for installing git in this nice tutorial . If git is already installed, then please proceed to the next section.","title":"Step 1: Git Installation"},{"location":"01_installation_host_server/install_macos_vagrant/#step-2-virtualbox-installation","text":"VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. Go to https://www.virtualbox.org/wiki/Downloads to download and install the latest platform package for OS X hosts.","title":"Step 2: VirtualBox Installation"},{"location":"01_installation_host_server/install_macos_vagrant/#step-3-virtualbox-extensions-for-virtualbox-installation","text":"Return to https://www.virtualbox.org/wiki/Downloads to download the latest version. Click on the Oracle VM VirtualBox Extension Pack All supported platforms link to start. Once the Oracle_VM_VirtualBox_Extension_Pack-x.x.xxx.vbox-extpack download has completed, open the download folder and double click on the file. Follow the prompts to install the Extension Pack.","title":"Step 3: VirtualBox Extensions for VirtualBox Installation"},{"location":"01_installation_host_server/install_macos_vagrant/#step-4-vagrant-installation","text":"Vagrant is a tool for building and managing virtual machine environments in a single workflow. Endusers can read more here Go to https://www.vagrantup.com/downloads.html to download and install the latest version for Mac OS X.","title":"Step 4: Vagrant Installation"},{"location":"01_installation_host_server/install_macos_vagrant/#step-5-vagrant-plugin-installation","text":"Open a terminal and enter the following: vagrant plugin install vagrant-hostsupdater This process should take 10 - 30 seconds depending on Internet speed Example vagrant plugin install vagrant-hostsupdater Installing the 'vagrant-hostsupdater' plugin. This can take a few minutes... Installed the plugin 'vagrant-hostsupdater (1.0.2)'!","title":"Step 5: Vagrant Plugin Installation"},{"location":"01_installation_host_server/install_macos_vagrant/#step-6-clone-the-isle-repository","text":"In this section, the enduser will need to decide on an appropriate area on their laptop to clone the current ISLE project software to. Some endusers create a new directory e.g. Projects or Code within their Documents directory. It is entirely up to the enduser to decide. The steps below are an example and will install ISLE in ~/Documents/ISLE . The built-in terminal for MacOs can be found in ~/Applications/Utilities/Terminal Open a terminal cd ~/Documents git clone https://github.com/Islandora-Collaboration-Group/ISLE This process will take 3 - 5 minutes depending on internet bandwidth A new directory ISLE should now be visible. The enduser can check by either: using the Finder application to navigate to this directory Or within the same terminal, enter ls -lha","title":"Step 6: Clone the ISLE repository"},{"location":"01_installation_host_server/install_macos_vagrant/#step-7-start-the-isle-host-vagrant-vm-and-ssh-in","text":"Endusers have a choice of using a CentOS or Ubuntu Vagrant VM. Within the ISLE/vagrant directory, there are two child directories: CentOS - contains a Vagrantfile configured for a CentOS 7.x+ server with the IP of 10.10.10.30 Ubuntu - contains a Vagrantfile configured for a CentOS 7.x+ server with the IP of 10.10.10.30 Open a terminal and enter the following: cd ~/path_to/ISLE/vagrant/ vagrant up This process should start the ISLE Host Vagrant VM and should take anywhere from 10 - 20 minutes for the software ( Vagrant box ) to download and start. Once this process finishes and the ISLE Host Vagrant VM is running. The enduser should enter in the terminal: vagrant ssh This command shells in the vagrant user to the ISLE Host.","title":"Step 7: Start the ISLE Host Vagrant VM and ssh in"},{"location":"01_installation_host_server/install_macos_vagrant/#next-steps","text":"Return to the Install Start Here section for additional instructions.","title":"Next steps"},{"location":"01_installation_host_server/install_on_centos/","text":"CentOS server version to use: 7.x+ This is a detailed operating system-specific guide including commands to copy/paste for all the software you may need to run ISLE on a CentOS ISLE Host Server. Called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a laptop or a server you connected to via ssh. The following setup will be the same if you are setting up an ISLE host server: on your laptop / desktop using Vagrant or Virtualbox VM for the test site (isle.localdomain). or using a physical server or cloud hosted setup e.g. (AWS or GCP) to run an ISLE Host server for a new site or a migrated site. In all these cases you'll be establishing a CentOS server with the following dependencies below. Install process overview Install server prerequisites Install Docker Create islandora user and group Setup SSH access for islandora user on VM / server (Part 1) (optional) Create ssh keys on enduser's laptop / workstation Setup SSH access for islandora user on VM / server (Part 2) (optional) Create ssh keys on enduser's laptop / workstation Create Docker group Add islandora user to wheel group Install Docker-Compose (optional) Alternative install method for Docker-compose Start up and enable Docker Clone ISLE repository Next steps Step 1: Install server prerequisites Open a terminal on your local laptop or workstation and ssh to the CentOS server / VM: You need to become root first sudo su Add the RHEL/CENTOS epel-release package repository first yum install -y epel-release Install the following: yum install -y openssl git htop ntp wget curl nano Step 2: Install Docker yum install -y yum-utils device-mapper-persistent-data lvm2 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum install -y docker-ce Step 3: Create islandora user and group groupadd -g 10000 islandora useradd -m -d /home/islandora -s /bin/bash -u 10000 -g 10000 islandora passwd <somepassword> Please change <somepassword> to something else. Enter <somepassword> for password Re-enter <somepassword> to confirm Add islandora user to sudoers echo \"islandora ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/islandora Step 4a: Setup SSH access for islandora user on VM / server (Part 1) Create a ssh key for the islandora user (this will also enable us to push code out to a repository later) mkdir -p /home/islandora/.ssh chmod -Rv 700 /home/islandora/.ssh chown -Rv islandora:islandora /home/islandora/.ssh cd /home/islandora/.ssh su islandora ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Follow the prompts to save your key. You do not need to specify a password to secure your key in development; in production you must protect your keys with strong passwords. Hit the Enter / Return key at all of the prompts. There should be no need to enter a file name. (However some users may find when prompted they may need to enter: id_rsa ) Do not enter a passphrase when asked twice, simply hit the Enter / Return key and move on. Example Output ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Generating public/private rsa key pair. Enter file in which to save the key (/home/islandora/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/islandora/.ssh/id_rsa. Your public key has been saved in /home/islandora/.ssh/id_rsa.pub. The key fingerprint is: SHA256:rTCG6wCablwrIkQTGcrcaChmTZEYAwNrNBLNxLIds+I islandora@isle-host-macos The key's randomart image is: +---[RSA 2048]----+ |O%*oo | |O*&. | |=%.* | |Ooo . . | |+.. . + S . | |.E . o o . | |= o o . | |++ + | |+.. . | +----[SHA256]-----+ If you would like to login to the host machine using key-pairs, please ensure the following first. Check if your laptop / workstation has existing ssh keys. If you do not know, use the Create ssh keys on enduser's laptop / workstation (optional) section below before advancing to Part 2 . If you already have existing SSH keys, move onto the Setup SSH access for islandora user on VM / server (Part 2) section. (optional) Create ssh keys on enduser's laptop / workstation Some endusers may or may not have created local SSH keys on their laptop or workstation prior to the next step. Please use the instructions below if this is the case. Creating ssh keys on MacOS High Sierra Creating ssh keys on Windows 10 Creating ssh keys on Ubuntu Desktop 16.04 Step 4b: Setup SSH access for islandora user on VM / server (Part 2) If you would like to login to the host machine using key-pairs, continued from (Part 1) . Copy in the existing ssh key from the enduser's laptop /workstation. This is entirely dependent on the local computer being used to connect to the Islandora server. In some cases, cloud hosting based servers e.g. Google Cloud Platform may have different requirements. This will allow key based ssh access for the enduser. Enduser's laptop /workstation running MacOS example : * Open a terminal and enter: `cat /Users/enduser/.ssh/id_rsa.pub` & copy the key to the clipboard. (_On the enduser laptop not the VM_) Enduser's laptop /workstation running Windows example : Open the Command Prompt application and enter notepad C:\\Users\\enduser\\.ssh\\id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Ubuntu Desktop example : * Open a terminal and enter: `cat /home/enduser/.ssh/id_rsa.pub` & copy the key to the clipboard. (_On the enduser laptop not the VM_) For all OS types, copy and paste this value exactly into the /home/islandora/.ssh/authorized_keys file using the nano tool on the CentOS VM ( On the CentOS VM not the enduser laptop ) nano /home/islandora/.ssh/authorized_keys Hit the Cntrl key and then the o key to write to the file. Hi the Cntrl key and then the x key to exit the file. Exit out of the ssh session from the host server as the root user exit ssh back in as islandora to test if that process worked. Example ssh islandora@isle-host-server.com -or- ssh islandora@10.10.10.130 (optional) Note for Vagrant and local VM users only For local VM and Vagrant users only, not steps to follow in a production environment Should the enduser have difficulty adding the .ssh key for the islandora user or if the enduser doesn't even have a local id_rsa.pub file, that step above can be avoided. Simply continue to access the local ISLE Host VM via opening a terminal on the enduser laptop or workstation. cd /pathto/ISLE/vagrant/ vagrant ssh sudo su su islandora This process will switch one to islandora with out having to use a password. Step 5: Create Docker group Open a terminal and ssh back into the CentOS Host Server/VM as the islandora user and become root again. sudo su Create the Docker group. ( You may receive a notice that group docker already exist. This fine. Proceed with instructions. ) groupadd docker Add the islandora user to the new docker group usermod -aG docker islandora Step 6: Add islandora user to wheel group usermod -aG wheel islandora Step 7: Install Docker-Compose Copy and paste the command below curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose Test the Installation docker-compose --version Example output: docker-compose version 1.20.1, build 1719ceb (optional) Alternative install method for Docker-compose In case the commands in the steps above fail, please use this alternative install. As always, ensure you're the root user. sudo su Install Python Pip (package manager for Python Scripting Language) yum install -y python-pip Upgrade Python to latest version yum upgrade python* Upgrade Python Pip pip install --upgrade pip Install Docker compose pip install docker-compose Step 8: Start up and enable Docker Enable the Docker service to start on host server boot systemctl enable docker.service Start the Docker service systemctl start docker Step 9: Clone ISLE repository Please note: In some Linux Distributions, one might need to create the /opt directory (optional) One can ls -lha / to see if an /opt directory exists If missing, mkdir /opt If not missing, proceed to next step. cd /opt git clone https://github.com/Islandora-Collaboration-Group/ISLE.git This process will take 2 - 4 minutes depending on internet bandwidth chown -Rv islandora:islandora ISLE cd /opt/ISLE Next steps Return to the Install Start Here section for additional instructions.","title":"CentOS 7.x"},{"location":"01_installation_host_server/install_on_centos/#install-process-overview","text":"Install server prerequisites Install Docker Create islandora user and group Setup SSH access for islandora user on VM / server (Part 1) (optional) Create ssh keys on enduser's laptop / workstation Setup SSH access for islandora user on VM / server (Part 2) (optional) Create ssh keys on enduser's laptop / workstation Create Docker group Add islandora user to wheel group Install Docker-Compose (optional) Alternative install method for Docker-compose Start up and enable Docker Clone ISLE repository Next steps","title":"Install process overview"},{"location":"01_installation_host_server/install_on_centos/#step-1-install-server-prerequisites","text":"Open a terminal on your local laptop or workstation and ssh to the CentOS server / VM: You need to become root first sudo su Add the RHEL/CENTOS epel-release package repository first yum install -y epel-release Install the following: yum install -y openssl git htop ntp wget curl nano","title":"Step 1: Install server prerequisites"},{"location":"01_installation_host_server/install_on_centos/#step-2-install-docker","text":"yum install -y yum-utils device-mapper-persistent-data lvm2 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum install -y docker-ce","title":"Step 2: Install Docker"},{"location":"01_installation_host_server/install_on_centos/#step-3-create-islandora-user-and-group","text":"groupadd -g 10000 islandora useradd -m -d /home/islandora -s /bin/bash -u 10000 -g 10000 islandora passwd <somepassword> Please change <somepassword> to something else. Enter <somepassword> for password Re-enter <somepassword> to confirm Add islandora user to sudoers echo \"islandora ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/islandora","title":"Step 3: Create islandora user and group"},{"location":"01_installation_host_server/install_on_centos/#step-4a-setup-ssh-access-for-islandora-user-on-vm-server-part-1","text":"Create a ssh key for the islandora user (this will also enable us to push code out to a repository later) mkdir -p /home/islandora/.ssh chmod -Rv 700 /home/islandora/.ssh chown -Rv islandora:islandora /home/islandora/.ssh cd /home/islandora/.ssh su islandora ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Follow the prompts to save your key. You do not need to specify a password to secure your key in development; in production you must protect your keys with strong passwords. Hit the Enter / Return key at all of the prompts. There should be no need to enter a file name. (However some users may find when prompted they may need to enter: id_rsa ) Do not enter a passphrase when asked twice, simply hit the Enter / Return key and move on. Example Output ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Generating public/private rsa key pair. Enter file in which to save the key (/home/islandora/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/islandora/.ssh/id_rsa. Your public key has been saved in /home/islandora/.ssh/id_rsa.pub. The key fingerprint is: SHA256:rTCG6wCablwrIkQTGcrcaChmTZEYAwNrNBLNxLIds+I islandora@isle-host-macos The key's randomart image is: +---[RSA 2048]----+ |O%*oo | |O*&. | |=%.* | |Ooo . . | |+.. . + S . | |.E . o o . | |= o o . | |++ + | |+.. . | +----[SHA256]-----+ If you would like to login to the host machine using key-pairs, please ensure the following first. Check if your laptop / workstation has existing ssh keys. If you do not know, use the Create ssh keys on enduser's laptop / workstation (optional) section below before advancing to Part 2 . If you already have existing SSH keys, move onto the Setup SSH access for islandora user on VM / server (Part 2) section.","title":"Step 4a: Setup SSH access for islandora user on VM / server (Part 1)"},{"location":"01_installation_host_server/install_on_centos/#optional-create-ssh-keys-on-endusers-laptop-workstation","text":"Some endusers may or may not have created local SSH keys on their laptop or workstation prior to the next step. Please use the instructions below if this is the case. Creating ssh keys on MacOS High Sierra Creating ssh keys on Windows 10 Creating ssh keys on Ubuntu Desktop 16.04","title":"(optional) Create ssh keys on enduser's laptop / workstation"},{"location":"01_installation_host_server/install_on_centos/#step-4b-setup-ssh-access-for-islandora-user-on-vm-server-part-2","text":"If you would like to login to the host machine using key-pairs, continued from (Part 1) . Copy in the existing ssh key from the enduser's laptop /workstation. This is entirely dependent on the local computer being used to connect to the Islandora server. In some cases, cloud hosting based servers e.g. Google Cloud Platform may have different requirements. This will allow key based ssh access for the enduser. Enduser's laptop /workstation running MacOS example : * Open a terminal and enter: `cat /Users/enduser/.ssh/id_rsa.pub` & copy the key to the clipboard. (_On the enduser laptop not the VM_) Enduser's laptop /workstation running Windows example : Open the Command Prompt application and enter notepad C:\\Users\\enduser\\.ssh\\id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Ubuntu Desktop example : * Open a terminal and enter: `cat /home/enduser/.ssh/id_rsa.pub` & copy the key to the clipboard. (_On the enduser laptop not the VM_) For all OS types, copy and paste this value exactly into the /home/islandora/.ssh/authorized_keys file using the nano tool on the CentOS VM ( On the CentOS VM not the enduser laptop ) nano /home/islandora/.ssh/authorized_keys Hit the Cntrl key and then the o key to write to the file. Hi the Cntrl key and then the x key to exit the file. Exit out of the ssh session from the host server as the root user exit ssh back in as islandora to test if that process worked. Example ssh islandora@isle-host-server.com -or- ssh islandora@10.10.10.130","title":"Step 4b: Setup SSH access for islandora user on VM / server (Part 2)"},{"location":"01_installation_host_server/install_on_centos/#optional-note-for-vagrant-and-local-vm-users-only","text":"For local VM and Vagrant users only, not steps to follow in a production environment Should the enduser have difficulty adding the .ssh key for the islandora user or if the enduser doesn't even have a local id_rsa.pub file, that step above can be avoided. Simply continue to access the local ISLE Host VM via opening a terminal on the enduser laptop or workstation. cd /pathto/ISLE/vagrant/ vagrant ssh sudo su su islandora This process will switch one to islandora with out having to use a password.","title":"(optional) Note for Vagrant and local VM users only"},{"location":"01_installation_host_server/install_on_centos/#step-5-create-docker-group","text":"Open a terminal and ssh back into the CentOS Host Server/VM as the islandora user and become root again. sudo su Create the Docker group. ( You may receive a notice that group docker already exist. This fine. Proceed with instructions. ) groupadd docker Add the islandora user to the new docker group usermod -aG docker islandora","title":"Step 5: Create Docker group"},{"location":"01_installation_host_server/install_on_centos/#step-6-add-islandora-user-to-wheel-group","text":"usermod -aG wheel islandora","title":"Step 6: Add islandora user to wheel group"},{"location":"01_installation_host_server/install_on_centos/#step-7-install-docker-compose","text":"Copy and paste the command below curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose Test the Installation docker-compose --version Example output: docker-compose version 1.20.1, build 1719ceb","title":"Step 7: Install Docker-Compose"},{"location":"01_installation_host_server/install_on_centos/#optional-alternative-install-method-for-docker-compose","text":"In case the commands in the steps above fail, please use this alternative install. As always, ensure you're the root user. sudo su Install Python Pip (package manager for Python Scripting Language) yum install -y python-pip Upgrade Python to latest version yum upgrade python* Upgrade Python Pip pip install --upgrade pip Install Docker compose pip install docker-compose","title":"(optional) Alternative install method for Docker-compose"},{"location":"01_installation_host_server/install_on_centos/#step-8-start-up-and-enable-docker","text":"Enable the Docker service to start on host server boot systemctl enable docker.service Start the Docker service systemctl start docker","title":"Step 8: Start up and enable Docker"},{"location":"01_installation_host_server/install_on_centos/#step-9-clone-isle-repository","text":"Please note: In some Linux Distributions, one might need to create the /opt directory (optional) One can ls -lha / to see if an /opt directory exists If missing, mkdir /opt If not missing, proceed to next step. cd /opt git clone https://github.com/Islandora-Collaboration-Group/ISLE.git This process will take 2 - 4 minutes depending on internet bandwidth chown -Rv islandora:islandora ISLE cd /opt/ISLE","title":"Step 9: Clone ISLE repository"},{"location":"01_installation_host_server/install_on_centos/#next-steps","text":"Return to the Install Start Here section for additional instructions.","title":"Next steps"},{"location":"01_installation_host_server/install_on_ubuntu/","text":"Ubuntu server version to use: 16.04 LTS This is a detailed operating system-specific guide including commands to copy/paste for all the software you may need to run ISLE on a Ubuntu ISLE Host Server. Called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a laptop or a server you connected to via ssh. The following setup will be the same if you are setting up an ISLE host server: on your laptop / desktop using Vagrant or Virtualbox VM for the test site (isle.localdomain). or using a physical server or cloud hosted setup e.g. (AWS or GCP) to run an ISLE Host server for a new site or a migrated site. In all these cases you'll be establishing a Ubuntu server with the following dependencies below. Install process overview Install server prerequisites Install Docker Create islandora user and group Setup SSH access for islandora user on VM / server (Part 1) (optional) Create ssh keys on enduser's laptop / workstation Setup SSH access for islandora user on VM / server (Part 2) (optional) Create ssh keys on enduser's laptop / workstation Create Docker group Add islandora user to wheel group Install Docker-Compose (optional) Alternative install method for Docker-compose Clone ISLE repository Next steps Step 1: Install server prerequisites Open a terminal on your local laptop or workstation and ssh to the CentOS server / VM: You need to become root first If you are not already root, use either sudo -s or sudo su to become root. Install the following: apt-get update apt-get upgrade apt-get install -y openssl git htop ntp wget curl nano apt-transport-https ca-certificates software-properties-common Step 2: Install Docker curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" apt-get update apt-get install -y docker-ce Check if Docker is running systemctl status docker Step 3: Create islandora user and group groupadd -g 10000 islandora useradd -m -d /home/islandora -s /bin/bash -u 10000 -g 10000 islandora passwd <somepassword> Please change <somepassword> to something else. Enter <somepassword> for password Re-enter <somepassword> to confirm Add islandora user to sudoers echo \"islandora ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/islandora Step 4a: Setup SSH access for islandora user on VM / server (Part 1) Create a ssh key for the islandora user (this will also enable us to push code out to a repository later) mkdir -p /home/islandora/.ssh chmod -Rv 700 /home/islandora/.ssh chown -Rv islandora:islandora /home/islandora/.ssh cd /home/islandora/.ssh su islandora ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Follow the prompts to save your key. You do not need to specify a password to secure your key in development; in production you must protect your keys with strong passwords. Hit the Enter / Return key at all of the prompts. There should be no need to enter a file name. (However some users may find when prompted they may need to enter: id_rsa ) Do not enter a passphrase when asked twice, simply hit the Enter / Return key and move on. Example Output ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Generating public/private rsa key pair. Enter file in which to save the key (/home/islandora/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/islandora/.ssh/id_rsa. Your public key has been saved in /home/islandora/.ssh/id_rsa.pub. The key fingerprint is: SHA256:rTCG6wCablwrIkQTGcrcaChmTZEYAwNrNBLNxLIds+I islandora@isle-host-macos The key's randomart image is: +---[RSA 2048]----+ |O%*oo | |O*&. | |=%.* | |Ooo . . | |+.. . + S . | |.E . o o . | |= o o . | |++ + | |+.. . | +----[SHA256]-----+ If you would like to login to the host machine using key-pairs, please ensure the following first. Check if your laptop / workstation has existing ssh keys. If you do not know, use the Create ssh keys on enduser's laptop / workstation (optional) section below before advancing to Part 2 . If you already have existing SSH keys, move onto the Setup SSH access for islandora user on VM / server (Part 2) section. (optional) Create ssh keys on enduser's laptop / workstation Some endusers may or may not have created local SSH keys on their laptop or workstation prior to the next step. Please use the instructions below if this is the case. Creating ssh keys on MacOS High Sierra Creating ssh keys on Windows 10 Creating ssh keys on Ubuntu Desktop 16.04 Step 4b: Setup SSH access for islandora user on VM / server (Part 2) If you would like to login to the host machine using key-pairs, continued from (Part 1) . Copy in the existing ssh key from the enduser's laptop /workstation. This is entirely dependent on the local computer being used to connect to the Islandora server. In some cases, cloud hosting based servers e.g. Google Cloud Platform may have different requirements. This will allow key based ssh access for the enduser. Enduser's laptop /workstation running MacOS example : Open a terminal and enter: cat /Users/enduser/.ssh/id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Windows example : Open the Command Prompt application and enter notepad C:\\Users\\enduser\\.ssh\\id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Ubuntu Desktop example : Open a terminal and enter: cat /home/enduser/.ssh/id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) For all OS types, copy and paste this value exactly into the /home/islandora/.ssh/authorized_keys file using the nano tool on the CentOS VM ( On the CentOS VM not the enduser laptop ) nano /home/islandora/.ssh/authorized_keys Hit the Cntrl key and then the o key to write to the file. Hi the Cntrl key and then the x key to exit the file. Exit out of the ssh session from the host server as the root user exit ssh back in as islandora to test if that process worked. Example ssh islandora@isle-host-server.com -or- ssh islandora@10.10.10.130 (optional) Note for Vagrant and local VM users only For local VM and Vagrant users only, not steps to follow in a production environment Should the enduser have difficulty adding the .ssh key for the islandora user or if the enduser doesn't even have a local id_rsa.pub file, that step above can be avoided. Simply continue to access the local ISLE Host VM via opening a terminal on the enduser laptop or workstation. cd /pathto/ISLE/vagrant/ vagrant ssh sudo su su islandora This process will switch one to islandora with out having to use a password. Step 5: Create Docker group Open a terminal and ssh back into the CentOS Host Server/VM as the islandora user and become root again. sudo su Create the Docker group. ( You may receive a notice that group docker already exist. This fine. Proceed with instructions. ) groupadd docker Add the islandora user to the new docker group usermod -aG docker islandora Step 6: Add islandora user to wheel group usermod -aG wheel islandora Step 7: Install Docker-Compose Copy and paste the command below curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose Test the Installation docker-compose --version Example output: docker-compose version 1.20.1, build 1719ceb (optional) Alternative install method for Docker-compose In case the commands in the steps above fail, please use this alternative install. As always, ensure you're the root user. sudo su Install Python Pip (package manager for Python Scripting Language) apt-get install -y python-pip Upgrade Python to latest version apt-get upgrade python* Upgrade Python Pip pip install --upgrade pip Install Docker compose pip install docker-compose Step 8: Clone ISLE repository Please note: In some Linux Distributions, one might need to create the /opt directory (optional) One can ls -lha / to see if an /opt directory exists If missing, mkdir /opt If not missing, proceed to next step. cd /opt git clone https://github.com/Islandora-Collaboration-Group/ISLE.git This process will take 2 - 4 minutes depending on internet bandwidth chown -Rv islandora:islandora ISLE cd /opt/ISLE Next steps Return to the Install Start Here section for additional instructions.","title":"Install on ubuntu"},{"location":"01_installation_host_server/install_on_ubuntu/#install-process-overview","text":"Install server prerequisites Install Docker Create islandora user and group Setup SSH access for islandora user on VM / server (Part 1) (optional) Create ssh keys on enduser's laptop / workstation Setup SSH access for islandora user on VM / server (Part 2) (optional) Create ssh keys on enduser's laptop / workstation Create Docker group Add islandora user to wheel group Install Docker-Compose (optional) Alternative install method for Docker-compose Clone ISLE repository Next steps","title":"Install process overview"},{"location":"01_installation_host_server/install_on_ubuntu/#step-1-install-server-prerequisites","text":"Open a terminal on your local laptop or workstation and ssh to the CentOS server / VM: You need to become root first If you are not already root, use either sudo -s or sudo su to become root. Install the following: apt-get update apt-get upgrade apt-get install -y openssl git htop ntp wget curl nano apt-transport-https ca-certificates software-properties-common","title":"Step 1: Install server prerequisites"},{"location":"01_installation_host_server/install_on_ubuntu/#step-2-install-docker","text":"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" apt-get update apt-get install -y docker-ce Check if Docker is running systemctl status docker","title":"Step 2: Install Docker"},{"location":"01_installation_host_server/install_on_ubuntu/#step-3-create-islandora-user-and-group","text":"groupadd -g 10000 islandora useradd -m -d /home/islandora -s /bin/bash -u 10000 -g 10000 islandora passwd <somepassword> Please change <somepassword> to something else. Enter <somepassword> for password Re-enter <somepassword> to confirm Add islandora user to sudoers echo \"islandora ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/islandora","title":"Step 3: Create islandora user and group"},{"location":"01_installation_host_server/install_on_ubuntu/#step-4a-setup-ssh-access-for-islandora-user-on-vm-server-part-1","text":"Create a ssh key for the islandora user (this will also enable us to push code out to a repository later) mkdir -p /home/islandora/.ssh chmod -Rv 700 /home/islandora/.ssh chown -Rv islandora:islandora /home/islandora/.ssh cd /home/islandora/.ssh su islandora ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Follow the prompts to save your key. You do not need to specify a password to secure your key in development; in production you must protect your keys with strong passwords. Hit the Enter / Return key at all of the prompts. There should be no need to enter a file name. (However some users may find when prompted they may need to enter: id_rsa ) Do not enter a passphrase when asked twice, simply hit the Enter / Return key and move on. Example Output ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Generating public/private rsa key pair. Enter file in which to save the key (/home/islandora/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/islandora/.ssh/id_rsa. Your public key has been saved in /home/islandora/.ssh/id_rsa.pub. The key fingerprint is: SHA256:rTCG6wCablwrIkQTGcrcaChmTZEYAwNrNBLNxLIds+I islandora@isle-host-macos The key's randomart image is: +---[RSA 2048]----+ |O%*oo | |O*&. | |=%.* | |Ooo . . | |+.. . + S . | |.E . o o . | |= o o . | |++ + | |+.. . | +----[SHA256]-----+ If you would like to login to the host machine using key-pairs, please ensure the following first. Check if your laptop / workstation has existing ssh keys. If you do not know, use the Create ssh keys on enduser's laptop / workstation (optional) section below before advancing to Part 2 . If you already have existing SSH keys, move onto the Setup SSH access for islandora user on VM / server (Part 2) section.","title":"Step 4a: Setup SSH access for islandora user on VM / server (Part 1)"},{"location":"01_installation_host_server/install_on_ubuntu/#optional-create-ssh-keys-on-endusers-laptop-workstation","text":"Some endusers may or may not have created local SSH keys on their laptop or workstation prior to the next step. Please use the instructions below if this is the case. Creating ssh keys on MacOS High Sierra Creating ssh keys on Windows 10 Creating ssh keys on Ubuntu Desktop 16.04","title":"(optional) Create ssh keys on enduser's laptop / workstation"},{"location":"01_installation_host_server/install_on_ubuntu/#step-4b-setup-ssh-access-for-islandora-user-on-vm-server-part-2","text":"If you would like to login to the host machine using key-pairs, continued from (Part 1) . Copy in the existing ssh key from the enduser's laptop /workstation. This is entirely dependent on the local computer being used to connect to the Islandora server. In some cases, cloud hosting based servers e.g. Google Cloud Platform may have different requirements. This will allow key based ssh access for the enduser. Enduser's laptop /workstation running MacOS example : Open a terminal and enter: cat /Users/enduser/.ssh/id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Windows example : Open the Command Prompt application and enter notepad C:\\Users\\enduser\\.ssh\\id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Ubuntu Desktop example : Open a terminal and enter: cat /home/enduser/.ssh/id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) For all OS types, copy and paste this value exactly into the /home/islandora/.ssh/authorized_keys file using the nano tool on the CentOS VM ( On the CentOS VM not the enduser laptop ) nano /home/islandora/.ssh/authorized_keys Hit the Cntrl key and then the o key to write to the file. Hi the Cntrl key and then the x key to exit the file. Exit out of the ssh session from the host server as the root user exit ssh back in as islandora to test if that process worked. Example ssh islandora@isle-host-server.com -or- ssh islandora@10.10.10.130","title":"Step 4b: Setup SSH access for islandora user on VM / server (Part 2)"},{"location":"01_installation_host_server/install_on_ubuntu/#optional-note-for-vagrant-and-local-vm-users-only","text":"For local VM and Vagrant users only, not steps to follow in a production environment Should the enduser have difficulty adding the .ssh key for the islandora user or if the enduser doesn't even have a local id_rsa.pub file, that step above can be avoided. Simply continue to access the local ISLE Host VM via opening a terminal on the enduser laptop or workstation. cd /pathto/ISLE/vagrant/ vagrant ssh sudo su su islandora This process will switch one to islandora with out having to use a password.","title":"(optional) Note for Vagrant and local VM users only"},{"location":"01_installation_host_server/install_on_ubuntu/#step-5-create-docker-group","text":"Open a terminal and ssh back into the CentOS Host Server/VM as the islandora user and become root again. sudo su Create the Docker group. ( You may receive a notice that group docker already exist. This fine. Proceed with instructions. ) groupadd docker Add the islandora user to the new docker group usermod -aG docker islandora","title":"Step 5: Create Docker group"},{"location":"01_installation_host_server/install_on_ubuntu/#step-6-add-islandora-user-to-wheel-group","text":"usermod -aG wheel islandora","title":"Step 6: Add islandora user to wheel group"},{"location":"01_installation_host_server/install_on_ubuntu/#step-7-install-docker-compose","text":"Copy and paste the command below curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose Test the Installation docker-compose --version Example output: docker-compose version 1.20.1, build 1719ceb","title":"Step 7: Install Docker-Compose"},{"location":"01_installation_host_server/install_on_ubuntu/#optional-alternative-install-method-for-docker-compose","text":"In case the commands in the steps above fail, please use this alternative install. As always, ensure you're the root user. sudo su Install Python Pip (package manager for Python Scripting Language) apt-get install -y python-pip Upgrade Python to latest version apt-get upgrade python* Upgrade Python Pip pip install --upgrade pip Install Docker compose pip install docker-compose","title":"(optional) Alternative install method for Docker-compose"},{"location":"01_installation_host_server/install_on_ubuntu/#step-8-clone-isle-repository","text":"Please note: In some Linux Distributions, one might need to create the /opt directory (optional) One can ls -lha / to see if an /opt directory exists If missing, mkdir /opt If not missing, proceed to next step. cd /opt git clone https://github.com/Islandora-Collaboration-Group/ISLE.git This process will take 2 - 4 minutes depending on internet bandwidth chown -Rv islandora:islandora ISLE cd /opt/ISLE","title":"Step 8: Clone ISLE repository"},{"location":"01_installation_host_server/install_on_ubuntu/#next-steps","text":"Return to the Install Start Here section for additional instructions.","title":"Next steps"},{"location":"01_installation_host_server/install_on_ubuntu_1804/","text":"Ubuntu server version to use: 18.04 LTS This is a detailed operating system-specific guide including commands to copy/paste for all the software you may need to run ISLE on an Ubuntu 18.04 ISLE Host Server. Called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a laptop or a server you connected to via ssh. The following setup will be the same if you are setting up an ISLE host server: on your laptop / desktop using Vagrant or Virtualbox VM for the test site (isle.localdomain). or using a physical server or cloud hosted setup e.g. (AWS or GCP) to run an ISLE Host server for a new site or a migrated site. In all these cases you'll be establishing a Ubuntu server with the following dependencies below. Install process overview Install server prerequisites Install Docker Create islandora user and group Setup SSH access for islandora user on VM / server (Part 1) (optional) Create ssh keys on enduser's laptop / workstation Setup SSH access for islandora user on VM / server (Part 2) (optional) Create ssh keys on enduser's laptop / workstation Create Docker group Add islandora user to wheel group Install Docker-Compose (optional) Alternative install method for Docker-compose Clone ISLE repository Next steps Step 1: Install server prerequisites Open a terminal on your local laptop or workstation and ssh to the CentOS server / VM: You need to become root first If you are not already root, use either sudo -s or sudo su to become root. Enable the Universe repository if not already enabled add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe\" Install the following: apt-get update apt-get upgrade apt-get install -y openssl git htop ntp wget curl nano apt-transport-https ca-certificates software-properties-common docker.io docker-compose Step 2: Create islandora user and group groupadd -g 10000 islandora useradd -m -d /home/islandora -s /bin/bash -u 10000 -g 10000 islandora passwd islandora You will be prompted to enter a password for the user \"islandora\", then you will be asked to re-enter the password to confirm. Add islandora user to sudoers echo \"islandora ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/islandora Step 3a: Setup SSH access for islandora user on VM / server (Part 1) Create a ssh key for the islandora user (this will also enable us to push code out to a repository later) mkdir -p /home/islandora/.ssh chmod -Rv 700 /home/islandora/.ssh chown -Rv islandora:islandora /home/islandora/.ssh cd /home/islandora/.ssh su islandora ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/id_rsa Follow the prompts to save your key. You do not need to specify a password to secure your key in development; in production you must protect your keys with strong passwords. Hit the Enter / Return key at all of the prompts. There should be no need to enter a file name. (However some users may find when prompted they may need to enter: id_rsa ) Do not enter a passphrase when asked twice, simply hit the Enter / Return key and move on. Example Output ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Generating public/private rsa key pair. Enter file in which to save the key (/home/islandora/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/islandora/.ssh/id_rsa. Your public key has been saved in /home/islandora/.ssh/id_rsa.pub. The key fingerprint is: SHA256:rTCG6wCablwrIkQTGcrcaChmTZEYAwNrNBLNxLIds+I islandora@isle-host-macos The key's randomart image is: +---[RSA 2048]----+ |O%*oo | |O*&. | |=%.* | |Ooo . . | |+.. . + S . | |.E . o o . | |= o o . | |++ + | |+.. . | +----[SHA256]-----+ If you would like to login to the host machine using key-pairs, please ensure the following first. Check if your laptop / workstation has existing ssh keys. If you do not know, use the Create ssh keys on enduser's laptop / workstation (optional) section below before advancing to Part 2 . If you already have existing SSH keys, move onto the Setup SSH access for islandora user on VM / server (Part 2) section. (optional) Create ssh keys on enduser's laptop / workstation Some endusers may or may not have created local SSH keys on their laptop or workstation prior to the next step. Please use the instructions below if this is the case. Creating ssh keys on MacOS High Sierra Creating ssh keys on Windows 10 Creating ssh keys on Ubuntu Desktop 16.04 Step 3b: Setup SSH access for islandora user on VM / server (Part 2) If you would like to login to the host machine using key-pairs, continued from (Part 1) . Copy in the existing ssh key from the enduser's laptop /workstation. This is entirely dependent on the local computer being used to connect to the Islandora server. In some cases, cloud hosting based servers e.g. Google Cloud Platform may have different requirements. This will allow key based ssh access for the enduser. Enduser's laptop /workstation running MacOS example : Open a terminal and enter: cat /Users/enduser/.ssh/id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Windows example : Open the Command Prompt application and enter notepad C:\\Users\\enduser\\.ssh\\id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Ubuntu Desktop example : Open a terminal and enter: cat /home/enduser/.ssh/id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) For all OS types, copy and paste this value exactly into the /home/islandora/.ssh/authorized_keys file using the nano tool on the CentOS VM ( On the CentOS VM not the enduser laptop ) nano /home/islandora/.ssh/authorized_keys Hit the Cntrl key and then the o key to write to the file. Hi the Cntrl key and then the x key to exit the file. Exit out of the ssh session from the host server as the root user exit ssh back in as islandora to test if that process worked. Example ssh islandora@isle-host-server.com -or- ssh islandora@10.10.10.130 (optional) Note for Vagrant and local VM users only For local VM and Vagrant users only, not steps to follow in a production environment Should the enduser have difficulty adding the .ssh key for the islandora user or if the enduser doesn't even have a local id_rsa.pub file, that step above can be avoided. Simply continue to access the local ISLE Host VM via opening a terminal on the enduser laptop or workstation. cd /pathto/ISLE/vagrant/ vagrant ssh sudo su su islandora This process will switch one to islandora with out having to use a password. Step 4: Create Docker group Open a terminal and ssh back into the CentOS Host Server/VM as the islandora user and become root again. sudo su Create the Docker group. ( You may receive a notice that group docker already exist. This fine. Proceed with instructions. ) groupadd docker Add the islandora user to the new docker group usermod -aG docker islandora Step 5: Clone ISLE repository Please note: In some Linux Distributions, one might need to create the /opt directory (optional) One can ls -lha / to see if an /opt directory exists If missing, mkdir /opt If not missing, proceed to next step. cd /opt git clone https://github.com/Islandora-Collaboration-Group/ISLE.git This process will take 2 - 4 minutes depending on internet bandwidth chown -Rv islandora:islandora ISLE cd /opt/ISLE Next steps Return to the Install Start Here section for additional instructions.","title":"Ubuntu 18.04"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#install-process-overview","text":"Install server prerequisites Install Docker Create islandora user and group Setup SSH access for islandora user on VM / server (Part 1) (optional) Create ssh keys on enduser's laptop / workstation Setup SSH access for islandora user on VM / server (Part 2) (optional) Create ssh keys on enduser's laptop / workstation Create Docker group Add islandora user to wheel group Install Docker-Compose (optional) Alternative install method for Docker-compose Clone ISLE repository Next steps","title":"Install process overview"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#step-1-install-server-prerequisites","text":"Open a terminal on your local laptop or workstation and ssh to the CentOS server / VM: You need to become root first If you are not already root, use either sudo -s or sudo su to become root. Enable the Universe repository if not already enabled add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe\" Install the following: apt-get update apt-get upgrade apt-get install -y openssl git htop ntp wget curl nano apt-transport-https ca-certificates software-properties-common docker.io docker-compose","title":"Step 1: Install server prerequisites"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#step-2-create-islandora-user-and-group","text":"groupadd -g 10000 islandora useradd -m -d /home/islandora -s /bin/bash -u 10000 -g 10000 islandora passwd islandora You will be prompted to enter a password for the user \"islandora\", then you will be asked to re-enter the password to confirm. Add islandora user to sudoers echo \"islandora ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/islandora","title":"Step 2: Create islandora user and group"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#step-3a-setup-ssh-access-for-islandora-user-on-vm-server-part-1","text":"Create a ssh key for the islandora user (this will also enable us to push code out to a repository later) mkdir -p /home/islandora/.ssh chmod -Rv 700 /home/islandora/.ssh chown -Rv islandora:islandora /home/islandora/.ssh cd /home/islandora/.ssh su islandora ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/id_rsa Follow the prompts to save your key. You do not need to specify a password to secure your key in development; in production you must protect your keys with strong passwords. Hit the Enter / Return key at all of the prompts. There should be no need to enter a file name. (However some users may find when prompted they may need to enter: id_rsa ) Do not enter a passphrase when asked twice, simply hit the Enter / Return key and move on. Example Output ssh-keygen -t RSA -b 4096 -C \"ISLE Islandora\" -f /home/islandora/.ssh/ Generating public/private rsa key pair. Enter file in which to save the key (/home/islandora/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/islandora/.ssh/id_rsa. Your public key has been saved in /home/islandora/.ssh/id_rsa.pub. The key fingerprint is: SHA256:rTCG6wCablwrIkQTGcrcaChmTZEYAwNrNBLNxLIds+I islandora@isle-host-macos The key's randomart image is: +---[RSA 2048]----+ |O%*oo | |O*&. | |=%.* | |Ooo . . | |+.. . + S . | |.E . o o . | |= o o . | |++ + | |+.. . | +----[SHA256]-----+ If you would like to login to the host machine using key-pairs, please ensure the following first. Check if your laptop / workstation has existing ssh keys. If you do not know, use the Create ssh keys on enduser's laptop / workstation (optional) section below before advancing to Part 2 . If you already have existing SSH keys, move onto the Setup SSH access for islandora user on VM / server (Part 2) section.","title":"Step 3a: Setup SSH access for islandora user on VM / server (Part 1)"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#optional-create-ssh-keys-on-endusers-laptop-workstation","text":"Some endusers may or may not have created local SSH keys on their laptop or workstation prior to the next step. Please use the instructions below if this is the case. Creating ssh keys on MacOS High Sierra Creating ssh keys on Windows 10 Creating ssh keys on Ubuntu Desktop 16.04","title":"(optional) Create ssh keys on enduser's laptop / workstation"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#step-3b-setup-ssh-access-for-islandora-user-on-vm-server-part-2","text":"If you would like to login to the host machine using key-pairs, continued from (Part 1) . Copy in the existing ssh key from the enduser's laptop /workstation. This is entirely dependent on the local computer being used to connect to the Islandora server. In some cases, cloud hosting based servers e.g. Google Cloud Platform may have different requirements. This will allow key based ssh access for the enduser. Enduser's laptop /workstation running MacOS example : Open a terminal and enter: cat /Users/enduser/.ssh/id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Windows example : Open the Command Prompt application and enter notepad C:\\Users\\enduser\\.ssh\\id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) Enduser's laptop /workstation running Ubuntu Desktop example : Open a terminal and enter: cat /home/enduser/.ssh/id_rsa.pub & copy the key to the clipboard. ( On the enduser laptop not the VM ) For all OS types, copy and paste this value exactly into the /home/islandora/.ssh/authorized_keys file using the nano tool on the CentOS VM ( On the CentOS VM not the enduser laptop ) nano /home/islandora/.ssh/authorized_keys Hit the Cntrl key and then the o key to write to the file. Hi the Cntrl key and then the x key to exit the file. Exit out of the ssh session from the host server as the root user exit ssh back in as islandora to test if that process worked. Example ssh islandora@isle-host-server.com -or- ssh islandora@10.10.10.130","title":"Step 3b: Setup SSH access for islandora user on VM / server (Part 2)"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#optional-note-for-vagrant-and-local-vm-users-only","text":"For local VM and Vagrant users only, not steps to follow in a production environment Should the enduser have difficulty adding the .ssh key for the islandora user or if the enduser doesn't even have a local id_rsa.pub file, that step above can be avoided. Simply continue to access the local ISLE Host VM via opening a terminal on the enduser laptop or workstation. cd /pathto/ISLE/vagrant/ vagrant ssh sudo su su islandora This process will switch one to islandora with out having to use a password.","title":"(optional) Note for Vagrant and local VM users only"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#step-4-create-docker-group","text":"Open a terminal and ssh back into the CentOS Host Server/VM as the islandora user and become root again. sudo su Create the Docker group. ( You may receive a notice that group docker already exist. This fine. Proceed with instructions. ) groupadd docker Add the islandora user to the new docker group usermod -aG docker islandora","title":"Step 4: Create Docker group"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#step-5-clone-isle-repository","text":"Please note: In some Linux Distributions, one might need to create the /opt directory (optional) One can ls -lha / to see if an /opt directory exists If missing, mkdir /opt If not missing, proceed to next step. cd /opt git clone https://github.com/Islandora-Collaboration-Group/ISLE.git This process will take 2 - 4 minutes depending on internet bandwidth chown -Rv islandora:islandora ISLE cd /opt/ISLE","title":"Step 5: Clone ISLE repository"},{"location":"01_installation_host_server/install_on_ubuntu_1804/#next-steps","text":"Return to the Install Start Here section for additional instructions.","title":"Next steps"},{"location":"01_installation_host_server/install_troubleshooting/","text":"This is a basic guide / area that includes some general troubleshooting tips, techniques, thoughts towards helping ISLE users. This section is to grow over time. Docker service and firewalls While it is best practice to run the Docker service with a firewall like iptables , some cases, issues can arise depending on which service has been restarted and configured. Ensure that all ports exposed on containers and hosts (see your docker-compose.yml for these ports) are added to the iptables rules and persistent. Do note that only ports 80 & 443 should ever be open to the public Internet. Suggested service start order: The firewall be started / restart first The Docker service started / restarted second ISLE containers started / restart third Some errors like \"Failed to find document http://www.loc.gov/standards/mods/v3/mods-3-4.xsd\" are an indication of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues. On occasion, being unable to import an object, or edit a mods datastream are indications of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues.","title":"Troubleshooting"},{"location":"01_installation_host_server/install_troubleshooting/#docker-service-and-firewalls","text":"While it is best practice to run the Docker service with a firewall like iptables , some cases, issues can arise depending on which service has been restarted and configured. Ensure that all ports exposed on containers and hosts (see your docker-compose.yml for these ports) are added to the iptables rules and persistent. Do note that only ports 80 & 443 should ever be open to the public Internet. Suggested service start order: The firewall be started / restart first The Docker service started / restarted second ISLE containers started / restart third Some errors like \"Failed to find document http://www.loc.gov/standards/mods/v3/mods-3-4.xsd\" are an indication of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues. On occasion, being unable to import an object, or edit a mods datastream are indications of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues.","title":"Docker service and firewalls"},{"location":"02_installation_test/ild_example_user_story/","text":"Testing ISLE -- Alice is curious about ISLE and wants to know more about using Islandora for her university's digital collections. She does not have access to a server and would like to test drive Islandora before deciding whether or not to move forward with it. Alice has a Windows 10 laptop and she has confirmed that it meets the Host Server Specifications for testing ISLE. She also has Administrator rights on her laptop. She begins by installing Docker for Windows and configuring her system so ISLE can run on it by following the Install Docker for Windows instructions. Next, Alice starts the services that make up ISLE and installs Islandora on a virtual machine running on her laptop using the Test ISLE Installation Guide . Because this is a test site that can only be viewed on Alice's laptop, she does not need to make many config file changes and is safe using default settings. Alice now has a working version of ISLE running on her laptop! She can ingest new objects, view and edit exising objects, and safely test new settings. When she is done testing, she can easily shut down ISLE with a single command, then start it again just as easily at another time to continue testing or demo it to colleagues. If she decides to wipe out all of the changes she has made and start over with a fresh installation, she just has to delete the ISLE directory on her laptop and download the ISLE containers again--a process that usually takes no more than several minutes.","title":"Test Site Example User Story"},{"location":"02_installation_test/ild_example_user_story/#testing-isle-","text":"Alice is curious about ISLE and wants to know more about using Islandora for her university's digital collections. She does not have access to a server and would like to test drive Islandora before deciding whether or not to move forward with it. Alice has a Windows 10 laptop and she has confirmed that it meets the Host Server Specifications for testing ISLE. She also has Administrator rights on her laptop. She begins by installing Docker for Windows and configuring her system so ISLE can run on it by following the Install Docker for Windows instructions. Next, Alice starts the services that make up ISLE and installs Islandora on a virtual machine running on her laptop using the Test ISLE Installation Guide . Because this is a test site that can only be viewed on Alice's laptop, she does not need to make many config file changes and is safe using default settings. Alice now has a working version of ISLE running on her laptop! She can ingest new objects, view and edit exising objects, and safely test new settings. When she is done testing, she can easily shut down ISLE with a single command, then start it again just as easily at another time to continue testing or demo it to colleagues. If she decides to wipe out all of the changes she has made and start over with a fresh installation, she just has to delete the ISLE directory on her laptop and download the ISLE containers again--a process that usually takes no more than several minutes.","title":"Testing ISLE --"},{"location":"02_installation_test/ild_installation_guide/","text":"Test ISLE Installation Guide Expectations: It takes an average of 15-45 minutes to read this entire document and perform the installation as prescribed. Follow this guide to spin up and install ISLE utilizing the built-in isle.localdomain domain name for review and testing. This test ISLE / Islandora environment ( isle.localdomain ) includes an un-themed Drupal website and empty Fedora repository for endusers to develop code, test ingests, test metadata, update fields in SOLR indexing and otherwise \"kick the tires\" on ISLE prior for further usages e.g. creating a new ISLE production site or migrating a current Islandora production site to ISLE. While this checklist will attempt to point out most of the usage challenges or pitfalls, ISLE assumes no responsibility or liability in this matter should an enduser have customizations beyond what this guide outlines. Please note: There is a Glossary with relevant terms to help guide installation. Assumptions / Prerequisites This test site guide is designed for a local laptop / workstation that has already followed the appropriate setup and configuration instructions in the Test ISLE section of the guide . Instructions below assume a MacOS or Linux laptop or workstation. Windows users may have to adjust / swap out various tools as needed. Process overview Edit /etc/hosts on local laptop or desktop to allow user to easily connect to ISLE test system Test site launch process Run install script on Apache container Test the site Sample object ingestion Toubleshooting Step 0: edit /etc/hosts on local laptop or desktop It is important to add isle.localdomain to your /etc/hosts file, as connecting directly to an IP address can prevent some components from working properly. Vagrant : If you are using Vagrant, move on to the next section ( Summary: Test site launch process ) as this part is handled automatically. All other host configurations : Instructions for editing hosts files can be found here . After completing the appropriate steps, please return to this guide and continue with Step 1: Test site Launch process below Step 1: Test site launch process If using: Vagrant or a Virtualbox VM: The steps below assume you are shelled in (connected by SSH) as the islandora user into the ISLE Host VM via a terminal on a local laptop. ssh islandora@10.10.10.130 cd /opt/ISLE Docker for Mac: Continue to use the open terminal and navigate cd /opt/ISLE to the ISLE project directory. Docker for Windows: Continue to use the open PowerShell window and navigate to the ISLE project directory if not already there: cd ~\\Documents\\ISLE . The following steps below are for all users ( Vagrant, VM, non Vagrant and Docker for MacOS, Windows and Ubuntu Desktop users alike. ) The install times stated below for each container are highly dependent on the enduser's available Internet bandwidth and could take more or less time accordingly. Within the open terminal, run: docker-compose up -d This is going to download and start all five ISLE Docker images ( roughly 6 GB of data so it may take a little while depending on your Internet connection ) To check if the containers are running: docker ps (shows only running containers) If you don't see all five containers try: docker ps -a (shows all containers running or not) If all five containers are NOT running, then proceed to the Troubleshooting section first before advancing to the \"Install script on Apache container\" section below Step 2: Run install script on Apache container Total build process may take up to 15 - 45 minutes ( depending on system and internet speeds ) Run the following shell scripts manually on the apache container docker exec -it isle-apache-ld bash For Windows Users only You may be prompted by Windows to: Share the C drive with Docker. Click okay or allow Enter your username and password Allow vpnkit.exe to communicate with the network. Click Okay or Allow to accept the default selection. If the process seems to halt, check the taskbar for background windows. This will put you into a root prompt at the command line where you will enter the following commands: cd /utility-scripts/isle_drupal_build_tools/ .isle_islandora_installer.sh This script will take some time (see estimate above.) You should see a lot of green [ok] messages. If the script appears to pause and prompt for y/n, do not enter any values; the script will answer for you. Wait until \"Drush script finished! ...exiting\" before proceeding.** Once finished press the Cntrl and d keys or type exit to get out of the apache container Step 4: Testing the site Test (QC) the resulting setup by opening a web browser to the isle.localdomain URL of the new ISLE sample site (i.e. https://isle.localdomain ) and logging in. Upon entering https://isle.localdomain within a browser, you will see a SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. To log in to the Islandora Drupal Site: Username: isle_localdomain_admin Password: isle_localdomain_adminpw2018 There is additional information for users and passwords that can be found on the Test Site Resources page. Step 5: Sample objects for ingest Courtesy of the Islandora Collaboration Group there is a sample set of objects and corresponding metadata that can be used for ingest. More information can be found on the Test Site Resources page. Post Ingest Search Tip After ingesting content, you will need to add an Islandora Simple Search block to the Drupal structure. The default search box that appears on install will only search Drupal content, not Islandora content. Structure Menu > Blocks Scroll down to find \"Islandora Simple Search\". Use dropdown to set to Sidebar Second. Save Blocks on the bottom of the page This process will now allow you to search for ingested objects that have been indexed by SOLR. Note The cronjob setting in the install_isle_ld_site.sh script is still commented out as this will need to be flowed into the Docker build process prior. Issue with default Docker root user vs using islandora user. Drupal cron can run properly manually however. WARNING Please always use the https://isle.localdomain domain to view the site, login etc Do not use an IP e.g. https://10.10.10.130 or https://127.0.0.01 to view the Drupal site, login etc as some components won't work e.g. Large Images using the OpenSeadragon Viewer. Troubleshooting Port Conflicts If you encounter an error like this: Error starting userland proxy: Bind for 0.0.0.0:xxxx failed: port is already allocated then ISLE may have encountered a conflict with the xxxx port identified in the error message. In MacOS, this can frequently be caused by a local Apache or Nginx web server, or local MySQL server. You may need to remove or disable these local web servers before you can successfully install ISLE. If you have a local Apache web server that ships with most MacOS machines may conflict with port 80, and can usually be disabled from a terminal using these commands: sudo apachectl stop sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2>/dev/null If you have a local Nginx web server it may conflict with port 8080, and it can usually be disabled from a terminal using: sudo nginx -s stop Once your web server(s) have been disabled, resume the ISLE install process by repeating your last installation command, presumably docker-compose up -d . Non-running Containers If you don't see five running containers, then stop the running containers with docker-compose down -d and start the containers one at a time following the instructions below: MySQL image pull & container launch docker pull islandoracollabgroup/isle-mysql:latest docker-compose up -d mysql Fedora image pull & container launch docker pull islandoracollabgroup/isle-fedora:latest docker-compose up -d fedora (Optional but recommended troubleshooting step) Please note the Tomcat service requires about one to three minutes to startup and as such if the enduser rushes to the URL supplied below, the service page maytime out or be reported as unreachable. Give it a little time. After spinning up fedora container, check if the Fedora service is running prior to advancing. Navigate to http://fedora:8080/manager/html a popup login prompt should appear. Enter the user name of admin and the password of ild_tc_adm_2018 Upon login a large display of running Tomcat applications should display, scroll down to fedora The application state / status should be true If false appears instead, attempt to restart the fedora service manually. Select the restart button to the right of the status area. If it still fails, review the mounted fedora logs. The docker-compose.yml file will indicate where the logs are located. Using terminal and then entering a command like tail -n 300 - <path to ISLE project/data/fedora/log/tomcat:/usr/local/tomcat/logs/fedora.log should display enough information to troubleshoot or restart the entire startup process. Solr image pull & container launch docker pull islandoracollabgroup/isle-solr:latest docker-compose up -d solr Apache image pull & container launch docker pull islandoracollabgroup/isle-apache:latest docker-compose up -d apache Proxy image pull & container launch docker pull islandoracollabgroup/isle-proxy:latest docker-compose up -d proxy","title":"Test Site Installation Guide"},{"location":"02_installation_test/ild_installation_guide/#test-isle-installation-guide","text":"Expectations: It takes an average of 15-45 minutes to read this entire document and perform the installation as prescribed. Follow this guide to spin up and install ISLE utilizing the built-in isle.localdomain domain name for review and testing. This test ISLE / Islandora environment ( isle.localdomain ) includes an un-themed Drupal website and empty Fedora repository for endusers to develop code, test ingests, test metadata, update fields in SOLR indexing and otherwise \"kick the tires\" on ISLE prior for further usages e.g. creating a new ISLE production site or migrating a current Islandora production site to ISLE. While this checklist will attempt to point out most of the usage challenges or pitfalls, ISLE assumes no responsibility or liability in this matter should an enduser have customizations beyond what this guide outlines. Please note: There is a Glossary with relevant terms to help guide installation.","title":"Test ISLE Installation Guide"},{"location":"02_installation_test/ild_installation_guide/#assumptions-prerequisites","text":"This test site guide is designed for a local laptop / workstation that has already followed the appropriate setup and configuration instructions in the Test ISLE section of the guide . Instructions below assume a MacOS or Linux laptop or workstation. Windows users may have to adjust / swap out various tools as needed.","title":"Assumptions / Prerequisites"},{"location":"02_installation_test/ild_installation_guide/#process-overview","text":"Edit /etc/hosts on local laptop or desktop to allow user to easily connect to ISLE test system Test site launch process Run install script on Apache container Test the site Sample object ingestion Toubleshooting","title":"Process overview"},{"location":"02_installation_test/ild_installation_guide/#step-0-edit-etchosts-on-local-laptop-or-desktop","text":"It is important to add isle.localdomain to your /etc/hosts file, as connecting directly to an IP address can prevent some components from working properly. Vagrant : If you are using Vagrant, move on to the next section ( Summary: Test site launch process ) as this part is handled automatically. All other host configurations : Instructions for editing hosts files can be found here . After completing the appropriate steps, please return to this guide and continue with Step 1: Test site Launch process below","title":"Step 0: edit /etc/hosts on local laptop or desktop"},{"location":"02_installation_test/ild_installation_guide/#step-1-test-site-launch-process","text":"If using: Vagrant or a Virtualbox VM: The steps below assume you are shelled in (connected by SSH) as the islandora user into the ISLE Host VM via a terminal on a local laptop. ssh islandora@10.10.10.130 cd /opt/ISLE Docker for Mac: Continue to use the open terminal and navigate cd /opt/ISLE to the ISLE project directory. Docker for Windows: Continue to use the open PowerShell window and navigate to the ISLE project directory if not already there: cd ~\\Documents\\ISLE . The following steps below are for all users ( Vagrant, VM, non Vagrant and Docker for MacOS, Windows and Ubuntu Desktop users alike. ) The install times stated below for each container are highly dependent on the enduser's available Internet bandwidth and could take more or less time accordingly. Within the open terminal, run: docker-compose up -d This is going to download and start all five ISLE Docker images ( roughly 6 GB of data so it may take a little while depending on your Internet connection ) To check if the containers are running: docker ps (shows only running containers) If you don't see all five containers try: docker ps -a (shows all containers running or not) If all five containers are NOT running, then proceed to the Troubleshooting section first before advancing to the \"Install script on Apache container\" section below","title":"Step 1: Test site launch process"},{"location":"02_installation_test/ild_installation_guide/#step-2-run-install-script-on-apache-container","text":"Total build process may take up to 15 - 45 minutes ( depending on system and internet speeds ) Run the following shell scripts manually on the apache container docker exec -it isle-apache-ld bash For Windows Users only You may be prompted by Windows to: Share the C drive with Docker. Click okay or allow Enter your username and password Allow vpnkit.exe to communicate with the network. Click Okay or Allow to accept the default selection. If the process seems to halt, check the taskbar for background windows. This will put you into a root prompt at the command line where you will enter the following commands: cd /utility-scripts/isle_drupal_build_tools/ .isle_islandora_installer.sh This script will take some time (see estimate above.) You should see a lot of green [ok] messages. If the script appears to pause and prompt for y/n, do not enter any values; the script will answer for you. Wait until \"Drush script finished! ...exiting\" before proceeding.** Once finished press the Cntrl and d keys or type exit to get out of the apache container","title":"Step 2: Run install script on Apache container"},{"location":"02_installation_test/ild_installation_guide/#step-4-testing-the-site","text":"Test (QC) the resulting setup by opening a web browser to the isle.localdomain URL of the new ISLE sample site (i.e. https://isle.localdomain ) and logging in. Upon entering https://isle.localdomain within a browser, you will see a SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. To log in to the Islandora Drupal Site: Username: isle_localdomain_admin Password: isle_localdomain_adminpw2018 There is additional information for users and passwords that can be found on the Test Site Resources page.","title":"Step 4: Testing the site"},{"location":"02_installation_test/ild_installation_guide/#step-5-sample-objects-for-ingest","text":"Courtesy of the Islandora Collaboration Group there is a sample set of objects and corresponding metadata that can be used for ingest. More information can be found on the Test Site Resources page.","title":"Step 5: Sample objects for ingest"},{"location":"02_installation_test/ild_installation_guide/#post-ingest-search-tip","text":"After ingesting content, you will need to add an Islandora Simple Search block to the Drupal structure. The default search box that appears on install will only search Drupal content, not Islandora content. Structure Menu > Blocks Scroll down to find \"Islandora Simple Search\". Use dropdown to set to Sidebar Second. Save Blocks on the bottom of the page This process will now allow you to search for ingested objects that have been indexed by SOLR.","title":"Post Ingest Search Tip"},{"location":"02_installation_test/ild_installation_guide/#note","text":"The cronjob setting in the install_isle_ld_site.sh script is still commented out as this will need to be flowed into the Docker build process prior. Issue with default Docker root user vs using islandora user. Drupal cron can run properly manually however.","title":"Note"},{"location":"02_installation_test/ild_installation_guide/#warning","text":"Please always use the https://isle.localdomain domain to view the site, login etc Do not use an IP e.g. https://10.10.10.130 or https://127.0.0.01 to view the Drupal site, login etc as some components won't work e.g. Large Images using the OpenSeadragon Viewer.","title":"WARNING"},{"location":"02_installation_test/ild_installation_guide/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"02_installation_test/ild_installation_guide/#port-conflicts","text":"If you encounter an error like this: Error starting userland proxy: Bind for 0.0.0.0:xxxx failed: port is already allocated then ISLE may have encountered a conflict with the xxxx port identified in the error message. In MacOS, this can frequently be caused by a local Apache or Nginx web server, or local MySQL server. You may need to remove or disable these local web servers before you can successfully install ISLE. If you have a local Apache web server that ships with most MacOS machines may conflict with port 80, and can usually be disabled from a terminal using these commands: sudo apachectl stop sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2>/dev/null If you have a local Nginx web server it may conflict with port 8080, and it can usually be disabled from a terminal using: sudo nginx -s stop Once your web server(s) have been disabled, resume the ISLE install process by repeating your last installation command, presumably docker-compose up -d .","title":"Port Conflicts"},{"location":"02_installation_test/ild_installation_guide/#non-running-containers","text":"If you don't see five running containers, then stop the running containers with docker-compose down -d and start the containers one at a time following the instructions below: MySQL image pull & container launch docker pull islandoracollabgroup/isle-mysql:latest docker-compose up -d mysql Fedora image pull & container launch docker pull islandoracollabgroup/isle-fedora:latest docker-compose up -d fedora (Optional but recommended troubleshooting step) Please note the Tomcat service requires about one to three minutes to startup and as such if the enduser rushes to the URL supplied below, the service page maytime out or be reported as unreachable. Give it a little time. After spinning up fedora container, check if the Fedora service is running prior to advancing. Navigate to http://fedora:8080/manager/html a popup login prompt should appear. Enter the user name of admin and the password of ild_tc_adm_2018 Upon login a large display of running Tomcat applications should display, scroll down to fedora The application state / status should be true If false appears instead, attempt to restart the fedora service manually. Select the restart button to the right of the status area. If it still fails, review the mounted fedora logs. The docker-compose.yml file will indicate where the logs are located. Using terminal and then entering a command like tail -n 300 - <path to ISLE project/data/fedora/log/tomcat:/usr/local/tomcat/logs/fedora.log should display enough information to troubleshoot or restart the entire startup process. Solr image pull & container launch docker pull islandoracollabgroup/isle-solr:latest docker-compose up -d solr Apache image pull & container launch docker pull islandoracollabgroup/isle-apache:latest docker-compose up -d apache Proxy image pull & container launch docker pull islandoracollabgroup/isle-proxy:latest docker-compose up -d proxy","title":"Non-running Containers"},{"location":"02_installation_test/ild_resources/","text":"WARNING Do not use an IP e.g. https://10.10.10.130 to view the Drupal site, login etc as somethings won't work e.g. Large Images using the OpenSeadragon Viewer. Please always use the https://isle.localdomain domain to view the site, login etc Sample Objects for ingest. Courteous of the Islandora Collaboration Group there is a sample set of objects and corresponding metadata (examples organized by solution pack, including zips for quicker bulk ingestion) that can be used to test ingest. https://github.com/Islandora-Collaboration-Group/islandora-sample-objects You are free to clone this repository to your local laptop or desktop and ingest as required. If you are not familiar with ingest, one can follow instructions here or start with the Getting Started with Islandora section of the official Islandora documentation. Users and passwords islandora user on the ISLE host server uses islandora as the password. Some of the information below is for accessing the non Drupal site admin panels and resources only. (optional). In this context, hostip below can mean either the IP address e.g. http://10.10.10.130 of the Vagrant or Non-Vagrant Host VM ( CentOS / Ubuntu ) the IP address e.g. 127.0.0.1 for Docker for Mac 1. MySQL container Compose Service Name Container Name Software Ports mysql isle-mysql-ld MySQL 5.6 3306 Account Password Database Perms root ild_mysqlrt_2018 ALL ALL fedora_admin ild_feddb_2018 fedora3 All except Grant option isle_ld_user isle_ld_db2018 isle_ld All except Grant option 2. Fedora container Compose Service Name Container Name Software Ports fedora isle-fedora-ld see below 8080, 80 (on container) mapped to 8777 (on host) Software Version Fedora 3.8.1 Apache 2.4.7 Drupalfilter 3.8.1 Gsearch (w/remote SOLR plugin) 2.8+ (DG patched) (DG) GSearch Extensions 0.13 (DG) Islandora Transforms (XSLTs) as of 3/2018 Tomcat 7.x Oracle JDK 8.x Djatoka 1.1 Account Password Service URL fedoraAdmin ild_fed_admin_2018 Fedora http://hostip:8080/fedora/describe fedoraIntCallUser ild_fed_IntCallUser_2018 Fedora http://hostip:8080/fedora/objects anonymous anonymous Fedora --- fgsAdmin ild_fgs_admin_2018 Gsearch http://hostip:8080/fedoragsearch/rest?operation=updateIndex admin ild_tc_adm_2018 Tomcat http://hostip:8080/manager/html manager ild_tc_man_2018 Tomcat http://hostip:8080/manager/html -- -- Djatoka http://hostip:8080/adore-djatoka/ 3. Solr container Compose Service Name Container Name Software Ports solr isle-solr-ld see below 8080 (on container) mapped to 8091 (on host) Software Version Solr 4.10.4 Tomcat 7.x Oracle JDK 8.x (DG) Basic Solr Config 4.10.x branch Account Password Service URL admin ild_tc_adm_2018 Tomcat http://hostip:8091/manager/html manager ild_tc_man_2018 Tomcat http://hostip:8091/manager/html -- -- Solr http://hostip:8091/solr/ 4. Apache container Compose Service Name Container Name Software Ports apache isle-apache-ld see below 80, 443 Software Version Apache 2.4.7 Oracle JDK 8.x Djatoka 1.1 Drupal 7.57 PHP 5.6 Islandora 7.x Account Password Service URL isle_localdomain_admin isle_localdomain_adminpw2018 Drupal site admin https://isle.localdomain 5. Proxy container Compose Service Name Container Name Software Ports proxy isle-proxy Nginx 1.13 80, 443","title":"Test Site Resources"},{"location":"02_installation_test/ild_resources/#warning","text":"Do not use an IP e.g. https://10.10.10.130 to view the Drupal site, login etc as somethings won't work e.g. Large Images using the OpenSeadragon Viewer. Please always use the https://isle.localdomain domain to view the site, login etc","title":"WARNING"},{"location":"02_installation_test/ild_resources/#sample-objects-for-ingest","text":"Courteous of the Islandora Collaboration Group there is a sample set of objects and corresponding metadata (examples organized by solution pack, including zips for quicker bulk ingestion) that can be used to test ingest. https://github.com/Islandora-Collaboration-Group/islandora-sample-objects You are free to clone this repository to your local laptop or desktop and ingest as required. If you are not familiar with ingest, one can follow instructions here or start with the Getting Started with Islandora section of the official Islandora documentation.","title":"Sample Objects for ingest."},{"location":"02_installation_test/ild_resources/#users-and-passwords","text":"islandora user on the ISLE host server uses islandora as the password. Some of the information below is for accessing the non Drupal site admin panels and resources only. (optional). In this context, hostip below can mean either the IP address e.g. http://10.10.10.130 of the Vagrant or Non-Vagrant Host VM ( CentOS / Ubuntu ) the IP address e.g. 127.0.0.1 for Docker for Mac","title":"Users and passwords"},{"location":"02_installation_test/ild_resources/#1-mysql-container","text":"Compose Service Name Container Name Software Ports mysql isle-mysql-ld MySQL 5.6 3306 Account Password Database Perms root ild_mysqlrt_2018 ALL ALL fedora_admin ild_feddb_2018 fedora3 All except Grant option isle_ld_user isle_ld_db2018 isle_ld All except Grant option","title":"1. MySQL container"},{"location":"02_installation_test/ild_resources/#2-fedora-container","text":"Compose Service Name Container Name Software Ports fedora isle-fedora-ld see below 8080, 80 (on container) mapped to 8777 (on host) Software Version Fedora 3.8.1 Apache 2.4.7 Drupalfilter 3.8.1 Gsearch (w/remote SOLR plugin) 2.8+ (DG patched) (DG) GSearch Extensions 0.13 (DG) Islandora Transforms (XSLTs) as of 3/2018 Tomcat 7.x Oracle JDK 8.x Djatoka 1.1 Account Password Service URL fedoraAdmin ild_fed_admin_2018 Fedora http://hostip:8080/fedora/describe fedoraIntCallUser ild_fed_IntCallUser_2018 Fedora http://hostip:8080/fedora/objects anonymous anonymous Fedora --- fgsAdmin ild_fgs_admin_2018 Gsearch http://hostip:8080/fedoragsearch/rest?operation=updateIndex admin ild_tc_adm_2018 Tomcat http://hostip:8080/manager/html manager ild_tc_man_2018 Tomcat http://hostip:8080/manager/html -- -- Djatoka http://hostip:8080/adore-djatoka/","title":"2. Fedora container"},{"location":"02_installation_test/ild_resources/#3-solr-container","text":"Compose Service Name Container Name Software Ports solr isle-solr-ld see below 8080 (on container) mapped to 8091 (on host) Software Version Solr 4.10.4 Tomcat 7.x Oracle JDK 8.x (DG) Basic Solr Config 4.10.x branch Account Password Service URL admin ild_tc_adm_2018 Tomcat http://hostip:8091/manager/html manager ild_tc_man_2018 Tomcat http://hostip:8091/manager/html -- -- Solr http://hostip:8091/solr/","title":"3. Solr container"},{"location":"02_installation_test/ild_resources/#4-apache-container","text":"Compose Service Name Container Name Software Ports apache isle-apache-ld see below 80, 443 Software Version Apache 2.4.7 Oracle JDK 8.x Djatoka 1.1 Drupal 7.57 PHP 5.6 Islandora 7.x Account Password Service URL isle_localdomain_admin isle_localdomain_adminpw2018 Drupal site admin https://isle.localdomain","title":"4. Apache container"},{"location":"02_installation_test/ild_resources/#5-proxy-container","text":"Compose Service Name Container Name Software Ports proxy isle-proxy Nginx 1.13 80, 443","title":"5. Proxy container"},{"location":"03_installation_new_site/new_site_example_user_story/","text":"Building a new Islandora site using ISLE - sample user story Sam wants to spin up Islandora on an Ubuntu Linux server she has in the institutional data center. She accesses the server using ssh and determines that it meets the Host Server Specifications (basically - has enough processor, memory, and storage space). Sam already has a domain name she wants to use for this Islandora instance - https://islandoratest.university.edu (note: this is a made up sample url) and has requested the DNS update from IT so the name resolves to the IP address of her server. Next Sam follows the Install ISLE Host Server Dependencies on Ubuntu instructions to setup the server to be a host for ISLE (install some software including docker, download/clone the ISLE repository, create and configure a Linux user for islandora). Because Sam is building a new site with her own url, she will need to edit a number of the included ISLE configuration files and folders found in the config directory of the cloned ISLE repository per the detailed instructions in the New Site Installation Guide - w/ Single ISLE Environment . Once all the configurations have been set, Sam is ready to install ISLE itself - she connects to the server via ssh as the islandora user she just created and follows the steps in the New Site Installation Guide - w/ Single ISLE Environment to copy over the configuration changes and pull down the Dockerhub images one-by-one and start. The final step involves running a provisioning script from the ISLE repository folder. At this point, Sam should be able to point a browser at her URL and see a functioning Islandora install!","title":"New Site Example User Story"},{"location":"03_installation_new_site/new_site_example_user_story/#building-a-new-islandora-site-using-isle-sample-user-story","text":"Sam wants to spin up Islandora on an Ubuntu Linux server she has in the institutional data center. She accesses the server using ssh and determines that it meets the Host Server Specifications (basically - has enough processor, memory, and storage space). Sam already has a domain name she wants to use for this Islandora instance - https://islandoratest.university.edu (note: this is a made up sample url) and has requested the DNS update from IT so the name resolves to the IP address of her server. Next Sam follows the Install ISLE Host Server Dependencies on Ubuntu instructions to setup the server to be a host for ISLE (install some software including docker, download/clone the ISLE repository, create and configure a Linux user for islandora). Because Sam is building a new site with her own url, she will need to edit a number of the included ISLE configuration files and folders found in the config directory of the cloned ISLE repository per the detailed instructions in the New Site Installation Guide - w/ Single ISLE Environment . Once all the configurations have been set, Sam is ready to install ISLE itself - she connects to the server via ssh as the islandora user she just created and follows the steps in the New Site Installation Guide - w/ Single ISLE Environment to copy over the configuration changes and pull down the Dockerhub images one-by-one and start. The final step involves running a provisioning script from the ISLE repository folder. At this point, Sam should be able to point a browser at her URL and see a functioning Islandora install!","title":"Building a new Islandora site using ISLE - sample user story"},{"location":"03_installation_new_site/new_site_installation_guide_multi/","text":"This guide documents how an enduser can spin up and install multiple ISLE / Islandora sites within multiple ISLE / Islandora environments e.g. (production, staging and development) all tailored to using their own unique domains / URLs. A new ISLE / Islandora environment can include the option to create an un-themed Drupal website and empty Fedora repository for endusers to develop code, perform ingests, edit metadata, update fields in SOLR indexing all essential in ultimately creating a new ISLE production site. While this checklist will attempt to point out most of the usage challenges or pitfalls, ISLE assumes no responsibility or liability in this matter should an enduser have customizations beyond what this guide outlines. Index of related documents New Site Example User Story Please note: There is a Glossary with relevant terms to help guide installation. Assumptions / Prerequisites Comfortability with ISLE. Recommend first setting up the ISLE Test Site ( isle.localdomain ) via the Install Start Here guide. If you have already done this, please proceed. Host Server that conforms to the specifications outlined in the Host Server Specifications This new site guide is designed for a Host server that has already followed the appropriate setup and configuration instructions in the Create a new ISLE site section of the Install Start Here guide. Instructions below also assume a MacOS or Linux laptop or workstation to be used in conjunction with the ISLE Host Server for deploying configs, code, files etc. Windows users may have to adjust / swap out various tools as needed. These directions also depend on the type of local computer used to connect via browser to Islandora. Have an existing domain name that works - is set up with DNS etc... Have SSL Certificates previously created for the web domain. ( Please work with the appropriate internal IT resource to provision these files for your domain ) ISLE project has been cloned to BOTH your local laptop/workstation AND the ISLE host server Multiple ISLE / Islandora Environments When attempting to configure multiple ISLE / Islandora environments, all sections labeled (multi) provide additional steps to follow and/or repeat. This is primarily because only one proxy container is needed to manage all ISLE environments (e.g. production, staging and development) on one ISLE Host Server or VM. When deploying multiple ISLE environments on one ISLE host server, a few extra steps are needed as well. Once the initial ISLE environment has been setup for all following environments, you'll need to please do the following: Continue to use / copy the isle-newsite-sample directory for any new or additional ISLE environments as directed above. Per each section with a (multi) indicated, edit files accordingly but be aware that you'll be moving them into the appropriate subdirectory of the first created ISLE environment's proxy directory. No other ISLE environments are to a) use their own proxy directory and b) have a proxy: section within their separate docker-compose.yml files. Only use one proxy for multi ISLE environments. This container will route connections and traffic properly, keeping environments separate and data siloed. Example: Multiple ISLE environments enabled within the first ISLE config using a single proxy . In this example the dev ISLE environment was created first for testing and additional environments stage and prod (production) were added but are still controlled by the proxy config within the first created ISLE environment dev . This is what the final results should look like. Please note, you could run more than one site this way and are only limited by the appropriate resources of your ISLE host server. \u251c\u2500\u2500 isle-newsite-dev.yourdomain.edu (1st ISLE environment created with proxy subdirectory and proxy: section in its docker-compose.yml) \u2502 \u2514\u2500\u2500 proxy \u2502 \u2514\u2500\u2500 config \u2502 \u251c\u2500\u2500 sites-enabled \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev.conf \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod.conf \u2502 \u2502 \u2514\u2500\u2500 edu.example.digital-collections-stage.conf \u2502 \u251c\u2500\u2500 ssl-certs \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev-interm.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev-key.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod-interm.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod-key.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-stage-interm.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-stage-key.pem \u2502 \u2502 \u2514\u2500\u2500 edu.example.digital-collections-stage.pem \u2502 \u2514\u2500\u2500 upstreams.d \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev.conf \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod.conf \u2502 \u2514\u2500\u2500 edu.example.digital-collections-stage.conf | \u251c\u2500\u2500 isle-newsite-prod.yourdomain.edu (3rd ISLE environment created, no proxy subdirectory, no proxy: section in its docker-compose.yml) | \u251c\u2500\u2500 isle-newsite-sample | \u2514\u2500\u2500 isle-newsite-stage.yourdomain.edu (2nd ISLE environment created, no proxy subdirectory, no proxy section in its docker-compose.yml) Overview Setup a Private Code Repository Most of the work in this guide involves careful editing of the various configuration and settings files that customize the pieces of Islandora (database, repository, web-server, etc...). Doing this work in a code repository makes it easier to correct errors and to repeat the process for additional servers without needing to replicate all the work. Since the edits could include things like passwords, it's important to make this a private repository. Customizing for your Environment Many of the steps below describe adding the domain name or other specific bits of information into files or appending those bits to file names. In these cases this guide will call out the customization point AND provide an example - it's important not to literally copy paste the example! Create Private Code Repository ON your local laptop/workstation: Using a git repository of your choice (GitHub, GitLab, Bitbucket, etc.) create a PRIVATE remote git repo - see the specific code repository documentation online for setup instructions. Open a terminal - navigate to /opt/ISLE/config ( or where you put the ISLE directory on your local workstation. ) Create a new directory with a name of your choice Example: where \"digital-collections.yourdomain.com\" is your server domain name e.g.: config/digital-collections.example.edu Please do not use this literal value. Locate the directory within the /opt/ISLE/config/ directory called isle-newsite-sample and copy all of its contents into your newly created directory. cd into the newly copied and renamed digital-collections.example.edu directory and type: git init to imitate this directory as a code repository. git remote add NameOfYourRepository URLofYourRepository to connect your local repository to the remote you set up in the above steps. [ NOTE replace \"NameOfYourRepository\" and \"URLofYourRepository\" with the name of your git repository and its URL] You are now ready to perform the customization edits in this directory (you can use a text editor of choice now don't have to stay in terminal - just locate the folder in the finder and open file in text editor) Edits Docker compose file: Edit the file: docker-compose.yml accordingly: Change container names based on the environment (prod, stage, dev, etc) For example if you are building a dev server instance: container_name: isle-solr-newsite changes to: container_name: isle-solr-dev and so on... Please note: Much of the file is already with comments guiding the enduser to key areas or files to edit or modify accordingly. Config directories Now proceed to make edits to files within the config subdirectories: a. to reflect environment (prod, stage, dev, etc...) b. to involve your domain name (digital-collections.example.edu) There are five subdirectories which have the appropriate settings for each respective container and service: apache fedora mysql proxy solr Apache directory The apache subdirectory contains all specific configurations and overrides necessary for the ISLE apache image and resulting container to function properly with your changes. This is the webserver that serves the Islandora / Drupal website. ( Optional ) Edit the php.ini file to change various appropriate settings if needed otherwise leave alone. Example - Line 820: change the upload_max_filesize = 2000M to a higher setting if desired. Currently at a 2GB upload limit. Edit the file: settings.php Lines 251-253: add your database name, database user, and database password Line 288: to include a 45+ alpha-numeric characters drupal hash between the quotes after this text: $drupal_hash_salt = ''; You'll need to create this value, recommend using a password generator tool. Ensure only alpha-numeric characters are used, no symbols etc. Line 311: Review and ensure # $base_url = is still commented out Edit the file: install_new_site.sh line 29: /usr/local/bin/drush site-install -y --account-name=newsite_admin --account-pass=newsite_adminpw --account-mail=admin@newsite.com --site-name=\"ISLE New Site Sample\" Change the following values in that line above to the appropriate names and passwords for your site. --account-name= Drupal admin account --account-pass= Drupal admin account password --account-mail= Email address that can be associated with Drupal admin account --site-name= Name of your new ISLE website Apache - sites-enabled Within the sites-enabled directory, rename the files newsite-sample-ssl.conf and newsite-sample.conf to your domain names - example: digital-collections.example.edu_ssl.conf digital-collections.example.edu.conf Edit the previously named newsite-sample.conf file and change lines 3 and 4 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 4 and 5 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 12 and 13 to point to the location of your certs on the container - example: SSLCertificateFile /certs/newsite-sample.pem SSLCertificateChainFile /certs/newsite-sample-interm.pem SSLCertificateKeyFile /certs/newsite-sample-key.pem Apache - ssl-certs If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. Copy your SSL certificates for Apache into the apache/ssl-certs subdirectory. They will and should have different names than the examples provided below dependent on the ISLE environment you are setting up e.g. ( production, staging or development ). There can be up to 2 - 3 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem 1 x SSL Certificate Chain File e.g. newsite-sample-interm.pem This file may be optional in some setups but is generally recommended for use by the apache container when available. It will not be used by the proxy container. Please also note that the file extensions can also be: .cer , .crt or .pem Apache - ssl-certs (multi) When creating multiple environments for ISLE, please change all of the file and key names accordingly to reflect the environment e.g. adding ( -prod, -stage, -dev to file names). Later on, this process will assist in organizing proper filing of files for the proxy container and stop any situation where a file gets overwritten or improperly referenced by the wrong environment. Example: * 1 x SSL Certificate Key File e.g. `newsite-dev-key.pem` * 1 x SSL Certificate File e.g. `newsite-dev.pem` * 1 x SSL Certificate Chain File e.g. `newsite-dev-interm.pem` Apache - tmpreaper ( Optional ) Edit the cron file within the apache/tmpreaper subdirectory to change various appropriate settings if needed otherwise leave alone if you are not familiar with how cron jobs work. Currently this cronjob is set to run every 12 hours and using the tmpreaper utility to clean out and delete the contents of the /tmp folder if they are older than 4 days. Fedora directory The fedora subdirectory contains all specific configurations and overrides necessary for the ISLE fedora image and resulting container to function properly with your changes. This is the Fedora repository that will contain all objects, metadata etc. Fedora - fedora Within the fedora/fedora subdirectory, add new passwords in the following files: Lines 3, 8, 14: fedora-users.xml (change all applicable passwords for fedora users) Line 598: fedora.fcfg (change the password to the fedora_admin database user password only) Line 15: filter-drupal.xml (change the associated Drupal site database name , user and password, do not use settings for the fedora3 database.) ( Optional ) Edit either of the log4j.properties or logback.xml files to change logging levels for the fedora container if needed, otherwise leave alone. Please note: If making changes, you'll need to then edit the docker-compose.yml file accordingly in the fedora volumes section Example add a line to make changes for the Fedora application logging. - ./fedora/fedora/logback.xml :/usr/local/fedora/server/config/logback.xml Example add a line to make changes for the Djatoka application logging. - ./fedora/fedora/logback.xml :/usr/local/tomcat/webapps/adore-djatoka/WEB-INF/classes/log4j.properties ( Optional ) Edit the contents of the repository-policies subdirectory as necessary IF YOU NEED TO , otherwise leave alone. Fedora - gsearch Within the fedora/gsearch subdirectory, edit the file: fedoragsearch.properties at line 7 and add a space after the equal sign and then add the new gsearch fgsAdmin user password . - fedoragsearch.soapPass = new_fgsAdmin_password_here Edit the file: fgsconfig-basic-configForIslandora.properties Line 26: add the new gsearch fgsAdmin user password . gsearchPass=new_fgsAdmin_password_here Line 67: Add the new fedora fedora admin password . fedoraPass=new_fedoraAdmin_password_here Edit the file: fedora/gsearch/fgsconfigObjects.properties at line 15 and add a space after the equal sign and then add the new fedora admin password . fgsconfigObjects.fedoraPass = new_fedoraAdmin_password_here Edit the file: fedora/gsearch/repository.properties at line 7 and add a space after the equal sign and then add the new fedora admin password . fgsrepository.fedoraPass = new_fedoraAdmin_password_here Fedora - tmpreaper ( Optional ) Edit the cron file within fedora/tmpreaper to change various appropriate settings if needed otherwise leave alone if you are not familiar with how cron jobs work. Currently this cronjob is set to run every 12 hours and using the tmpreaper utility to clean out and delete the contents of the /tmp folder if they are older than 4 days. Fedora - tomcat Within the tomcat subdirectory: Strongly recommend adding tomcat user passwords in file: fedora/tomcat/tomcat-users.xml Example: ONLY ADD TOMCAT USERNAME/PASSWORD - can look like this but please use a stronger password with more than 10 alpha-numeric characters. Also note, they should NOT be the same password.: <!-- user manager can access only manager section --> <user username=\u201cmanager\u201d password=\u201ctomcat_manager_password\" roles=\u201cmanager-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> <!-- user admin can access manager and admin section both --> <user username=\u201cadmin\u201d password=\u201ctomcat_admin_password\u201d roles=\u201cmanager-gui,admin-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> </tomcat-users> Mysql directory The mysql subdirectory contains all specific configurations and overrides necessary for the ISLE mysql image and resulting container to function properly with your changes. This is the Mysql database server that will contain two databases, one for the Islandora / Drupal website and the other for the Fedora repository. ( Optional ) Edit the Mysql configuration file my.cnf as needed otherwise leave alone. Mysql - initscripts This subdirectory houses SQL scripts necessary for a one time creation of your associated new site and fedora3 database. You'll want to rename newsite_sample_db.sql to the database or domain name of your choice. Edit the contents of newsite_sample_db.sql to create the new drupal site database and user. Line 1: Change the database name from newsite_sample_db to the database name of your choice. Line 2: Change the database user name from newsite_sample_db_user to the database user name of your choice. Line 3: At almost the end of the line, change the value of newsite_sample_db.* to the to the database name of your choice ensuring the .* remain without a space. Line 3: At the end of the line, change the value of newsite_sample_db_user' to the to the database user name of your choice ensuring the values remain with in the '' quotes without spaces. Do not alter the remaining code ( @'%';' ) beyond that point. Edit the contents of fedora3 to change the fedora_admin user password only. Line 2: Change the fedora_admin user password from newsite_sample_fedora_admin_pw to the password of your choice. It is not recommended to change anything else. Proxy directory If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. The proxy subdirectory contains all specific configurations and overrides necessary for the ISLE proxy image and resulting container to function properly with your changes. This is the Nginx reverse proxy server that properly routes all internal and external communication between the other four containers and the ISLE Host network. Proxy - sites-enabled In the config/sites-enabled subdirectory, rename the com.sample-newsite.conf file to com.yourdomain.conf (where \"yourdomain\" is the domain name of your server but the suffix .com typically last is now first.) Example: edu.example.digital-collections.conf Now edit the file... Line 6: change newsite-sample.com to the domain name of your choice Ensure a space between server_name and the domain name and a ; after the domain name still remain. Line 15: change newsite-sample.com to the domain name of your choice Ensure a space between server_name and the domain name and a ; after the domain name still remain. Lines 18 & 19: Change to the name of your ssl certs (should be same names as in previously made apache edits above) Proxy - sites-enabled (multi) Please note: If you only intend to deploy one ISLE environment ever e.g. a Production environment, you do not necessarily have to edit all of the following. You can move onto the next section. Otherwise, if you are planning on running multiple ISLE environments e.g. production, development etc together on one ISLE host server, please continue to edit your .conf file accordingly. Please also note: The order of environment creation is not necessarily important e.g you don't need to setup a development environment prior to a production one. However in general, best practice is to test prior to opening up a server to the public. Line 54: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass https://apache-internal; to proxy_pass https://apache-internal-dev; Line 66: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/adore-djatoka; to proxy_pass http://fedora-internal-dev/adore-djatoka; Line 74: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/fedora/get; to `proxy_pass http://fedora-internal-dev/fedora/get;`` Line 80: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/fedora/services; to proxy_pass http://fedora-internal-dev/fedora/services; Line 86: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/fedora/describe; to proxy_pass http://fedora-internal-dev/fedora/describe; Line 92: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/fedora/risearch; to `proxy_pass http://fedora-internal-dev/fedora/risearch;`` Upon completing all edits, move the resulting file to the first setup ISLE environment proxy/config/sites-enabled directory. Example directory contents with multiple ISLE environment configurations: edu.example.digital-collections-dev.conf edu.example.digital-collections-stage.conf edu.example.digital-collections-prod.conf Proxy - ssl-certs Copy your SSL certs into the ssl-certs subdirectory. DO NOT OVERWRITE OR DELETE the create_dhparam_pem file within this directory. If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. There are also additional links for the enduser to learn how to combine the SSL Certificate File with any available SSL Certificate Chain File for the proxy process to work properly. Copy your SSL certificates for the ISLE Proxy into proxy/ssl-certs . They will and should have different names than the examples provided below. There can only be 2 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem Open a terminal, navigate to the is subdirectory, and run the create_dhparam_pem.sh script in ~/ISLE/config/isle-newsite-sample/proxy/ssl-certs/ subdirectory to create the dhparam.pem file ( if not already. ) This file is critical to the SSL encryption process and for communication between the proxy and apache containers. To run this script from within this subdirectory: ./create_dhparam_pem.sh . This will take 10 -20 mins depending on the speed of your local laptop or workstation. Proxy - ssl-certs (multi) Copy all of your SSL certificates and keys for all environments into the ssl-certs subdirectory. The proxy directory for the first setup ISLE environment is to be used for all following environments due to the current architecture of ISLE. As per the instructions outlined previously in the section Apache - ssl-certs (multi) , when creating multiple environments for ISLE, please change all of the file and key names accordingly to reflect the environment e.g. adding ( -prod, -stage, -dev to file names). Later on, this process will assist in organizing proper filing of files for the proxy container and stop any situation where a file gets overwritten or improperly referenced by the wrong environment. Example: 1 x SSL Certificate Key File e.g. newsite-dev-key.pem 1 x SSL Certificate File e.g. newsite-dev.pem 1 x SSL Certificate Key File e.g. newsite-stage-key.pem 1 x SSL Certificate File e.g. newsite-stage.pem 1 x SSL Certificate Key File e.g. newsite-prod-key.pem 1 x SSL Certificate File e.g. newsite-prod.pem For all following ISLE environments, please delete the proxy directory found within each environments config parent directory. Example: 1st ISLE environment setup: Keep the proxy directory e.g. Keep this ~/opt/ISLE/config/isle-newsite-dev/proxy 2nd ISLE environment setup: Delete the proxy directory e.g. remove this ~/opt/ISLE/config/isle-newsite-stage/proxy 3rd ISLE environment setup: Delete the proxy directorye.g. remove this~/opt/ISLE/config/isle-newsite-prod/proxy and so on... Proxy - upstreams.d Single environment steps only below: Copy and rename: sample-upstreams.conf.disabled to the appropriate domain name of your choice e.g. yourdomain-upstreams-dev.conf while also removing the .disabled suffix. Example A: Lines 10 and 14 look like this for a single environment (no additional environments to be setup). See proxy/config/sites-enable/com.sample-newsite.conf.disabled . Please note: If only ever deploying a single ISLE environment, you could chose not to add any suffixes and ISLE should function properly. This is entirely dependent on your organizational needs. Example: Single Environment (defaults, no edits made) upstream fedora-internal { server fedora:8080 fail_timeout=0; } upstream fedora-internal { server apache:443 fail_timeout=0; } Proxy - upstreams.d (multi) Copy and rename: sample-upstreams.conf.disabled to the appropriate domain name and environment type ( dev, prod, stage, etc... ) of your choice e.g. yourdomain-upstreams-dev.conf while also removing the .disabled suffix. Within the file, append the environment name after all instances of \"internal\" proceeded by a hyphen \"-environment_type\" like the example below: Example A: Lines 10 and 14 look like this for a development environment that will be run alongside more ISLE environments to follow. See proxy/config/sites-enable/com.sample-newsite.conf.disabled . Example: Multi Environment (dev as example) upstream fedora-internal-dev { server fedora:8080 fail_timeout=0; } upstream fedora-internal-dev { server apache:443 fail_timeout=0; } Please note: You do not add additional environment code here e.g. -prod or -stage . Each environment has its own .conf file to manage this seperately. Upon completing all edits, move the resulting file to the first setup ISLE environment proxy/config/upstreams.d directory. Example proxy/config/sites-enabled/ directory contents running multi-environments. edu.example.digital-collections-dev.conf edu.example.digital-collections-prod.conf edu.example.digital-collections-stage.conf Proxy - docker-compose.yml (only multi) Within each new docker-compose.yml file created for each new environment: Delete the proxy section entirely delete Lines 94 proxy: to Line 111. Uncomment Lines 118 & 119 Example: # Defined networks networks: isle-internal: isle-external: # external: true # edit if running a new multi environment # name: isle_isle-internal # edit if running a new multi environment should now become # Defined networks networks: isle-internal: isle-external: external: true name: isle_isle-internal ( optional ) Once you have the 1st ISLE environment running, you can double check this value for later ISLE environments by entering: docker network ls to review current running network types. Example: NETWORK ID NAME DRIVER SCOPE 7361197ad494 bridge bridge local 7d37894dd4ca host host local d4994fca8ea7 isle_isle-external bridge local 22518b818c29 isle_isle-internal bridge local Solr directory The solr subdirectory contains all specific configurations and overrides necessary for the ISLE solr image and resulting container to function properly with your changes. This is the SOLR search server that properly indexes all objects and metadata to provide speedy in-depth search functionality for the Islandora / Drupal site of the objects and collections contained within the Fedora repository. If need be, please refer to the Solr section of the Glossary for relevant terms to help guide installation. Solr - solr ( Optional ) Within the solr subdirectory: Make the appropriate customizations or changes to the following files as you see fit otherwise you can leave these files alone and SOLR will work out of the box. schema.xml solr.xml solrconfig.xml stopwords.txt Solr - tomcat Within the tomcat subdirectory: Strongly recommend adding tomcat user passwords in file: solr/tomcat/tomcat-users.xml on lines 45 & 48. Example: ONLY ADD TOMCAT USERNAME/PASSWORD - can look like this but please use a stronger password with more than 10 alpha-numeric characters. Also note, they should NOT be the same password.: <!-- user manager can access only manager section --> <user username=\u201cmanager\u201d password=\u201ctomcat_manager_password\" roles=\u201cmanager-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> <!-- user admin can access manager and admin section both --> <user username=\u201cadmin\u201d password=\u201ctomcat_admin_password\u201d roles=\u201cmanager-gui,admin-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> </tomcat-users> Final steps If need be, please refer to the Git section of the Glossary for relevant terms to help guide installation. Now that all the changes are made (be sure to save), ISLE should be ready to test. First you'll need to push these changes to your private code repository. Open a terminal - cd to the config directory you've been making the changes in... git status this will show you all the files that have been modified and ready to be added to your private repo along with handy paths for the next steps. git add /pathtoyourmodifiedfile (replace \"pathtoyourmodifiedfile\" with the path to your config directory) run these: git add apache git add fedora git add mysql git add proxy git add solr git add docker-compose.yml git add newsite-sample-cheatsheet.md Enter git status again - everything should be in green now as all modified files have been added - if anything's still red use git add and the path to add it then run git commit -m \"initial config commit\" inside the double quotes is the commit message you can say whatever you want in this message - so for example if this is the config for your dev instance you could say that... Enter git push origin master This will push all your changes to the repo. Further changes should be made on git branches for different servers or environments e.g. prod, stage, dev or to master branch for this same server. Clone Custom Configuration to Host Server Please note: If running a (multi) ISLE environment, you will make separate git config directories to this effect and repeat these steps accordingly. Open a terminal - ssh into your host server using the islandora user cd to /opt/ISLE/config/ Because your customizations are in a private repository, you'll need to add this islandora user's id_rsa.pub key to the git repository settings via it's settings profile within the appropriate website. This key is found in /home/islandora/.ssh/id_rsa.pub One can simply run cat /home/islandora/.ssh/id_rsa.pub and copy the output (ensure no whitespaces or extra returns) Go to the repository web site with a browser and locate your private repository. Locate the ssh key entry location (in Bitbucket this is in Settings / Access Keys / Add an ssh key w/ the label isle host server islandora deploy user paste in the key text and click Add Key Back at your terminal command line, run git clone URLpathtoyourremoteprivaterepo.git . (replacing \"URLpathtoyourremoteprivaterepo\" with the URL to the repository provided by the website) cd into the newly cloned directory Spin up ISLE containers! run docker-compose up -d run docker exec -it yourApacheContainerNameHere bash Using the name from the docker-composer.yml file here ( typically: isle-apache-prod, or -stage, etc... ) cd /tmp/isle_drupal_build_tools Run: ./install_new_site.sh Give this process 15 - 25 minutes ( depending on the speed of the ISLE Host server internet connection ) Check the newly created and running new site by opening a browser and navigating to your site domain e.g. https://digital-collections.example.edu , you should now see an un-themed Drupal site.","title":"New Site Installation Guide - w/ multiple ISLE Environments"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#index-of-related-documents","text":"New Site Example User Story Please note: There is a Glossary with relevant terms to help guide installation.","title":"Index of related documents"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#assumptions-prerequisites","text":"Comfortability with ISLE. Recommend first setting up the ISLE Test Site ( isle.localdomain ) via the Install Start Here guide. If you have already done this, please proceed. Host Server that conforms to the specifications outlined in the Host Server Specifications This new site guide is designed for a Host server that has already followed the appropriate setup and configuration instructions in the Create a new ISLE site section of the Install Start Here guide. Instructions below also assume a MacOS or Linux laptop or workstation to be used in conjunction with the ISLE Host Server for deploying configs, code, files etc. Windows users may have to adjust / swap out various tools as needed. These directions also depend on the type of local computer used to connect via browser to Islandora. Have an existing domain name that works - is set up with DNS etc... Have SSL Certificates previously created for the web domain. ( Please work with the appropriate internal IT resource to provision these files for your domain ) ISLE project has been cloned to BOTH your local laptop/workstation AND the ISLE host server","title":"Assumptions / Prerequisites"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#multiple-isle-islandora-environments","text":"When attempting to configure multiple ISLE / Islandora environments, all sections labeled (multi) provide additional steps to follow and/or repeat. This is primarily because only one proxy container is needed to manage all ISLE environments (e.g. production, staging and development) on one ISLE Host Server or VM. When deploying multiple ISLE environments on one ISLE host server, a few extra steps are needed as well. Once the initial ISLE environment has been setup for all following environments, you'll need to please do the following: Continue to use / copy the isle-newsite-sample directory for any new or additional ISLE environments as directed above. Per each section with a (multi) indicated, edit files accordingly but be aware that you'll be moving them into the appropriate subdirectory of the first created ISLE environment's proxy directory. No other ISLE environments are to a) use their own proxy directory and b) have a proxy: section within their separate docker-compose.yml files. Only use one proxy for multi ISLE environments. This container will route connections and traffic properly, keeping environments separate and data siloed. Example: Multiple ISLE environments enabled within the first ISLE config using a single proxy . In this example the dev ISLE environment was created first for testing and additional environments stage and prod (production) were added but are still controlled by the proxy config within the first created ISLE environment dev . This is what the final results should look like. Please note, you could run more than one site this way and are only limited by the appropriate resources of your ISLE host server. \u251c\u2500\u2500 isle-newsite-dev.yourdomain.edu (1st ISLE environment created with proxy subdirectory and proxy: section in its docker-compose.yml) \u2502 \u2514\u2500\u2500 proxy \u2502 \u2514\u2500\u2500 config \u2502 \u251c\u2500\u2500 sites-enabled \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev.conf \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod.conf \u2502 \u2502 \u2514\u2500\u2500 edu.example.digital-collections-stage.conf \u2502 \u251c\u2500\u2500 ssl-certs \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev-interm.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev-key.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod-interm.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod-key.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-stage-interm.pem \u2502 \u2502 \u251c\u2500\u2500 edu.example.digital-collections-stage-key.pem \u2502 \u2502 \u2514\u2500\u2500 edu.example.digital-collections-stage.pem \u2502 \u2514\u2500\u2500 upstreams.d \u2502 \u251c\u2500\u2500 edu.example.digital-collections-dev.conf \u2502 \u251c\u2500\u2500 edu.example.digital-collections-prod.conf \u2502 \u2514\u2500\u2500 edu.example.digital-collections-stage.conf | \u251c\u2500\u2500 isle-newsite-prod.yourdomain.edu (3rd ISLE environment created, no proxy subdirectory, no proxy: section in its docker-compose.yml) | \u251c\u2500\u2500 isle-newsite-sample | \u2514\u2500\u2500 isle-newsite-stage.yourdomain.edu (2nd ISLE environment created, no proxy subdirectory, no proxy section in its docker-compose.yml)","title":"Multiple ISLE / Islandora Environments"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#overview","text":"Setup a Private Code Repository Most of the work in this guide involves careful editing of the various configuration and settings files that customize the pieces of Islandora (database, repository, web-server, etc...). Doing this work in a code repository makes it easier to correct errors and to repeat the process for additional servers without needing to replicate all the work. Since the edits could include things like passwords, it's important to make this a private repository. Customizing for your Environment Many of the steps below describe adding the domain name or other specific bits of information into files or appending those bits to file names. In these cases this guide will call out the customization point AND provide an example - it's important not to literally copy paste the example!","title":"Overview"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#create-private-code-repository","text":"ON your local laptop/workstation: Using a git repository of your choice (GitHub, GitLab, Bitbucket, etc.) create a PRIVATE remote git repo - see the specific code repository documentation online for setup instructions. Open a terminal - navigate to /opt/ISLE/config ( or where you put the ISLE directory on your local workstation. ) Create a new directory with a name of your choice Example: where \"digital-collections.yourdomain.com\" is your server domain name e.g.: config/digital-collections.example.edu Please do not use this literal value. Locate the directory within the /opt/ISLE/config/ directory called isle-newsite-sample and copy all of its contents into your newly created directory. cd into the newly copied and renamed digital-collections.example.edu directory and type: git init to imitate this directory as a code repository. git remote add NameOfYourRepository URLofYourRepository to connect your local repository to the remote you set up in the above steps. [ NOTE replace \"NameOfYourRepository\" and \"URLofYourRepository\" with the name of your git repository and its URL] You are now ready to perform the customization edits in this directory (you can use a text editor of choice now don't have to stay in terminal - just locate the folder in the finder and open file in text editor)","title":"Create Private Code Repository"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#edits","text":"","title":"Edits"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#docker-compose-file","text":"Edit the file: docker-compose.yml accordingly: Change container names based on the environment (prod, stage, dev, etc) For example if you are building a dev server instance: container_name: isle-solr-newsite changes to: container_name: isle-solr-dev and so on... Please note: Much of the file is already with comments guiding the enduser to key areas or files to edit or modify accordingly.","title":"Docker compose file:"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#config-directories","text":"Now proceed to make edits to files within the config subdirectories: a. to reflect environment (prod, stage, dev, etc...) b. to involve your domain name (digital-collections.example.edu) There are five subdirectories which have the appropriate settings for each respective container and service: apache fedora mysql proxy solr","title":"Config directories"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#apache-directory","text":"The apache subdirectory contains all specific configurations and overrides necessary for the ISLE apache image and resulting container to function properly with your changes. This is the webserver that serves the Islandora / Drupal website. ( Optional ) Edit the php.ini file to change various appropriate settings if needed otherwise leave alone. Example - Line 820: change the upload_max_filesize = 2000M to a higher setting if desired. Currently at a 2GB upload limit. Edit the file: settings.php Lines 251-253: add your database name, database user, and database password Line 288: to include a 45+ alpha-numeric characters drupal hash between the quotes after this text: $drupal_hash_salt = ''; You'll need to create this value, recommend using a password generator tool. Ensure only alpha-numeric characters are used, no symbols etc. Line 311: Review and ensure # $base_url = is still commented out Edit the file: install_new_site.sh line 29: /usr/local/bin/drush site-install -y --account-name=newsite_admin --account-pass=newsite_adminpw --account-mail=admin@newsite.com --site-name=\"ISLE New Site Sample\" Change the following values in that line above to the appropriate names and passwords for your site. --account-name= Drupal admin account --account-pass= Drupal admin account password --account-mail= Email address that can be associated with Drupal admin account --site-name= Name of your new ISLE website","title":"Apache directory"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#apache-sites-enabled","text":"Within the sites-enabled directory, rename the files newsite-sample-ssl.conf and newsite-sample.conf to your domain names - example: digital-collections.example.edu_ssl.conf digital-collections.example.edu.conf Edit the previously named newsite-sample.conf file and change lines 3 and 4 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 4 and 5 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 12 and 13 to point to the location of your certs on the container - example: SSLCertificateFile /certs/newsite-sample.pem SSLCertificateChainFile /certs/newsite-sample-interm.pem SSLCertificateKeyFile /certs/newsite-sample-key.pem","title":"Apache - sites-enabled"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#apache-ssl-certs","text":"If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. Copy your SSL certificates for Apache into the apache/ssl-certs subdirectory. They will and should have different names than the examples provided below dependent on the ISLE environment you are setting up e.g. ( production, staging or development ). There can be up to 2 - 3 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem 1 x SSL Certificate Chain File e.g. newsite-sample-interm.pem This file may be optional in some setups but is generally recommended for use by the apache container when available. It will not be used by the proxy container. Please also note that the file extensions can also be: .cer , .crt or .pem","title":"Apache - ssl-certs"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#apache-ssl-certs-multi","text":"When creating multiple environments for ISLE, please change all of the file and key names accordingly to reflect the environment e.g. adding ( -prod, -stage, -dev to file names). Later on, this process will assist in organizing proper filing of files for the proxy container and stop any situation where a file gets overwritten or improperly referenced by the wrong environment. Example: * 1 x SSL Certificate Key File e.g. `newsite-dev-key.pem` * 1 x SSL Certificate File e.g. `newsite-dev.pem` * 1 x SSL Certificate Chain File e.g. `newsite-dev-interm.pem`","title":"Apache - ssl-certs (multi)"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#apache-tmpreaper","text":"( Optional ) Edit the cron file within the apache/tmpreaper subdirectory to change various appropriate settings if needed otherwise leave alone if you are not familiar with how cron jobs work. Currently this cronjob is set to run every 12 hours and using the tmpreaper utility to clean out and delete the contents of the /tmp folder if they are older than 4 days.","title":"Apache - tmpreaper"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#fedora-directory","text":"The fedora subdirectory contains all specific configurations and overrides necessary for the ISLE fedora image and resulting container to function properly with your changes. This is the Fedora repository that will contain all objects, metadata etc.","title":"Fedora directory"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#fedora-fedora","text":"Within the fedora/fedora subdirectory, add new passwords in the following files: Lines 3, 8, 14: fedora-users.xml (change all applicable passwords for fedora users) Line 598: fedora.fcfg (change the password to the fedora_admin database user password only) Line 15: filter-drupal.xml (change the associated Drupal site database name , user and password, do not use settings for the fedora3 database.) ( Optional ) Edit either of the log4j.properties or logback.xml files to change logging levels for the fedora container if needed, otherwise leave alone. Please note: If making changes, you'll need to then edit the docker-compose.yml file accordingly in the fedora volumes section Example add a line to make changes for the Fedora application logging. - ./fedora/fedora/logback.xml :/usr/local/fedora/server/config/logback.xml Example add a line to make changes for the Djatoka application logging. - ./fedora/fedora/logback.xml :/usr/local/tomcat/webapps/adore-djatoka/WEB-INF/classes/log4j.properties ( Optional ) Edit the contents of the repository-policies subdirectory as necessary IF YOU NEED TO , otherwise leave alone.","title":"Fedora - fedora"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#fedora-gsearch","text":"Within the fedora/gsearch subdirectory, edit the file: fedoragsearch.properties at line 7 and add a space after the equal sign and then add the new gsearch fgsAdmin user password . - fedoragsearch.soapPass = new_fgsAdmin_password_here Edit the file: fgsconfig-basic-configForIslandora.properties Line 26: add the new gsearch fgsAdmin user password . gsearchPass=new_fgsAdmin_password_here Line 67: Add the new fedora fedora admin password . fedoraPass=new_fedoraAdmin_password_here Edit the file: fedora/gsearch/fgsconfigObjects.properties at line 15 and add a space after the equal sign and then add the new fedora admin password . fgsconfigObjects.fedoraPass = new_fedoraAdmin_password_here Edit the file: fedora/gsearch/repository.properties at line 7 and add a space after the equal sign and then add the new fedora admin password . fgsrepository.fedoraPass = new_fedoraAdmin_password_here","title":"Fedora - gsearch"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#fedora-tmpreaper","text":"( Optional ) Edit the cron file within fedora/tmpreaper to change various appropriate settings if needed otherwise leave alone if you are not familiar with how cron jobs work. Currently this cronjob is set to run every 12 hours and using the tmpreaper utility to clean out and delete the contents of the /tmp folder if they are older than 4 days.","title":"Fedora - tmpreaper"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#fedora-tomcat","text":"Within the tomcat subdirectory: Strongly recommend adding tomcat user passwords in file: fedora/tomcat/tomcat-users.xml Example: ONLY ADD TOMCAT USERNAME/PASSWORD - can look like this but please use a stronger password with more than 10 alpha-numeric characters. Also note, they should NOT be the same password.: <!-- user manager can access only manager section --> <user username=\u201cmanager\u201d password=\u201ctomcat_manager_password\" roles=\u201cmanager-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> <!-- user admin can access manager and admin section both --> <user username=\u201cadmin\u201d password=\u201ctomcat_admin_password\u201d roles=\u201cmanager-gui,admin-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> </tomcat-users>","title":"Fedora - tomcat"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#mysql-directory","text":"The mysql subdirectory contains all specific configurations and overrides necessary for the ISLE mysql image and resulting container to function properly with your changes. This is the Mysql database server that will contain two databases, one for the Islandora / Drupal website and the other for the Fedora repository. ( Optional ) Edit the Mysql configuration file my.cnf as needed otherwise leave alone.","title":"Mysql directory"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#mysql-initscripts","text":"This subdirectory houses SQL scripts necessary for a one time creation of your associated new site and fedora3 database. You'll want to rename newsite_sample_db.sql to the database or domain name of your choice. Edit the contents of newsite_sample_db.sql to create the new drupal site database and user. Line 1: Change the database name from newsite_sample_db to the database name of your choice. Line 2: Change the database user name from newsite_sample_db_user to the database user name of your choice. Line 3: At almost the end of the line, change the value of newsite_sample_db.* to the to the database name of your choice ensuring the .* remain without a space. Line 3: At the end of the line, change the value of newsite_sample_db_user' to the to the database user name of your choice ensuring the values remain with in the '' quotes without spaces. Do not alter the remaining code ( @'%';' ) beyond that point. Edit the contents of fedora3 to change the fedora_admin user password only. Line 2: Change the fedora_admin user password from newsite_sample_fedora_admin_pw to the password of your choice. It is not recommended to change anything else.","title":"Mysql - initscripts"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#proxy-directory","text":"If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. The proxy subdirectory contains all specific configurations and overrides necessary for the ISLE proxy image and resulting container to function properly with your changes. This is the Nginx reverse proxy server that properly routes all internal and external communication between the other four containers and the ISLE Host network.","title":"Proxy directory"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#proxy-sites-enabled","text":"In the config/sites-enabled subdirectory, rename the com.sample-newsite.conf file to com.yourdomain.conf (where \"yourdomain\" is the domain name of your server but the suffix .com typically last is now first.) Example: edu.example.digital-collections.conf Now edit the file... Line 6: change newsite-sample.com to the domain name of your choice Ensure a space between server_name and the domain name and a ; after the domain name still remain. Line 15: change newsite-sample.com to the domain name of your choice Ensure a space between server_name and the domain name and a ; after the domain name still remain. Lines 18 & 19: Change to the name of your ssl certs (should be same names as in previously made apache edits above)","title":"Proxy - sites-enabled"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#proxy-sites-enabled-multi","text":"Please note: If you only intend to deploy one ISLE environment ever e.g. a Production environment, you do not necessarily have to edit all of the following. You can move onto the next section. Otherwise, if you are planning on running multiple ISLE environments e.g. production, development etc together on one ISLE host server, please continue to edit your .conf file accordingly. Please also note: The order of environment creation is not necessarily important e.g you don't need to setup a development environment prior to a production one. However in general, best practice is to test prior to opening up a server to the public. Line 54: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass https://apache-internal; to proxy_pass https://apache-internal-dev; Line 66: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/adore-djatoka; to proxy_pass http://fedora-internal-dev/adore-djatoka; Line 74: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/fedora/get; to `proxy_pass http://fedora-internal-dev/fedora/get;`` Line 80: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/fedora/services; to proxy_pass http://fedora-internal-dev/fedora/services; Line 86: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/fedora/describe; to proxy_pass http://fedora-internal-dev/fedora/describe; Line 92: Add the appropriate environment suffix e.g. -prod, -stage, -dev etc. Example: Change proxy_pass http://fedora-internal/fedora/risearch; to `proxy_pass http://fedora-internal-dev/fedora/risearch;`` Upon completing all edits, move the resulting file to the first setup ISLE environment proxy/config/sites-enabled directory. Example directory contents with multiple ISLE environment configurations: edu.example.digital-collections-dev.conf edu.example.digital-collections-stage.conf edu.example.digital-collections-prod.conf","title":"Proxy - sites-enabled (multi)"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#proxy-ssl-certs","text":"Copy your SSL certs into the ssl-certs subdirectory. DO NOT OVERWRITE OR DELETE the create_dhparam_pem file within this directory. If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. There are also additional links for the enduser to learn how to combine the SSL Certificate File with any available SSL Certificate Chain File for the proxy process to work properly. Copy your SSL certificates for the ISLE Proxy into proxy/ssl-certs . They will and should have different names than the examples provided below. There can only be 2 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem Open a terminal, navigate to the is subdirectory, and run the create_dhparam_pem.sh script in ~/ISLE/config/isle-newsite-sample/proxy/ssl-certs/ subdirectory to create the dhparam.pem file ( if not already. ) This file is critical to the SSL encryption process and for communication between the proxy and apache containers. To run this script from within this subdirectory: ./create_dhparam_pem.sh . This will take 10 -20 mins depending on the speed of your local laptop or workstation.","title":"Proxy - ssl-certs"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#proxy-ssl-certs-multi","text":"Copy all of your SSL certificates and keys for all environments into the ssl-certs subdirectory. The proxy directory for the first setup ISLE environment is to be used for all following environments due to the current architecture of ISLE. As per the instructions outlined previously in the section Apache - ssl-certs (multi) , when creating multiple environments for ISLE, please change all of the file and key names accordingly to reflect the environment e.g. adding ( -prod, -stage, -dev to file names). Later on, this process will assist in organizing proper filing of files for the proxy container and stop any situation where a file gets overwritten or improperly referenced by the wrong environment. Example: 1 x SSL Certificate Key File e.g. newsite-dev-key.pem 1 x SSL Certificate File e.g. newsite-dev.pem 1 x SSL Certificate Key File e.g. newsite-stage-key.pem 1 x SSL Certificate File e.g. newsite-stage.pem 1 x SSL Certificate Key File e.g. newsite-prod-key.pem 1 x SSL Certificate File e.g. newsite-prod.pem For all following ISLE environments, please delete the proxy directory found within each environments config parent directory. Example: 1st ISLE environment setup: Keep the proxy directory e.g. Keep this ~/opt/ISLE/config/isle-newsite-dev/proxy 2nd ISLE environment setup: Delete the proxy directory e.g. remove this ~/opt/ISLE/config/isle-newsite-stage/proxy 3rd ISLE environment setup: Delete the proxy directorye.g. remove this~/opt/ISLE/config/isle-newsite-prod/proxy and so on...","title":"Proxy - ssl-certs (multi)"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#proxy-upstreamsd","text":"Single environment steps only below: Copy and rename: sample-upstreams.conf.disabled to the appropriate domain name of your choice e.g. yourdomain-upstreams-dev.conf while also removing the .disabled suffix. Example A: Lines 10 and 14 look like this for a single environment (no additional environments to be setup). See proxy/config/sites-enable/com.sample-newsite.conf.disabled . Please note: If only ever deploying a single ISLE environment, you could chose not to add any suffixes and ISLE should function properly. This is entirely dependent on your organizational needs. Example: Single Environment (defaults, no edits made) upstream fedora-internal { server fedora:8080 fail_timeout=0; } upstream fedora-internal { server apache:443 fail_timeout=0; }","title":"Proxy - upstreams.d"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#proxy-upstreamsd-multi","text":"Copy and rename: sample-upstreams.conf.disabled to the appropriate domain name and environment type ( dev, prod, stage, etc... ) of your choice e.g. yourdomain-upstreams-dev.conf while also removing the .disabled suffix. Within the file, append the environment name after all instances of \"internal\" proceeded by a hyphen \"-environment_type\" like the example below: Example A: Lines 10 and 14 look like this for a development environment that will be run alongside more ISLE environments to follow. See proxy/config/sites-enable/com.sample-newsite.conf.disabled . Example: Multi Environment (dev as example) upstream fedora-internal-dev { server fedora:8080 fail_timeout=0; } upstream fedora-internal-dev { server apache:443 fail_timeout=0; } Please note: You do not add additional environment code here e.g. -prod or -stage . Each environment has its own .conf file to manage this seperately. Upon completing all edits, move the resulting file to the first setup ISLE environment proxy/config/upstreams.d directory. Example proxy/config/sites-enabled/ directory contents running multi-environments. edu.example.digital-collections-dev.conf edu.example.digital-collections-prod.conf edu.example.digital-collections-stage.conf","title":"Proxy - upstreams.d (multi)"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#proxy-docker-composeyml-only-multi","text":"Within each new docker-compose.yml file created for each new environment: Delete the proxy section entirely delete Lines 94 proxy: to Line 111. Uncomment Lines 118 & 119 Example: # Defined networks networks: isle-internal: isle-external: # external: true # edit if running a new multi environment # name: isle_isle-internal # edit if running a new multi environment should now become # Defined networks networks: isle-internal: isle-external: external: true name: isle_isle-internal ( optional ) Once you have the 1st ISLE environment running, you can double check this value for later ISLE environments by entering: docker network ls to review current running network types. Example: NETWORK ID NAME DRIVER SCOPE 7361197ad494 bridge bridge local 7d37894dd4ca host host local d4994fca8ea7 isle_isle-external bridge local 22518b818c29 isle_isle-internal bridge local","title":"Proxy - docker-compose.yml (only multi)"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#solr-directory","text":"The solr subdirectory contains all specific configurations and overrides necessary for the ISLE solr image and resulting container to function properly with your changes. This is the SOLR search server that properly indexes all objects and metadata to provide speedy in-depth search functionality for the Islandora / Drupal site of the objects and collections contained within the Fedora repository. If need be, please refer to the Solr section of the Glossary for relevant terms to help guide installation.","title":"Solr directory"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#solr-solr","text":"( Optional ) Within the solr subdirectory: Make the appropriate customizations or changes to the following files as you see fit otherwise you can leave these files alone and SOLR will work out of the box. schema.xml solr.xml solrconfig.xml stopwords.txt","title":"Solr - solr"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#solr-tomcat","text":"Within the tomcat subdirectory: Strongly recommend adding tomcat user passwords in file: solr/tomcat/tomcat-users.xml on lines 45 & 48. Example: ONLY ADD TOMCAT USERNAME/PASSWORD - can look like this but please use a stronger password with more than 10 alpha-numeric characters. Also note, they should NOT be the same password.: <!-- user manager can access only manager section --> <user username=\u201cmanager\u201d password=\u201ctomcat_manager_password\" roles=\u201cmanager-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> <!-- user admin can access manager and admin section both --> <user username=\u201cadmin\u201d password=\u201ctomcat_admin_password\u201d roles=\u201cmanager-gui,admin-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> </tomcat-users>","title":"Solr - tomcat"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#final-steps","text":"If need be, please refer to the Git section of the Glossary for relevant terms to help guide installation. Now that all the changes are made (be sure to save), ISLE should be ready to test. First you'll need to push these changes to your private code repository. Open a terminal - cd to the config directory you've been making the changes in... git status this will show you all the files that have been modified and ready to be added to your private repo along with handy paths for the next steps. git add /pathtoyourmodifiedfile (replace \"pathtoyourmodifiedfile\" with the path to your config directory) run these: git add apache git add fedora git add mysql git add proxy git add solr git add docker-compose.yml git add newsite-sample-cheatsheet.md Enter git status again - everything should be in green now as all modified files have been added - if anything's still red use git add and the path to add it then run git commit -m \"initial config commit\" inside the double quotes is the commit message you can say whatever you want in this message - so for example if this is the config for your dev instance you could say that... Enter git push origin master This will push all your changes to the repo. Further changes should be made on git branches for different servers or environments e.g. prod, stage, dev or to master branch for this same server.","title":"Final steps"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#clone-custom-configuration-to-host-server","text":"Please note: If running a (multi) ISLE environment, you will make separate git config directories to this effect and repeat these steps accordingly. Open a terminal - ssh into your host server using the islandora user cd to /opt/ISLE/config/ Because your customizations are in a private repository, you'll need to add this islandora user's id_rsa.pub key to the git repository settings via it's settings profile within the appropriate website. This key is found in /home/islandora/.ssh/id_rsa.pub One can simply run cat /home/islandora/.ssh/id_rsa.pub and copy the output (ensure no whitespaces or extra returns) Go to the repository web site with a browser and locate your private repository. Locate the ssh key entry location (in Bitbucket this is in Settings / Access Keys / Add an ssh key w/ the label isle host server islandora deploy user paste in the key text and click Add Key Back at your terminal command line, run git clone URLpathtoyourremoteprivaterepo.git . (replacing \"URLpathtoyourremoteprivaterepo\" with the URL to the repository provided by the website) cd into the newly cloned directory","title":"Clone Custom Configuration to Host Server"},{"location":"03_installation_new_site/new_site_installation_guide_multi/#spin-up-isle-containers","text":"run docker-compose up -d run docker exec -it yourApacheContainerNameHere bash Using the name from the docker-composer.yml file here ( typically: isle-apache-prod, or -stage, etc... ) cd /tmp/isle_drupal_build_tools Run: ./install_new_site.sh Give this process 15 - 25 minutes ( depending on the speed of the ISLE Host server internet connection ) Check the newly created and running new site by opening a browser and navigating to your site domain e.g. https://digital-collections.example.edu , you should now see an un-themed Drupal site.","title":"Spin up ISLE containers!"},{"location":"03_installation_new_site/new_site_installation_guide_single/","text":"This guide documents how an enduser can spin up and install a single ISLE / Islandora environment tailored to use only one unique domain / URL and one ISLE environment. A new ISLE / Islandora environment can include the option to create an un-themed Drupal website and empty Fedora repository for endusers to develop code, perform ingests, edit metadata, update fields in SOLR indexing all essential in ultimately creating a new ISLE production site. While this checklist will attempt to point out most of the usage challenges or pitfalls, ISLE assumes no responsibility or liability in this matter should an enduser have customizations beyond what this guide outlines. Please note: There is a Glossary with relevant terms to help guide installation. Index of related documents New Site Example User Story Assumptions / Prerequisites Comfortability with ISLE. Recommend first setting up the ISLE Test Site ( isle.localdomain ) via the Install Start Here guide. If you have already done this, please proceed. Host Server that conforms to the specifications outlined in the Host Server Specifications This new site guide is designed for a single ISLE Host server that has already followed the appropriate setup and configuration instructions in the Create a new ISLE site section of the Install Start Here guide. Instructions below also assume a MacOS or Linux laptop or workstation to be used in conjunction with the ISLE Host Server for deploying configs, code, files etc. Windows users may have to adjust / swap out various tools as needed. These directions also depend on the type of local computer used to connect via browser to Islandora. Have an existing domain name that works - is set up with DNS etc... Have SSL Certificates previously created for the web domain. ( Please work with the appropriate internal IT resource to provision these files for your domain ) ISLE project has been cloned to BOTH your local laptop/workstation AND the ISLE host server Overview Setup a Private Code Repository Most of the work in this guide involves careful editing of the various configuration and settings files that customize the pieces of Islandora (database, repository, web-server, etc...). Doing this work in a code repository makes it easier to correct errors and to repeat the process for additional servers without needing to replicate all the work. Since the edits could include things like passwords, it's important to make this a private repository. Customizing for your Environment Many of the steps below describe adding the domain name or other specific bits of information into files or appending those bits to file names. In these cases this guide will call out the customization point AND provide an example - it's important not to literally copy paste the example! Create Private Code Repository ON your local laptop/workstation: Using a git repository of your choice (GitHub, GitLab, Bitbucket, etc.) create a PRIVATE remote git repo - see the specific code repository documentation online for setup instructions. Open a terminal - navigate to /opt/ISLE/config ( or where you put the ISLE directory on your local workstation. ) Create a new directory with a name of your choice Example: where \"digital-collections.yourdomain.com\" is your server domain name e.g.: config/digital-collections.example.edu Please do not use this literal value. Locate the directory within the /opt/ISLE/config/ directory called isle-newsite-sample and copy all of its contents into your newly created directory. cd into the newly copied and renamed digital-collections.example.edu directory and type: git init to imitate this directory as a code repository. git remote add NameOfYourRepository URLofYourRepository to connect your local repository to the remote you set up in the above steps. [ NOTE replace \"NameOfYourRepository\" and \"URLofYourRepository\" with the name of your git repository and its URL] You are now ready to perform the customization edits in this directory (you can use a text editor of choice now don't have to stay in terminal - just locate the folder in the finder and open file in text editor) Edits Docker compose file: Edit the file: docker-compose.yml accordingly: Change container names (you could do this based on the environment (e.g. prod) For example if you are building a prod server instance: container_name: isle-solr-newsite changes to: container_name: isle-solr-prod and so on... Please note: Much of the file is already with comments guiding the enduser to key areas or files to edit or modify accordingly. Config directories Now proceed to make edits to files within the config subdirectories: a. to reflect environment (prod, stage, dev, etc...) b. to involve your domain name (digital-collections.example.edu) There are five subdirectories which have the appropriate settings for each respective container and service: apache fedora mysql proxy solr Apache directory The apache subdirectory contains all specific configurations and overrides necessary for the ISLE apache image and resulting container to function properly with your changes. This is the webserver that serves the Islandora / Drupal website. ( Optional ) Edit the php.ini file to change various appropriate settings if needed otherwise leave alone. Example - Line 820: change the upload_max_filesize = 2000M to a higher setting if desired. Currently at a 2GB upload limit. Edit the file: settings.php Lines 251-253: add your database name, database user, and database password Line 288: to include a 45+ alpha-numeric characters drupal hash between the quotes after this text: $drupal_hash_salt = ''; You'll need to create this value, recommend using a password generator tool. Ensure only alpha-numeric characters are used, no symbols etc. Line 311: Review and ensure # $base_url = is still commented out Edit the file: install_new_site.sh line 29: /usr/local/bin/drush site-install -y --account-name=newsite_admin --account-pass=newsite_adminpw --account-mail=admin@newsite.com --site-name=\"ISLE New Site Sample\" Change the following values in that line above to the appropriate names and passwords for your site. --account-name= Drupal admin account --account-pass= Drupal admin account password --account-mail= Email address that can be associated with Drupal admin account --site-name= Name of your new ISLE website Apache - sites-enabled Within the sites-enabled directory, rename the files newsite-sample-ssl.conf and newsite-sample.conf to your domain names - example: digital-collections.example.edu_ssl.conf digital-collections.example.edu.conf Edit the previously named newsite-sample.conf file and change lines 3 and 4 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 4 and 5 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 12, 13 and 14 to point to the location of your certs on the apache container - example: SSLCertificateFile /certs/newsite-sample.pem SSLCertificateChainFile /certs/newsite-sample-interm.pem SSLCertificateKeyFile /certs/newsite-sample-key.pem Apache - ssl-certs If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. Copy your SSL certificates for Apache into the apache/ssl-certs subdirectory. They will and should have different names than the examples provided below dependent on the ISLE environment you are setting up e.g. ( production, staging or development ). There can be up to 2 - 3 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem 1 x SSL Certificate Chain File e.g. newsite-sample-interm.pem This file may be optional in some setups but is generally recommended for use by the apache container when available. It will not be used by the proxy container. Please also note that the file extensions can also be: .cer , .crt or .pem Apache - tmpreaper ( Optional ) Edit the cron file within the apache/tmpreaper subdirectory to change various appropriate settings if needed otherwise leave alone if you are not familiar with how cron jobs work. Currently this cronjob is set to run every 12 hours and using the tmpreaper utility to clean out and delete the contents of the /tmp folder if they are older than 4 days. Fedora directory The fedora subdirectory contains all specific configurations and overrides necessary for the ISLE fedora image and resulting container to function properly with your changes. This is the Fedora repository that will contain all objects, metadata etc. Fedora - fedora Within the fedora/fedora subdirectory, add new passwords in the following files: Lines 3, 8, 14: fedora-users.xml (change all applicable passwords for fedora users) Line 598: fedora.fcfg (change the password to the fedora_admin database user password only) Line 15: filter-drupal.xml (change the associated Drupal site database name , user and password, do not use settings for the fedora3 database.) ( Optional ) Edit either of the log4j.properties or logback.xml files to change logging levels for the fedora container if needed, otherwise leave alone. Please note: If making changes, you'll need to then edit the docker-compose.yml file accordingly in the fedora volumes section Example add a line to make changes for the Fedora application logging. - ./fedora/fedora/logback.xml :/usr/local/fedora/server/config/logback.xml Example add a line to make changes for the Djatoka application logging. - ./fedora/fedora/logback.xml :/usr/local/tomcat/webapps/adore-djatoka/WEB-INF/classes/log4j.properties ( Optional ) Edit the contents of the repository-policies subdirectory as necessary IF YOU NEED TO , otherwise leave alone. Fedora - gsearch Within the fedora/gsearch subdirectory, edit the file: fedoragsearch.properties at line 7 and add a space after the equal sign and then add the new gsearch fgsAdmin user password . - fedoragsearch.soapPass = new_fgsAdmin_password_here Edit the file: fgsconfig-basic-configForIslandora.properties Line 26: add the new gsearch fgsAdmin user password . gsearchPass=new_fgsAdmin_password_here Line 67: Add the new fedora fedora admin password . fedoraPass=new_fedoraAdmin_password_here Edit the file: fedora/gsearch/fgsconfigObjects.properties at line 15 and add a space after the equal sign and then add the new fedora admin password . fgsconfigObjects.fedoraPass = new_fedoraAdmin_password_here Edit the file: fedora/gsearch/repository.properties at line 7 and add a space after the equal sign and then add the new fedora admin password . fgsrepository.fedoraPass = new_fedoraAdmin_password_here Fedora - tmpreaper ( Optional ) Edit the cron file within fedora/tmpreaper to change various appropriate settings if needed otherwise leave alone if you are not familiar with how cron jobs work. Currently this cronjob is set to run every 12 hours and using the tmpreaper utility to clean out and delete the contents of the /tmp folder if they are older than 4 days. Fedora - tomcat Within the tomcat subdirectory: Strongly recommend adding tomcat user passwords in file: fedora/tomcat/tomcat-users.xml Example: ONLY ADD TOMCAT USERNAME/PASSWORD - can look like this but please use a stronger password with more than 10 alpha-numeric characters. Also note, they should NOT be the same password.: <!-- user manager can access only manager section --> <user username=\u201cmanager\u201d password=\u201ctomcat_manager_password\" roles=\u201cmanager-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> <!-- user admin can access manager and admin section both --> <user username=\u201cadmin\u201d password=\u201ctomcat_admin_password\u201d roles=\u201cmanager-gui,admin-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> </tomcat-users> Mysql directory The mysql subdirectory contains all specific configurations and overrides necessary for the ISLE mysql image and resulting container to function properly with your changes. This is the Mysql database server that will contain two databases, one for the Islandora / Drupal website and the other for the Fedora repository. ( Optional ) Edit the Mysql configuration file my.cnf as needed otherwise leave alone. Mysql - initscripts This subdirectory houses SQL scripts necessary for a one time creation of your associated new site and fedora3 database. You'll want to rename newsite_sample_db.sql to the database or domain name of your choice. Edit the contents of newsite_sample_db.sql to create the new drupal site database and user. Line 1: Change the database name from newsite_sample_db to the database name of your choice. Line 2: Change the database user name from newsite_sample_db_user to the database user name of your choice. Line 3: At almost the end of the line, change the value of newsite_sample_db.* to the to the database name of your choice ensuring the .* remain without a space. Line 3: At the end of the line, change the value of newsite_sample_db_user' to the to the database user name of your choice ensuring the values remain with in the '' quotes without spaces. Do not alter the remaining code ( @'%';' ) beyond that point. Edit the contents of fedora3 to change the fedora_admin user password only. Line 2: Change the fedora_admin user password from newsite_sample_fedora_admin_pw to the password of your choice. It is not recommended to change anything else. Proxy directory If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. The proxy subdirectory contains all specific configurations and overrides necessary for the ISLE proxy image and resulting container to function properly with your changes. This is the Nginx reverse proxy server that properly routes all internal and external communication between the other four containers and the ISLE Host network. Proxy - sites-enabled In the config/sites-enabled subdirectory, rename the com.sample-newsite.conf file to com.yourdomain.conf (where \"yourdomain\" is the domain name of your server but the suffix .com typically last is now first.) Example: edu.example.digital-collections.conf Now edit the file... Line 6: change newsite-sample.com to the domain name of your choice Ensure a space between server_name and the domain name and a ; after the domain name still remain. Line 15: change newsite-sample.com to the domain name of your choice Ensure a space between server_name and the domain name and a ; after the domain name still remain. Lines 18 & 19: Change to the name of your ssl certs (should be same names as in previously made apache edits above) Proxy - ssl-certs Copy your SSL certs into the ssl-certs subdirectory. DO NOT OVERWRITE OR DELETE the create_dhparam_pem file within this directory. If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. There are also additional links for the enduser to learn how to combine the SSL Certificate File with any available SSL Certificate Chain File for the proxy process to work properly. Copy your SSL certificates for the ISLE Proxy into proxy/ssl-certs . They will and should have different names than the examples provided below. There can only be 2 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem Open a terminal, navigate to the is subdirectory, and run the create_dhparam_pem.sh script in ~/ISLE/config/isle-newsite-sample/proxy/ssl-certs/ subdirectory to create the dhparam.pem file ( if not already. ) This file is critical to the SSL encryption process and for communication between the proxy and apache containers. To run this script from within this subdirectory: ./create_dhparam_pem.sh . This will take 10 -20 mins depending on the speed of your local laptop or workstation. Proxy - upstreams.d Single environment steps only below: Copy and rename: sample-upstreams.conf.disabled to the appropriate domain name of your choice e.g. yourdomain-upstreams.conf while also removing the .disabled suffix. Example A: Lines 10 and 14 look like this for a single environment (no additional environments to be setup). See proxy/config/sites-enable/com.sample-newsite.conf.disabled . Please note: If only ever deploying a single ISLE environment, you could chose not to add any suffixes and ISLE should function properly. This is entirely dependent on your organizational needs. Example: Single Environment (defaults, no edits made) upstream fedora-internal { server fedora:8080 fail_timeout=0; } upstream fedora-internal { server apache:443 fail_timeout=0; } Solr directory The solr subdirectory contains all specific configurations and overrides necessary for the ISLE solr image and resulting container to function properly with your changes. This is the SOLR search server that properly indexes all objects and metadata to provide speedy in-depth search functionality for the Islandora / Drupal site of the objects and collections contained within the Fedora repository. If need be, please refer to the Solr section of the Glossary for relevant terms to help guide installation. Solr - solr ( Optional ) Within the solr subdirectory: Make the appropriate customizations or changes to the following files as you see fit otherwise you can leave these files alone and SOLR will work out of the box. schema.xml solr.xml solrconfig.xml stopwords.txt Solr - tomcat Within the tomcat subdirectory: Strongly recommend adding tomcat user passwords in file: solr/tomcat/tomcat-users.xml on lines 45 & 48. Example: ONLY ADD TOMCAT USERNAME/PASSWORD - can look like this but please use a stronger password with more than 10 alpha-numeric characters. Also note, they should NOT be the same password.: <!-- user manager can access only manager section --> <user username=\u201cmanager\u201d password=\u201ctomcat_manager_password\" roles=\u201cmanager-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> <!-- user admin can access manager and admin section both --> <user username=\u201cadmin\u201d password=\u201ctomcat_admin_password\u201d roles=\u201cmanager-gui,admin-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> </tomcat-users> Final steps If need be, please refer to the Git section of the Glossary for relevant terms to help guide installation. Now that all the changes are made (be sure to save), ISLE should be ready to test. First you'll need to push these changes to your private code repository. Open a terminal - cd to the config directory you've been making the changes in... git status this will show you all the files that have been modified and ready to be added to your private repo along with handy paths for the next steps. git add /pathtoyourmodifiedfile (replace \"pathtoyourmodifiedfile\" with the path to your config directory) run these: git add apache git add fedora git add mysql git add proxy git add solr git add docker-compose.yml git add newsite-sample-cheatsheet.md Enter git status again - everything should be in green now as all modified files have been added - if anything's still red use git add and the path to add it then run git commit -m \"initial config commit\" inside the double quotes is the commit message you can say whatever you want in this message - so for example if this is the config for your dev instance you could say that... Enter git push origin master This will push all your changes to the repo. Further changes should be made on git branches for different servers or environments e.g. prod, stage, dev or to master branch for this same server. Clone Custom Configuration to Host Server Please note: If running a (multi) ISLE environment, you will make separate git config directories to this effect and repeat these steps accordingly. Open a terminal - ssh into your host server using the islandora user cd to /opt/ISLE/config/ Because your customizations are in a private repository, you'll need to add this islandora user's id_rsa.pub key to the git repository settings via it's settings profile within the appropriate website. This key is found in /home/islandora/.ssh/id_rsa.pub One can simply run cat /home/islandora/.ssh/id_rsa.pub and copy the output (ensure no whitespaces or extra returns) Go to the repository web site with a browser and locate your private repository. Locate the ssh key entry location (in Bitbucket this is in Settings / Access Keys / Add an ssh key w/ the label isle host server islandora deploy user paste in the key text and click Add Key Back at your terminal command line, run git clone URLpathtoyourremoteprivaterepo.git . (replacing \"URLpathtoyourremoteprivaterepo\" with the URL to the repository provided by the website) cd into the newly cloned directory Spin up ISLE containers! run docker-compose up -d run docker exec -it yourApacheContainerNameHere bash Using the name from the docker-composer.yml file here ( typically: isle-apache-prod, or -stage, etc... ) cd /tmp/isle_drupal_build_tools Run: ./install_new_site.sh Give this process 15 - 25 minutes ( depending on the speed of the ISLE Host server internet connection ) Check the newly created and running new site by opening a browser and navigating to your site domain e.g. https://digital-collections.example.edu , you should now see an un-themed Drupal site.","title":"New Site Installation Guide - w/ Single ISLE Environment"},{"location":"03_installation_new_site/new_site_installation_guide_single/#index-of-related-documents","text":"New Site Example User Story","title":"Index of related documents"},{"location":"03_installation_new_site/new_site_installation_guide_single/#assumptions-prerequisites","text":"Comfortability with ISLE. Recommend first setting up the ISLE Test Site ( isle.localdomain ) via the Install Start Here guide. If you have already done this, please proceed. Host Server that conforms to the specifications outlined in the Host Server Specifications This new site guide is designed for a single ISLE Host server that has already followed the appropriate setup and configuration instructions in the Create a new ISLE site section of the Install Start Here guide. Instructions below also assume a MacOS or Linux laptop or workstation to be used in conjunction with the ISLE Host Server for deploying configs, code, files etc. Windows users may have to adjust / swap out various tools as needed. These directions also depend on the type of local computer used to connect via browser to Islandora. Have an existing domain name that works - is set up with DNS etc... Have SSL Certificates previously created for the web domain. ( Please work with the appropriate internal IT resource to provision these files for your domain ) ISLE project has been cloned to BOTH your local laptop/workstation AND the ISLE host server","title":"Assumptions / Prerequisites"},{"location":"03_installation_new_site/new_site_installation_guide_single/#overview","text":"Setup a Private Code Repository Most of the work in this guide involves careful editing of the various configuration and settings files that customize the pieces of Islandora (database, repository, web-server, etc...). Doing this work in a code repository makes it easier to correct errors and to repeat the process for additional servers without needing to replicate all the work. Since the edits could include things like passwords, it's important to make this a private repository. Customizing for your Environment Many of the steps below describe adding the domain name or other specific bits of information into files or appending those bits to file names. In these cases this guide will call out the customization point AND provide an example - it's important not to literally copy paste the example!","title":"Overview"},{"location":"03_installation_new_site/new_site_installation_guide_single/#create-private-code-repository","text":"ON your local laptop/workstation: Using a git repository of your choice (GitHub, GitLab, Bitbucket, etc.) create a PRIVATE remote git repo - see the specific code repository documentation online for setup instructions. Open a terminal - navigate to /opt/ISLE/config ( or where you put the ISLE directory on your local workstation. ) Create a new directory with a name of your choice Example: where \"digital-collections.yourdomain.com\" is your server domain name e.g.: config/digital-collections.example.edu Please do not use this literal value. Locate the directory within the /opt/ISLE/config/ directory called isle-newsite-sample and copy all of its contents into your newly created directory. cd into the newly copied and renamed digital-collections.example.edu directory and type: git init to imitate this directory as a code repository. git remote add NameOfYourRepository URLofYourRepository to connect your local repository to the remote you set up in the above steps. [ NOTE replace \"NameOfYourRepository\" and \"URLofYourRepository\" with the name of your git repository and its URL] You are now ready to perform the customization edits in this directory (you can use a text editor of choice now don't have to stay in terminal - just locate the folder in the finder and open file in text editor)","title":"Create Private Code Repository"},{"location":"03_installation_new_site/new_site_installation_guide_single/#edits","text":"","title":"Edits"},{"location":"03_installation_new_site/new_site_installation_guide_single/#docker-compose-file","text":"Edit the file: docker-compose.yml accordingly: Change container names (you could do this based on the environment (e.g. prod) For example if you are building a prod server instance: container_name: isle-solr-newsite changes to: container_name: isle-solr-prod and so on... Please note: Much of the file is already with comments guiding the enduser to key areas or files to edit or modify accordingly.","title":"Docker compose file:"},{"location":"03_installation_new_site/new_site_installation_guide_single/#config-directories","text":"Now proceed to make edits to files within the config subdirectories: a. to reflect environment (prod, stage, dev, etc...) b. to involve your domain name (digital-collections.example.edu) There are five subdirectories which have the appropriate settings for each respective container and service: apache fedora mysql proxy solr","title":"Config directories"},{"location":"03_installation_new_site/new_site_installation_guide_single/#apache-directory","text":"The apache subdirectory contains all specific configurations and overrides necessary for the ISLE apache image and resulting container to function properly with your changes. This is the webserver that serves the Islandora / Drupal website. ( Optional ) Edit the php.ini file to change various appropriate settings if needed otherwise leave alone. Example - Line 820: change the upload_max_filesize = 2000M to a higher setting if desired. Currently at a 2GB upload limit. Edit the file: settings.php Lines 251-253: add your database name, database user, and database password Line 288: to include a 45+ alpha-numeric characters drupal hash between the quotes after this text: $drupal_hash_salt = ''; You'll need to create this value, recommend using a password generator tool. Ensure only alpha-numeric characters are used, no symbols etc. Line 311: Review and ensure # $base_url = is still commented out Edit the file: install_new_site.sh line 29: /usr/local/bin/drush site-install -y --account-name=newsite_admin --account-pass=newsite_adminpw --account-mail=admin@newsite.com --site-name=\"ISLE New Site Sample\" Change the following values in that line above to the appropriate names and passwords for your site. --account-name= Drupal admin account --account-pass= Drupal admin account password --account-mail= Email address that can be associated with Drupal admin account --site-name= Name of your new ISLE website","title":"Apache directory"},{"location":"03_installation_new_site/new_site_installation_guide_single/#apache-sites-enabled","text":"Within the sites-enabled directory, rename the files newsite-sample-ssl.conf and newsite-sample.conf to your domain names - example: digital-collections.example.edu_ssl.conf digital-collections.example.edu.conf Edit the previously named newsite-sample.conf file and change lines 3 and 4 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 4 and 5 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 12, 13 and 14 to point to the location of your certs on the apache container - example: SSLCertificateFile /certs/newsite-sample.pem SSLCertificateChainFile /certs/newsite-sample-interm.pem SSLCertificateKeyFile /certs/newsite-sample-key.pem","title":"Apache - sites-enabled"},{"location":"03_installation_new_site/new_site_installation_guide_single/#apache-ssl-certs","text":"If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. Copy your SSL certificates for Apache into the apache/ssl-certs subdirectory. They will and should have different names than the examples provided below dependent on the ISLE environment you are setting up e.g. ( production, staging or development ). There can be up to 2 - 3 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem 1 x SSL Certificate Chain File e.g. newsite-sample-interm.pem This file may be optional in some setups but is generally recommended for use by the apache container when available. It will not be used by the proxy container. Please also note that the file extensions can also be: .cer , .crt or .pem","title":"Apache - ssl-certs"},{"location":"03_installation_new_site/new_site_installation_guide_single/#apache-tmpreaper","text":"( Optional ) Edit the cron file within the apache/tmpreaper subdirectory to change various appropriate settings if needed otherwise leave alone if you are not familiar with how cron jobs work. Currently this cronjob is set to run every 12 hours and using the tmpreaper utility to clean out and delete the contents of the /tmp folder if they are older than 4 days.","title":"Apache - tmpreaper"},{"location":"03_installation_new_site/new_site_installation_guide_single/#fedora-directory","text":"The fedora subdirectory contains all specific configurations and overrides necessary for the ISLE fedora image and resulting container to function properly with your changes. This is the Fedora repository that will contain all objects, metadata etc.","title":"Fedora directory"},{"location":"03_installation_new_site/new_site_installation_guide_single/#fedora-fedora","text":"Within the fedora/fedora subdirectory, add new passwords in the following files: Lines 3, 8, 14: fedora-users.xml (change all applicable passwords for fedora users) Line 598: fedora.fcfg (change the password to the fedora_admin database user password only) Line 15: filter-drupal.xml (change the associated Drupal site database name , user and password, do not use settings for the fedora3 database.) ( Optional ) Edit either of the log4j.properties or logback.xml files to change logging levels for the fedora container if needed, otherwise leave alone. Please note: If making changes, you'll need to then edit the docker-compose.yml file accordingly in the fedora volumes section Example add a line to make changes for the Fedora application logging. - ./fedora/fedora/logback.xml :/usr/local/fedora/server/config/logback.xml Example add a line to make changes for the Djatoka application logging. - ./fedora/fedora/logback.xml :/usr/local/tomcat/webapps/adore-djatoka/WEB-INF/classes/log4j.properties ( Optional ) Edit the contents of the repository-policies subdirectory as necessary IF YOU NEED TO , otherwise leave alone.","title":"Fedora - fedora"},{"location":"03_installation_new_site/new_site_installation_guide_single/#fedora-gsearch","text":"Within the fedora/gsearch subdirectory, edit the file: fedoragsearch.properties at line 7 and add a space after the equal sign and then add the new gsearch fgsAdmin user password . - fedoragsearch.soapPass = new_fgsAdmin_password_here Edit the file: fgsconfig-basic-configForIslandora.properties Line 26: add the new gsearch fgsAdmin user password . gsearchPass=new_fgsAdmin_password_here Line 67: Add the new fedora fedora admin password . fedoraPass=new_fedoraAdmin_password_here Edit the file: fedora/gsearch/fgsconfigObjects.properties at line 15 and add a space after the equal sign and then add the new fedora admin password . fgsconfigObjects.fedoraPass = new_fedoraAdmin_password_here Edit the file: fedora/gsearch/repository.properties at line 7 and add a space after the equal sign and then add the new fedora admin password . fgsrepository.fedoraPass = new_fedoraAdmin_password_here","title":"Fedora - gsearch"},{"location":"03_installation_new_site/new_site_installation_guide_single/#fedora-tmpreaper","text":"( Optional ) Edit the cron file within fedora/tmpreaper to change various appropriate settings if needed otherwise leave alone if you are not familiar with how cron jobs work. Currently this cronjob is set to run every 12 hours and using the tmpreaper utility to clean out and delete the contents of the /tmp folder if they are older than 4 days.","title":"Fedora - tmpreaper"},{"location":"03_installation_new_site/new_site_installation_guide_single/#fedora-tomcat","text":"Within the tomcat subdirectory: Strongly recommend adding tomcat user passwords in file: fedora/tomcat/tomcat-users.xml Example: ONLY ADD TOMCAT USERNAME/PASSWORD - can look like this but please use a stronger password with more than 10 alpha-numeric characters. Also note, they should NOT be the same password.: <!-- user manager can access only manager section --> <user username=\u201cmanager\u201d password=\u201ctomcat_manager_password\" roles=\u201cmanager-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> <!-- user admin can access manager and admin section both --> <user username=\u201cadmin\u201d password=\u201ctomcat_admin_password\u201d roles=\u201cmanager-gui,admin-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> </tomcat-users>","title":"Fedora - tomcat"},{"location":"03_installation_new_site/new_site_installation_guide_single/#mysql-directory","text":"The mysql subdirectory contains all specific configurations and overrides necessary for the ISLE mysql image and resulting container to function properly with your changes. This is the Mysql database server that will contain two databases, one for the Islandora / Drupal website and the other for the Fedora repository. ( Optional ) Edit the Mysql configuration file my.cnf as needed otherwise leave alone.","title":"Mysql directory"},{"location":"03_installation_new_site/new_site_installation_guide_single/#mysql-initscripts","text":"This subdirectory houses SQL scripts necessary for a one time creation of your associated new site and fedora3 database. You'll want to rename newsite_sample_db.sql to the database or domain name of your choice. Edit the contents of newsite_sample_db.sql to create the new drupal site database and user. Line 1: Change the database name from newsite_sample_db to the database name of your choice. Line 2: Change the database user name from newsite_sample_db_user to the database user name of your choice. Line 3: At almost the end of the line, change the value of newsite_sample_db.* to the to the database name of your choice ensuring the .* remain without a space. Line 3: At the end of the line, change the value of newsite_sample_db_user' to the to the database user name of your choice ensuring the values remain with in the '' quotes without spaces. Do not alter the remaining code ( @'%';' ) beyond that point. Edit the contents of fedora3 to change the fedora_admin user password only. Line 2: Change the fedora_admin user password from newsite_sample_fedora_admin_pw to the password of your choice. It is not recommended to change anything else.","title":"Mysql - initscripts"},{"location":"03_installation_new_site/new_site_installation_guide_single/#proxy-directory","text":"If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. The proxy subdirectory contains all specific configurations and overrides necessary for the ISLE proxy image and resulting container to function properly with your changes. This is the Nginx reverse proxy server that properly routes all internal and external communication between the other four containers and the ISLE Host network.","title":"Proxy directory"},{"location":"03_installation_new_site/new_site_installation_guide_single/#proxy-sites-enabled","text":"In the config/sites-enabled subdirectory, rename the com.sample-newsite.conf file to com.yourdomain.conf (where \"yourdomain\" is the domain name of your server but the suffix .com typically last is now first.) Example: edu.example.digital-collections.conf Now edit the file... Line 6: change newsite-sample.com to the domain name of your choice Ensure a space between server_name and the domain name and a ; after the domain name still remain. Line 15: change newsite-sample.com to the domain name of your choice Ensure a space between server_name and the domain name and a ; after the domain name still remain. Lines 18 & 19: Change to the name of your ssl certs (should be same names as in previously made apache edits above)","title":"Proxy - sites-enabled"},{"location":"03_installation_new_site/new_site_installation_guide_single/#proxy-ssl-certs","text":"Copy your SSL certs into the ssl-certs subdirectory. DO NOT OVERWRITE OR DELETE the create_dhparam_pem file within this directory. If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. There are also additional links for the enduser to learn how to combine the SSL Certificate File with any available SSL Certificate Chain File for the proxy process to work properly. Copy your SSL certificates for the ISLE Proxy into proxy/ssl-certs . They will and should have different names than the examples provided below. There can only be 2 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem Open a terminal, navigate to the is subdirectory, and run the create_dhparam_pem.sh script in ~/ISLE/config/isle-newsite-sample/proxy/ssl-certs/ subdirectory to create the dhparam.pem file ( if not already. ) This file is critical to the SSL encryption process and for communication between the proxy and apache containers. To run this script from within this subdirectory: ./create_dhparam_pem.sh . This will take 10 -20 mins depending on the speed of your local laptop or workstation.","title":"Proxy - ssl-certs"},{"location":"03_installation_new_site/new_site_installation_guide_single/#proxy-upstreamsd","text":"Single environment steps only below: Copy and rename: sample-upstreams.conf.disabled to the appropriate domain name of your choice e.g. yourdomain-upstreams.conf while also removing the .disabled suffix. Example A: Lines 10 and 14 look like this for a single environment (no additional environments to be setup). See proxy/config/sites-enable/com.sample-newsite.conf.disabled . Please note: If only ever deploying a single ISLE environment, you could chose not to add any suffixes and ISLE should function properly. This is entirely dependent on your organizational needs. Example: Single Environment (defaults, no edits made) upstream fedora-internal { server fedora:8080 fail_timeout=0; } upstream fedora-internal { server apache:443 fail_timeout=0; }","title":"Proxy - upstreams.d"},{"location":"03_installation_new_site/new_site_installation_guide_single/#solr-directory","text":"The solr subdirectory contains all specific configurations and overrides necessary for the ISLE solr image and resulting container to function properly with your changes. This is the SOLR search server that properly indexes all objects and metadata to provide speedy in-depth search functionality for the Islandora / Drupal site of the objects and collections contained within the Fedora repository. If need be, please refer to the Solr section of the Glossary for relevant terms to help guide installation.","title":"Solr directory"},{"location":"03_installation_new_site/new_site_installation_guide_single/#solr-solr","text":"( Optional ) Within the solr subdirectory: Make the appropriate customizations or changes to the following files as you see fit otherwise you can leave these files alone and SOLR will work out of the box. schema.xml solr.xml solrconfig.xml stopwords.txt","title":"Solr - solr"},{"location":"03_installation_new_site/new_site_installation_guide_single/#solr-tomcat","text":"Within the tomcat subdirectory: Strongly recommend adding tomcat user passwords in file: solr/tomcat/tomcat-users.xml on lines 45 & 48. Example: ONLY ADD TOMCAT USERNAME/PASSWORD - can look like this but please use a stronger password with more than 10 alpha-numeric characters. Also note, they should NOT be the same password.: <!-- user manager can access only manager section --> <user username=\u201cmanager\u201d password=\u201ctomcat_manager_password\" roles=\u201cmanager-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> <!-- user admin can access manager and admin section both --> <user username=\u201cadmin\u201d password=\u201ctomcat_admin_password\u201d roles=\u201cmanager-gui,admin-gui\u201d /> <!--enduser please add passwords / users and remove this comment --> </tomcat-users>","title":"Solr - tomcat"},{"location":"03_installation_new_site/new_site_installation_guide_single/#final-steps","text":"If need be, please refer to the Git section of the Glossary for relevant terms to help guide installation. Now that all the changes are made (be sure to save), ISLE should be ready to test. First you'll need to push these changes to your private code repository. Open a terminal - cd to the config directory you've been making the changes in... git status this will show you all the files that have been modified and ready to be added to your private repo along with handy paths for the next steps. git add /pathtoyourmodifiedfile (replace \"pathtoyourmodifiedfile\" with the path to your config directory) run these: git add apache git add fedora git add mysql git add proxy git add solr git add docker-compose.yml git add newsite-sample-cheatsheet.md Enter git status again - everything should be in green now as all modified files have been added - if anything's still red use git add and the path to add it then run git commit -m \"initial config commit\" inside the double quotes is the commit message you can say whatever you want in this message - so for example if this is the config for your dev instance you could say that... Enter git push origin master This will push all your changes to the repo. Further changes should be made on git branches for different servers or environments e.g. prod, stage, dev or to master branch for this same server.","title":"Final steps"},{"location":"03_installation_new_site/new_site_installation_guide_single/#clone-custom-configuration-to-host-server","text":"Please note: If running a (multi) ISLE environment, you will make separate git config directories to this effect and repeat these steps accordingly. Open a terminal - ssh into your host server using the islandora user cd to /opt/ISLE/config/ Because your customizations are in a private repository, you'll need to add this islandora user's id_rsa.pub key to the git repository settings via it's settings profile within the appropriate website. This key is found in /home/islandora/.ssh/id_rsa.pub One can simply run cat /home/islandora/.ssh/id_rsa.pub and copy the output (ensure no whitespaces or extra returns) Go to the repository web site with a browser and locate your private repository. Locate the ssh key entry location (in Bitbucket this is in Settings / Access Keys / Add an ssh key w/ the label isle host server islandora deploy user paste in the key text and click Add Key Back at your terminal command line, run git clone URLpathtoyourremoteprivaterepo.git . (replacing \"URLpathtoyourremoteprivaterepo\" with the URL to the repository provided by the website) cd into the newly cloned directory","title":"Clone Custom Configuration to Host Server"},{"location":"03_installation_new_site/new_site_installation_guide_single/#spin-up-isle-containers","text":"run docker-compose up -d run docker exec -it yourApacheContainerNameHere bash Using the name from the docker-composer.yml file here ( typically: isle-apache-prod, or -stage, etc... ) cd /tmp/isle_drupal_build_tools Run: ./install_new_site.sh Give this process 15 - 25 minutes ( depending on the speed of the ISLE Host server internet connection ) Check the newly created and running new site by opening a browser and navigating to your site domain e.g. https://digital-collections.example.edu , you should now see an un-themed Drupal site.","title":"Spin up ISLE containers!"},{"location":"04_installation_migration/migration_example_user_story/","text":"Migrating an Islandora site to ISLE: sample user story... Laverne's college archive runs an Islandora site on a server in the college IT data center. The site was installed and set up by a colleague who has since left. Some components are outdated and the work of maintaining the server and software stack is taking up a lot of Laverne's time. She's decided to try migrating the site to a new one built with ISLE. She begins by requesting a second server from IT - based on the [System_Requirements]. IT prefers not to give clients root-level access so they agree to make Laverne a user called islandora according to the [Host_Server_Setup] instructions and provide her with the SSH login instructions. The new server has attached storage large enough to hold a copy of the existing Fedora data store from the old server. Additionally, Laverne requests a new URL for the ISLE-based Islandora site \"https://digital.university-college.edu\" and ensures that IT has created DNS records so that this URL directs to the new server. Once she has access to the server and has installed the necessary software including the ISLE repository files from GitHub [Host_Server_Setup], Larverne is ready for the step-by-step [Migration_Guide]. She begins by creating a place-holder directory in the new server for all the existing Islandora site data - and copying that data over from the old server using the [migration_export_checklist] as a guide. This data will be left in the place-holder directory as a backup during the coming migration process. Laverne now creates the permanent directory structure for ISLE to use in customizing the Islandora install and re-copies the data into this structure from the place-holder directory. Since this is merely a test, she's going to skip the process of setting up an institutional Git Repository for her customization files and move on to the merge section of the guide. Working through the [migration_merge_checklist], Laverne ensures that the directories and files listed have been copied into the ISLE directory structure created above. As specified in the checklist, some of these files are slightly different in her current production Islandora. For example, the and that they have been compared to (and in some cases merged by hand) with the stock up-to-date versions of these files that come with ISLE. This turns out to be the most complex part of the entire migration process and Laverne reaches out to the [ISLE_Group_List] for assistance with a couple of the configuration files that had been edited in the past by the colleague who set up the original Islandora system. Finally, she makes the necessary edits to the docker-compose.yml file to add the necessary connection specific information. This is where she will insert the new Url and IP addresses along with a number of other site-specific customizations [migration_docker_compose_checklist]. Now she can enter the commands from the [Migration_Guide] to download the container images from Dockerhub and start them according to the instructions. After the Fedora container is up and running, Laverne follows the steps to test that all is well and sees a running Tomcat server w/ a list of running applications including fedora and Fedoragsearch. After starting the remaining containers, Laverne runs the Apache install script. If all goes well the next step will be to point a browser at the new Url and see a working Islandora site!","title":"Migration Example User Story"},{"location":"04_installation_migration/migration_example_user_story/#migrating-an-islandora-site-to-isle-sample-user-story","text":"Laverne's college archive runs an Islandora site on a server in the college IT data center. The site was installed and set up by a colleague who has since left. Some components are outdated and the work of maintaining the server and software stack is taking up a lot of Laverne's time. She's decided to try migrating the site to a new one built with ISLE. She begins by requesting a second server from IT - based on the [System_Requirements]. IT prefers not to give clients root-level access so they agree to make Laverne a user called islandora according to the [Host_Server_Setup] instructions and provide her with the SSH login instructions. The new server has attached storage large enough to hold a copy of the existing Fedora data store from the old server. Additionally, Laverne requests a new URL for the ISLE-based Islandora site \"https://digital.university-college.edu\" and ensures that IT has created DNS records so that this URL directs to the new server. Once she has access to the server and has installed the necessary software including the ISLE repository files from GitHub [Host_Server_Setup], Larverne is ready for the step-by-step [Migration_Guide]. She begins by creating a place-holder directory in the new server for all the existing Islandora site data - and copying that data over from the old server using the [migration_export_checklist] as a guide. This data will be left in the place-holder directory as a backup during the coming migration process. Laverne now creates the permanent directory structure for ISLE to use in customizing the Islandora install and re-copies the data into this structure from the place-holder directory. Since this is merely a test, she's going to skip the process of setting up an institutional Git Repository for her customization files and move on to the merge section of the guide. Working through the [migration_merge_checklist], Laverne ensures that the directories and files listed have been copied into the ISLE directory structure created above. As specified in the checklist, some of these files are slightly different in her current production Islandora. For example, the and that they have been compared to (and in some cases merged by hand) with the stock up-to-date versions of these files that come with ISLE. This turns out to be the most complex part of the entire migration process and Laverne reaches out to the [ISLE_Group_List] for assistance with a couple of the configuration files that had been edited in the past by the colleague who set up the original Islandora system. Finally, she makes the necessary edits to the docker-compose.yml file to add the necessary connection specific information. This is where she will insert the new Url and IP addresses along with a number of other site-specific customizations [migration_docker_compose_checklist]. Now she can enter the commands from the [Migration_Guide] to download the container images from Dockerhub and start them according to the instructions. After the Fedora container is up and running, Laverne follows the steps to test that all is well and sees a running Tomcat server w/ a list of running applications including fedora and Fedoragsearch. After starting the remaining containers, Laverne runs the Apache install script. If all goes well the next step will be to point a browser at the new Url and see a working Islandora site!","title":"Migrating an Islandora site to ISLE: sample user story..."},{"location":"04_installation_migration/migration_export_checklist/","text":"This section is a checklist of materials to COPY from the current running institutional Islandora Production server(s) to the appropriate storage location / directory on the new ISLE directory. Please Note: Ubuntu / Debian style paths are used for all examples file locations below, endusers might have different locations for these files HOWEVER the file and directory names etc should be roughly the same. Caution : While the ISLE Project recommends use of export methods or tools such as rsync, scp etc., it assumes that endusers are familiar with them and are aware of possible dangers of improperly exporting or copying production data. Ensure adequate backups of any production system(s) are made prior to any attempts. If you are not familiar or are uncomfortable with these processes, it is highly advisable to work with an appropriate IT resource. Finally also please note: Instructions from this checklist and the Migration Installation Guide may call for you to COPY data from your running Islandora environment to a newly created folder: current_prod_islandora_config located on your ISLE Host Server or local workstation called local ISLE config laptop . You will then work from this copy for future steps. In some cases, you'll need to copy configurations down to your laptop / workstation ( local ISLE config laptop ) and merge contents as directed. ( if necessary ) In other cases, due to the size of the data e.g. Fedora data you may only be able to copy production data to the target ISLE Host server ( Remote ISLE Host server ) instead of your local laptop. Contents of the production Islandora Apache html directory should be copied to a new directory called yourdomain-data/apache/html/ on your remote ISLE host server in the appropriate storage area. Contents of the production Islandora Fedora data directory should be copied to a new directory called yourdomain-data/fedora/data/ on your remote ISLE host server in the appropriate storage area. Please attempt to balance as necessary when putting together the docker-compose.yml and config directory. Most instructions will attempt to direct you to copy to a local workstation. ultimately you will be putting this config in a git repository to deploy to the remote ISLE host server for everything to work with both your copied data and merged production settings. Recommend: Having adequate storage space available for the ISLE host server to accommodate a working copy of a production Islandora's associated configurations and data. Apache Copy the following below from the Islandora Production Server(s) to the suggested directories /current_prod_islandora_config/apache/ or /data/apache/ on the ISLE directories located on both the local ISLE config laptop and remote ISLE Host server as designated. /current_prod_islandora_config/apache/ should be a directory used for configurations to be merged or edited on an enduser's laptop ( local ISLE config laptop ) /data/apache/ should be a directory used for apache website code and data to be copied to a storage area on the target ISLE Host server ( Remote ISLE Host server ) due to size. This data and these configurations will be used in conjunction with an Apache container. Data Description Possible Location Suggested ISLE Path Destination Copy location html Islandora/Drupal Website /var/www/ yourdomain-data/apache/html/ Remote ISLE Host server settings.php Drupal settings.php file /var/www/html/sites/default/ /current_prod_islandora_config/apache/ Local ISLE config laptop php.ini PHP configuration file /etc/ /current_prod_islandora_config/apache/ Local ISLE config laptop yoursite.conf Apache webserver vhost file /etc/apache2/sites-enabled/ /current_prod_islandora_config/apache/ Local ISLE config laptop Apache Notes /var/www/ html Entire contents unless size prohibits should be copied to a directory on the remote ISLE host server. If html is not used, then substitute with the appropriate directory for the Islandora / Drupal site settings.php If running multi-sites separate or rename appropriately e.g. multisite2_name_settings.php, multisite3_name_settings.php and so on... WARNING: Be sure to move this file from yourdomain-data/apache/html/ only and not from your production Islandora site PRIOR to copying. yoursite.conf File will have different name but this should be the enabled Apache vhost file of your production Islandora website. There may also be a seperate vhost that uses SSL and https. Copy that too if available. Fedora Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/fedora/ on the ISLE directories located on both the local ISLE config laptop and remote ISLE Host server as designated. This data will be used in conjunction with a Fedora container. File / Directory Description Possible Location Suggested ISLE Path Destination Copy location datastreamStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/datastreamStore Remote ISLE Host server fedora-xacml-policies Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/fedora-xacml-policies Remote ISLE Host server objectStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/objectStore Remote ISLE Host server fedora.fcfg Fedora repository config file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ Local ISLE config laptop fedora-users.xml Fedora users config file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ Local ISLE config laptop filter-drupal.xml Fedora Drupal filter file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ Local ISLE config laptop Fedora Notes Do not copy the following directories from the production Islandora fedora /usr/local/fedora/data directory. * /usr/local/fedora/ data/activemq-data * /usr/local/fedora/ data/resourceIndex Gsearch Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/gsearch/ on the ISLE directory located on the local ISLE config laptop. This data will be used in conjunction with a Fedora container. File / Directory Description Possible Location Suggested ISLE Path Destination Copy location fedoragsearch.properties Gsearch config file /var/lib/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop fgsconfig-basic-configForIslandora.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop fgsconfigObjects.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop repository.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/repository/FgsRepos/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop islandora_transforms Transformation XSLTs directory /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop foxmlToSolr.xslt \"top-level\" transformational XSLT /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop MySQL Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/mysql/ on the ISLE directory located on the local ISLE config laptop. This data will be used in conjunction with a MySQL container. Data Description Possible Location Suggested COPY Method Suggested ISLE Path Destination Copy location Databases Drupal website databases /var/lib/mysql CLI, MySQL Workbench or Sequel Pro etc. /current_prod_islandora_config/mysql/ Local ISLE config laptop my.cnf MySQL server config file /etc/mysql/my.cnf rsync / scp /current_prod_islandora_config/mysql/ Local ISLE config laptop MySQL Notes Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT resources for your institution's database naming conventions. CLI == Command line Recommended that the production databases be exported using the .sql and .gz file formats e.g. drupal_site_2018.sql.gz for better compression and minimal storage footprint. If the enduser is running multi-sites, there will be additional databases to export. Do not export the fedora3 database as it will be recreated by the SQL index in later steps of the Migration Guide If possible, on the production Apache webserver, run drush cc all from the command line on the production server in the appropriate sites directory PRIOR to db export(s) Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows MySQL Tools for Export Here are a few pieces of documentation specific for the tasks above. Caution : While the ISLE Project recommends use of export methods or tools such as mysqldump etc., it assumes that endusers are familiar with them and are aware of possible dangers of improperly exporting or copying production data. Ensure adequate backups of any production system(s) are made prior to any attempts. If you are not familiar or are uncomfortable with these processes, it is highly advisable to work with an appropriate IT resource. Official MySQL documentation mysqldump console utility documentation Digital Ocean quick start for mysqldump export Official MySQL GUI app - Workbench For Linux, MacOS and Windows Sequel Pro MacOS only Tomcat Copy the following below from the Islandora Production Server(s) to the suggested directory to the ISLE directory current_prod_islandora_config/tomcat located on the local ISLE config laptop. This data will be used in conjunction with the Tomcat service found on a Fedora or SOLR container. Data Description Possible Location Suggested ISLE Path Destination Copy location tomcat-users.xml Tomcat server config file /var/lib/tomcat7/conf/tomcat-users.xml /current_prod_islandora_config/tomcat/ Local ISLE config laptop Solr Copy the following below from the Islandora Production Server(s) to the suggested directory to the ISLE directory current_prod_islandora_config/solr located on the local ISLE config laptop. This data will be used in conjunction with a SOLR container. Data Description Possible Location Suggested ISLE Path Destination Copy location schema.xml Solr schema file /var/lib/tomcat7/webapps/solr/collection1/conf/schema.xml /current_prod_islandora_config/solr Local ISLE config laptop solrconfig.xml Solr config file /var/lib/tomcat7/webapps/solr/collection1/conf/solrconfig.xml /current_prod_islandora_config/solr Local ISLE config laptop stopwords.txt Solr file for filtering out common words /var/lib/tomcat7/webapps/solr/collection1/conf/stopwords.txt /current_prod_islandora_config/solr Local ISLE config laptop","title":"Migration Export Checklist"},{"location":"04_installation_migration/migration_export_checklist/#apache","text":"Copy the following below from the Islandora Production Server(s) to the suggested directories /current_prod_islandora_config/apache/ or /data/apache/ on the ISLE directories located on both the local ISLE config laptop and remote ISLE Host server as designated. /current_prod_islandora_config/apache/ should be a directory used for configurations to be merged or edited on an enduser's laptop ( local ISLE config laptop ) /data/apache/ should be a directory used for apache website code and data to be copied to a storage area on the target ISLE Host server ( Remote ISLE Host server ) due to size. This data and these configurations will be used in conjunction with an Apache container. Data Description Possible Location Suggested ISLE Path Destination Copy location html Islandora/Drupal Website /var/www/ yourdomain-data/apache/html/ Remote ISLE Host server settings.php Drupal settings.php file /var/www/html/sites/default/ /current_prod_islandora_config/apache/ Local ISLE config laptop php.ini PHP configuration file /etc/ /current_prod_islandora_config/apache/ Local ISLE config laptop yoursite.conf Apache webserver vhost file /etc/apache2/sites-enabled/ /current_prod_islandora_config/apache/ Local ISLE config laptop","title":"Apache"},{"location":"04_installation_migration/migration_export_checklist/#apache-notes","text":"/var/www/ html Entire contents unless size prohibits should be copied to a directory on the remote ISLE host server. If html is not used, then substitute with the appropriate directory for the Islandora / Drupal site settings.php If running multi-sites separate or rename appropriately e.g. multisite2_name_settings.php, multisite3_name_settings.php and so on... WARNING: Be sure to move this file from yourdomain-data/apache/html/ only and not from your production Islandora site PRIOR to copying. yoursite.conf File will have different name but this should be the enabled Apache vhost file of your production Islandora website. There may also be a seperate vhost that uses SSL and https. Copy that too if available.","title":"Apache Notes"},{"location":"04_installation_migration/migration_export_checklist/#fedora","text":"Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/fedora/ on the ISLE directories located on both the local ISLE config laptop and remote ISLE Host server as designated. This data will be used in conjunction with a Fedora container. File / Directory Description Possible Location Suggested ISLE Path Destination Copy location datastreamStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/datastreamStore Remote ISLE Host server fedora-xacml-policies Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/fedora-xacml-policies Remote ISLE Host server objectStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/objectStore Remote ISLE Host server fedora.fcfg Fedora repository config file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ Local ISLE config laptop fedora-users.xml Fedora users config file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ Local ISLE config laptop filter-drupal.xml Fedora Drupal filter file /usr/local/fedora/server/config/ /current_prod_islandora_config/fedora/ Local ISLE config laptop","title":"Fedora"},{"location":"04_installation_migration/migration_export_checklist/#fedora-notes","text":"Do not copy the following directories from the production Islandora fedora /usr/local/fedora/data directory. * /usr/local/fedora/ data/activemq-data * /usr/local/fedora/ data/resourceIndex","title":"Fedora Notes"},{"location":"04_installation_migration/migration_export_checklist/#gsearch","text":"Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/gsearch/ on the ISLE directory located on the local ISLE config laptop. This data will be used in conjunction with a Fedora container. File / Directory Description Possible Location Suggested ISLE Path Destination Copy location fedoragsearch.properties Gsearch config file /var/lib/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop fgsconfig-basic-configForIslandora.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop fgsconfigObjects.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop repository.properties Gsearch config file /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/repository/FgsRepos/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop islandora_transforms Transformation XSLTs directory /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop foxmlToSolr.xslt \"top-level\" transformational XSLT /var/lib/tomcat7/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/ /current_prod_islandora_config/gsearch/ Local ISLE config laptop","title":"Gsearch"},{"location":"04_installation_migration/migration_export_checklist/#mysql","text":"Copy the following below from the Islandora Production Server(s) to the suggested directory current_prod_islandora_config/mysql/ on the ISLE directory located on the local ISLE config laptop. This data will be used in conjunction with a MySQL container. Data Description Possible Location Suggested COPY Method Suggested ISLE Path Destination Copy location Databases Drupal website databases /var/lib/mysql CLI, MySQL Workbench or Sequel Pro etc. /current_prod_islandora_config/mysql/ Local ISLE config laptop my.cnf MySQL server config file /etc/mysql/my.cnf rsync / scp /current_prod_islandora_config/mysql/ Local ISLE config laptop","title":"MySQL"},{"location":"04_installation_migration/migration_export_checklist/#mysql-notes","text":"Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT resources for your institution's database naming conventions. CLI == Command line Recommended that the production databases be exported using the .sql and .gz file formats e.g. drupal_site_2018.sql.gz for better compression and minimal storage footprint. If the enduser is running multi-sites, there will be additional databases to export. Do not export the fedora3 database as it will be recreated by the SQL index in later steps of the Migration Guide If possible, on the production Apache webserver, run drush cc all from the command line on the production server in the appropriate sites directory PRIOR to db export(s) Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows","title":"MySQL Notes"},{"location":"04_installation_migration/migration_export_checklist/#mysql-tools-for-export","text":"Here are a few pieces of documentation specific for the tasks above. Caution : While the ISLE Project recommends use of export methods or tools such as mysqldump etc., it assumes that endusers are familiar with them and are aware of possible dangers of improperly exporting or copying production data. Ensure adequate backups of any production system(s) are made prior to any attempts. If you are not familiar or are uncomfortable with these processes, it is highly advisable to work with an appropriate IT resource. Official MySQL documentation mysqldump console utility documentation Digital Ocean quick start for mysqldump export Official MySQL GUI app - Workbench For Linux, MacOS and Windows Sequel Pro MacOS only","title":"MySQL Tools for Export"},{"location":"04_installation_migration/migration_export_checklist/#tomcat","text":"Copy the following below from the Islandora Production Server(s) to the suggested directory to the ISLE directory current_prod_islandora_config/tomcat located on the local ISLE config laptop. This data will be used in conjunction with the Tomcat service found on a Fedora or SOLR container. Data Description Possible Location Suggested ISLE Path Destination Copy location tomcat-users.xml Tomcat server config file /var/lib/tomcat7/conf/tomcat-users.xml /current_prod_islandora_config/tomcat/ Local ISLE config laptop","title":"Tomcat"},{"location":"04_installation_migration/migration_export_checklist/#solr","text":"Copy the following below from the Islandora Production Server(s) to the suggested directory to the ISLE directory current_prod_islandora_config/solr located on the local ISLE config laptop. This data will be used in conjunction with a SOLR container. Data Description Possible Location Suggested ISLE Path Destination Copy location schema.xml Solr schema file /var/lib/tomcat7/webapps/solr/collection1/conf/schema.xml /current_prod_islandora_config/solr Local ISLE config laptop solrconfig.xml Solr config file /var/lib/tomcat7/webapps/solr/collection1/conf/solrconfig.xml /current_prod_islandora_config/solr Local ISLE config laptop stopwords.txt Solr file for filtering out common words /var/lib/tomcat7/webapps/solr/collection1/conf/stopwords.txt /current_prod_islandora_config/solr Local ISLE config laptop","title":"Solr"},{"location":"04_installation_migration/migration_installation_guide/","text":"This Migration guide will help you migrate your existing production Islandora environment to utilize an ISLE environment for easily maintaining Islandora. This guide will walk you through how to identify and copy your institution's Islandora data and files (including your data volume, Drupal site or sites, and commonly customized xml and xslt files) to your ISLE framework. Please note: There is a Glossary with relevant terms to help guide installation. Index of related documents Migration Example User Story Migration Export Checklist Migration Merge Checklist Migration Reindex Process Assumptions / Prerequisites Comfortability with ISLE. Recommend first setting up the ISLE Test Site ( isle.localdomain ) via the Install Start Here guide. If you have already done this, please proceed. Host Server that conforms to the specifications outlined in the Host Server Specifications This Migration guide is designed for a Host server that has already followed the appropriate setup and configuration instructions in the Migrate to ISLE section of the Install Start Here guide. Instructions below also assume a MacOS or Linux laptop or workstation to be used in conjunction with the ISLE Host Server for deploying configs, code, files etc. Windows users may have to adjust / swap out various tools as needed. These directions also depend on the type of local computer used to connect via browser to Islandora. Have an existing domain name that works - is set up with DNS etc... Have SSL Certificates previously created for the web domain. ( Please work with the appropriate internal IT resource to provision these files for your domain ) ISLE project has been cloned to BOTH your local laptop/workstation AND the ISLE host server Disk space on or mounted to the Host Server large enough to store a copy of your fedora data store Access to that server from your local workstation via SSH ( islandora user with sudo privileges) Access to the current Islandora production server Usernames/Passwords for key parts of your stack which are used for the migration. Drupal SQL information: username, password, database name can be obtained from your original www/sites/default/settings.php Fedora SQL information: username, password, database name can be obtained from your original fedora/server/config/fedora.fcfcg Fedora users: please have a copy of your fedora-users.xml Tomcat users: please have a copy of your tomcat-users.xml but plan on generating new values for these logins for both the fedora and solr containers. SQL dump (export) of the current production site's Drupal database. Ensure that the contents of any cache table are not exported. Finally also please note: Instructions from this guide and it's associated checklists may call for you to COPY data from your running Islandora environment to a newly created folder: current_prod_islandora_config located on your ISLE Host Server or local workstation called Local ISLE config laptop . You will then work from this copy for future steps. In some cases, you'll need to copy configurations down to your laptop / workstation ( Local ISLE config laptop ) and merge contents as directed. ( if necessary ) In other cases, due to the size of the data e.g. Fedora data you may only be able to copy production data to the target ISLE Host server ( Remote ISLE Host server ) instead of your local laptop. Please attempt to balance as necessary when putting together the docker-compose.yml and config directory. Most instructions will attempt to direct you to copy to a local workstation. ultimately you will be putting this config in a git repository to deploy to the remote ISLE host server for everything to work with both your copied data and merged production settings. Recommend: Having adequate storage space available for the ISLE host server to accommodate a working copy of a production Islandora's associated configurations and data. Overview TL;DR Copy old stuff over to host server and local laptop w/ checklist, create new private repo for configs, merge old configs into new configs w/ checklist, edit docker-compose.yml to point to new configs, spin up containers, go into fedora container & reindex, qc site - Done. Create a new directory on your remote ISLE Host server for the /data folders and files COPY the drupal/islandora site and configuration files from the running production Islandora (following the Migration Export Checklist ). Create a new directory on your local laptop for the /config folders and files, copy the ISLE repository /config into it, and make this into a private repository. Edit the /config files so they have the proper site-specific information (following the Migration Merge Checklist NOTE Some of this will involve fairly complicated merging of files to account for custom edits that may have been made to your production Islandora site and/or to bring configuration files up to work with newer software versions. This is by far the trickiest part of the migration and definitely a good place to seek help from the community if you get stuck. Edit the docker-compose.yml file to point to all these fine new config files. Download ISLE images from Dockerhub and spin up the ISLE Containers (takes a while depending on network speeds) Go into the fedora container and do a re-indexing (takes a little while) (following the Migration Reindex Process ). Go to the new site and QC! Detailed Steps Setup a Private Code Repository Most of the work in this guide involves careful editing of the various configuration and settings files that customize the pieces of Islandora (database, repository, web-server, etc...). Doing this work in a code repository makes it easier to correct errors and to repeat the process for additional servers without needing to replicate all the work. Since the edits will include things like passwords, it's important to make this a private repository. Customizing for your Environment Many of the steps below describe adding the domain name or other specific bits of information into files or appending those bits to file names. In these cases this guide will call out the customization point AND provide an example - it's important not to literally copy paste the example! Your best guide for these customizations are the source files from your currently running Islandora environment. Create Private Code Repository ON your local laptop/workstation: On the repository of your choice (GitHub, GitLab, Bitbucket, etc.) create a PRIVATE remote git repo - see the specific code repository documentation online for setup instructions. Open a terminal - navigate to /opt/ISLE or where you cloned the ISLE directory on your local workstation. Create a directory named yourdomain-config (where \"yourdomain\" is your server domain name) Example: digital-collections.yourdomain.com-config Within the ISLE directory, locate the directory called config/isle-newsite-sample and copy all the contents to the newly created directory cd into the newly copied and renamed yourdomain-config directory and type: git init Initiates this directory as a code repository. Type: git remote add NameOfYourRepository URLofYourRepository Connects your local repository to the remote you set up in the above steps. NOTE: replace \"NameOfYourRepository\" and \"URLofYourRepository\" with the name of your repository and its URL You are now ready to perform the customization edits in this directory (you can use a text editor of choice now don't have to stay in terminal - just locate the folder in the finder and open file in text editor) Create Data Storage Directory This area will be where all current Islandora production data is to be stored. This includes the Apache /var/www/html directory and the appropriate Fedora /usr/local/fedora/data subdirectories outlined below. ON your remote ISLE Host server: Create a directory named yourdomain-data (where \"yourdomain\" is your server domain name) Example: digital-collections.yourdomain.com-data Ensure that the islandora user has ownership and permissions to access this data. chown -Rv islandora:islandora ~/digital-collections.yourdomain.com-data Please note this path may change depending on how your ISLE host server storage area is setup. Migration Export Checklist In the /opt/ISLE/config directory create a new sub-directory (you can call this current_prod_islandora_config ) Copy the files from your current running institutional Islandora Production server(s) into this directory following the Migration Export Checklist of materials on either the local workstation or remote server (in case the data involved is too large for your local workstation) as directed. Noting that most likely the Apache data ( /var/www/html ) & Fedora data ( /usr/local/fedora/data ) will stay on your designated remote ISLE host server storage area not your local laptop used for creating the ISLE config. These copied files will be the source for edits and merges - just to be very clear, please don't work directly on these files in your currently running production Islandora system! To be even more clear, after following the checklist, you should now have two nearly identical /config subdirectories A. copied from the cloned ISLE repository and renamed with your domain e.g. yourdomain-config or digital-collections.yourdomain.com-config B. copied from your currently running Islandora environment. e.g. current_prod_islandora_config Migration Merge Checklist The goal is to merge all site-specific data (domain names, variables, usernames, passwords, etc..) AND all site-specific customizations or settings from the files in directory B. into the matching files in directory A. Compare the data and settings of the files found within directory B. current_prod_islandora_config , and then merge, edit or copy as necessary with the templated settings found within the renamed directory A. yourdomain-config as guided in the Migration Merge Checklist . Customizations: ( optional ) Carefully compare the following most frequently customized files with the new, default versions found within your new ISLE config folder. Use a \"Diff\" tool (example: Beyond Compare to merge any desired customizations from your production Islandora files to persist within the new ISLE config folder of files: Compare and merge the Solr files: schema.xml Compare and merge the Solr files: solrconfig.xml Compare and merge the Solr files: stopwords Compare and merge the Fedora GSearch Islandora Transform (XSLTs) folder of files: islandora_transforms Docker compose file: Edit the file: docker-compose.yml accordingly: Change container names (you could do this based on the environment (e.g. prod) For example if you are building a prod server instance: container_name: isle-solr-newsite changes to: container_name: isle-solr-prod and so on... Please note: Much of the file is already with comments guiding the enduser to key areas or files to edit or modify accordingly. Final steps Now that all the changes are made (be sure to save), ISLE should be ready to test. First you'll need to push these changes to your private code repository. Open a terminal - cd to the config directory you've been making the changes in... git status this will show you all the files that have been modified and ready to be added to your private repo along with handy paths for the next steps. git add /pathtoyourmodifiedfile (replace \"pathtoyourmodifiedfile\" with the path to your config directory) run these: git add apache git add fedora git add mysql git add proxy git add solr git add docker-compose.yml run git status again - everything should be in green now as all modified files have been added - if anything's still red use git add and the path to add it then run git commit -m \"initial config commit\" inside the double quotes is the commit message you can say whatever you want in this message - so for example if this is the config for your dev instance you could say that... run git push origin master this will push all your changes to the repo further changes should be made on branches for different servers or to master branch for this same server Clone Custom Configuration to Host Server Open a terminal - ssh into your host server using the islandora user cd to /opt/ISLE/config/ because your customizations are in a private repository, you'll need to add this islandora user's id_rsa.pub key to the repository via the website. This key is found in /home/islandora/.ssh/id_rsa.pub One can simply run cat /home/islandora/.ssh/id_rsa.pub and copy the output (ensure no whitespaces or extra returns) Go to the repository web site with a browser and locate your private repository. locate the ssh key entry location (in Bitbucket this is in Settings / Access Keys / add an ssh key w/ the label islandora host server paste in the key text and click Add Key Back at your terminal command line, run git clone URLpathtoyourremoteprivaterepo.git . (replacing \"URLpathtoyourremoteprivaterepo\" with the URL to the repository provided by the website) cd into the newly cloned directory - this is a good time to check that the ISLE directory contains your yourdomain-config directory and that it reflects all the edits and customizations. Spin up ISLE containers! Review or pull down ISLE Docker images Please Note: You may have already done this in setting up the host server manually and / or with Ansible. However it is always a good idea to review and check using the first command below. Check if all ISLE images have been downloaded docker image ls If yes, then proceed to Step 7 If no, the perform the following: docker pull islandoracollabgroup/isle-mysql:latest docker pull islandoracollabgroup/isle-fedora:latest docker pull islandoracollabgroup/isle-solr:latest docker pull islandoracollabgroup/isle-apache:latest docker pull islandoracollabgroup/isle-proxy:latest Spin up the proxy container cd /opt/ISLE/yourdomain-config docker-compose up -d proxy Spin up the mysql container and import production database(s) cd /opt/ISLE/yourdomain-config docker-compose up -d mysql Two methods for connecting to the MySQL Database (GUI / CLI) pick one. One may use SQL GUI clients e.g. Sequel Pro, Navicat, PHPMyAdmin etc. and import the production Drupal website database(s) If the above not practical, one may connect to the MySQL container and run the following. docker exec -it isle-mysql-institution bash to connect to the container swap out institution for the correct container name. appropriate mysql commands here: consult MySQL documentation - https://dev.mysql.com/doc/refman/5.7/en/ 2a. ( optional ) Only follow this if you have not first run drush cc all and then exported the MySQL databases or if you have not exported the MySQL databases excluding the contents of any table with cache in the name. The following are STEPS, not literal commands to prepare your db for ISLE ( doing this because we've found there are errors using exported db from production because of caches - causes problems - steps below help you remove this problem ) import the production databases into the isle-mysql-institution container ( with errors being ignored ) truncate all tables that start with cache on the isle-mysql-institution container export this new database to the mysql directory on the isle host server delete all tables ( not the database itself ) on the isle-mysql-institution container Reimport the new lighter database to the isle-mysql container Spin up the fedora container and start the reindex processes Staying within /opt/ISLE/yourdomain-config docker-compose up -d fedora * optional check if fedora is running properly e.g. http://isle-prod-project.institution:8080/manager/html docker exec -it isle-fedora-institution bash Follow the steps outlined in the Migration Reindex Process Guide Follow the steps outlined in the Reindex Fedora RI (1 of 3) section Follow the steps outlined in the Reindex SQL database (2 of 3) section Pause here before attempting the steps within the Reindex Solr (3 of 3) section. Move onto the next section in this guide, Spin up apache container . Spin up apache container Staying within /opt/ISLE/yourdomain-config docker-compose up -d apache docker exec -it isle-apache-institution bash Run the vset script cd /var/www/html ./vsets.sh Check if the site is now is running properly by opening a web browser and navigating to your new ISLE domain e.g. https://isle-prod-project.institution Please note while you may be able to see objects being displayed, metadata and search results will be empty until you run the last step in the Reindex process. Spin up solr container and complete the reindex processes Staying within /opt/ISLE/yourdomain-config docker-compose up -d solr ( optional ) check if solr is running properly e.g. http://isle-prod-project.institution:8777/manager/html docker exec -it isle-fedora-institution bash NOTE FEDORA NOT SOLR! Follow the steps outlined in the Migration Reindex Process Guide Follow the steps outlined only in the Reindex Solr (3 of 3) section. ( Ensure that Tomcat and Fedora are running. ) Check the results on the site using Islandora simple search or the appropriate search method. Congratulations you should have successfully migrated your production Islandora site to ISLE!!","title":"Migration Guide"},{"location":"04_installation_migration/migration_installation_guide/#index-of-related-documents","text":"Migration Example User Story Migration Export Checklist Migration Merge Checklist Migration Reindex Process","title":"Index of related documents"},{"location":"04_installation_migration/migration_installation_guide/#assumptions-prerequisites","text":"Comfortability with ISLE. Recommend first setting up the ISLE Test Site ( isle.localdomain ) via the Install Start Here guide. If you have already done this, please proceed. Host Server that conforms to the specifications outlined in the Host Server Specifications This Migration guide is designed for a Host server that has already followed the appropriate setup and configuration instructions in the Migrate to ISLE section of the Install Start Here guide. Instructions below also assume a MacOS or Linux laptop or workstation to be used in conjunction with the ISLE Host Server for deploying configs, code, files etc. Windows users may have to adjust / swap out various tools as needed. These directions also depend on the type of local computer used to connect via browser to Islandora. Have an existing domain name that works - is set up with DNS etc... Have SSL Certificates previously created for the web domain. ( Please work with the appropriate internal IT resource to provision these files for your domain ) ISLE project has been cloned to BOTH your local laptop/workstation AND the ISLE host server Disk space on or mounted to the Host Server large enough to store a copy of your fedora data store Access to that server from your local workstation via SSH ( islandora user with sudo privileges) Access to the current Islandora production server Usernames/Passwords for key parts of your stack which are used for the migration. Drupal SQL information: username, password, database name can be obtained from your original www/sites/default/settings.php Fedora SQL information: username, password, database name can be obtained from your original fedora/server/config/fedora.fcfcg Fedora users: please have a copy of your fedora-users.xml Tomcat users: please have a copy of your tomcat-users.xml but plan on generating new values for these logins for both the fedora and solr containers. SQL dump (export) of the current production site's Drupal database. Ensure that the contents of any cache table are not exported. Finally also please note: Instructions from this guide and it's associated checklists may call for you to COPY data from your running Islandora environment to a newly created folder: current_prod_islandora_config located on your ISLE Host Server or local workstation called Local ISLE config laptop . You will then work from this copy for future steps. In some cases, you'll need to copy configurations down to your laptop / workstation ( Local ISLE config laptop ) and merge contents as directed. ( if necessary ) In other cases, due to the size of the data e.g. Fedora data you may only be able to copy production data to the target ISLE Host server ( Remote ISLE Host server ) instead of your local laptop. Please attempt to balance as necessary when putting together the docker-compose.yml and config directory. Most instructions will attempt to direct you to copy to a local workstation. ultimately you will be putting this config in a git repository to deploy to the remote ISLE host server for everything to work with both your copied data and merged production settings. Recommend: Having adequate storage space available for the ISLE host server to accommodate a working copy of a production Islandora's associated configurations and data.","title":"Assumptions / Prerequisites"},{"location":"04_installation_migration/migration_installation_guide/#overview","text":"TL;DR Copy old stuff over to host server and local laptop w/ checklist, create new private repo for configs, merge old configs into new configs w/ checklist, edit docker-compose.yml to point to new configs, spin up containers, go into fedora container & reindex, qc site - Done. Create a new directory on your remote ISLE Host server for the /data folders and files COPY the drupal/islandora site and configuration files from the running production Islandora (following the Migration Export Checklist ). Create a new directory on your local laptop for the /config folders and files, copy the ISLE repository /config into it, and make this into a private repository. Edit the /config files so they have the proper site-specific information (following the Migration Merge Checklist NOTE Some of this will involve fairly complicated merging of files to account for custom edits that may have been made to your production Islandora site and/or to bring configuration files up to work with newer software versions. This is by far the trickiest part of the migration and definitely a good place to seek help from the community if you get stuck. Edit the docker-compose.yml file to point to all these fine new config files. Download ISLE images from Dockerhub and spin up the ISLE Containers (takes a while depending on network speeds) Go into the fedora container and do a re-indexing (takes a little while) (following the Migration Reindex Process ). Go to the new site and QC!","title":"Overview"},{"location":"04_installation_migration/migration_installation_guide/#detailed-steps","text":"Setup a Private Code Repository Most of the work in this guide involves careful editing of the various configuration and settings files that customize the pieces of Islandora (database, repository, web-server, etc...). Doing this work in a code repository makes it easier to correct errors and to repeat the process for additional servers without needing to replicate all the work. Since the edits will include things like passwords, it's important to make this a private repository. Customizing for your Environment Many of the steps below describe adding the domain name or other specific bits of information into files or appending those bits to file names. In these cases this guide will call out the customization point AND provide an example - it's important not to literally copy paste the example! Your best guide for these customizations are the source files from your currently running Islandora environment.","title":"Detailed Steps"},{"location":"04_installation_migration/migration_installation_guide/#create-private-code-repository","text":"ON your local laptop/workstation: On the repository of your choice (GitHub, GitLab, Bitbucket, etc.) create a PRIVATE remote git repo - see the specific code repository documentation online for setup instructions. Open a terminal - navigate to /opt/ISLE or where you cloned the ISLE directory on your local workstation. Create a directory named yourdomain-config (where \"yourdomain\" is your server domain name) Example: digital-collections.yourdomain.com-config Within the ISLE directory, locate the directory called config/isle-newsite-sample and copy all the contents to the newly created directory cd into the newly copied and renamed yourdomain-config directory and type: git init Initiates this directory as a code repository. Type: git remote add NameOfYourRepository URLofYourRepository Connects your local repository to the remote you set up in the above steps. NOTE: replace \"NameOfYourRepository\" and \"URLofYourRepository\" with the name of your repository and its URL You are now ready to perform the customization edits in this directory (you can use a text editor of choice now don't have to stay in terminal - just locate the folder in the finder and open file in text editor)","title":"Create Private Code Repository"},{"location":"04_installation_migration/migration_installation_guide/#create-data-storage-directory","text":"This area will be where all current Islandora production data is to be stored. This includes the Apache /var/www/html directory and the appropriate Fedora /usr/local/fedora/data subdirectories outlined below. ON your remote ISLE Host server: Create a directory named yourdomain-data (where \"yourdomain\" is your server domain name) Example: digital-collections.yourdomain.com-data Ensure that the islandora user has ownership and permissions to access this data. chown -Rv islandora:islandora ~/digital-collections.yourdomain.com-data Please note this path may change depending on how your ISLE host server storage area is setup.","title":"Create Data Storage Directory"},{"location":"04_installation_migration/migration_installation_guide/#migration-export-checklist","text":"In the /opt/ISLE/config directory create a new sub-directory (you can call this current_prod_islandora_config ) Copy the files from your current running institutional Islandora Production server(s) into this directory following the Migration Export Checklist of materials on either the local workstation or remote server (in case the data involved is too large for your local workstation) as directed. Noting that most likely the Apache data ( /var/www/html ) & Fedora data ( /usr/local/fedora/data ) will stay on your designated remote ISLE host server storage area not your local laptop used for creating the ISLE config. These copied files will be the source for edits and merges - just to be very clear, please don't work directly on these files in your currently running production Islandora system! To be even more clear, after following the checklist, you should now have two nearly identical /config subdirectories A. copied from the cloned ISLE repository and renamed with your domain e.g. yourdomain-config or digital-collections.yourdomain.com-config B. copied from your currently running Islandora environment. e.g. current_prod_islandora_config","title":"Migration Export Checklist"},{"location":"04_installation_migration/migration_installation_guide/#migration-merge-checklist","text":"The goal is to merge all site-specific data (domain names, variables, usernames, passwords, etc..) AND all site-specific customizations or settings from the files in directory B. into the matching files in directory A. Compare the data and settings of the files found within directory B. current_prod_islandora_config , and then merge, edit or copy as necessary with the templated settings found within the renamed directory A. yourdomain-config as guided in the Migration Merge Checklist . Customizations: ( optional ) Carefully compare the following most frequently customized files with the new, default versions found within your new ISLE config folder. Use a \"Diff\" tool (example: Beyond Compare to merge any desired customizations from your production Islandora files to persist within the new ISLE config folder of files: Compare and merge the Solr files: schema.xml Compare and merge the Solr files: solrconfig.xml Compare and merge the Solr files: stopwords Compare and merge the Fedora GSearch Islandora Transform (XSLTs) folder of files: islandora_transforms","title":"Migration Merge Checklist"},{"location":"04_installation_migration/migration_installation_guide/#docker-compose-file","text":"Edit the file: docker-compose.yml accordingly: Change container names (you could do this based on the environment (e.g. prod) For example if you are building a prod server instance: container_name: isle-solr-newsite changes to: container_name: isle-solr-prod and so on... Please note: Much of the file is already with comments guiding the enduser to key areas or files to edit or modify accordingly.","title":"Docker compose file:"},{"location":"04_installation_migration/migration_installation_guide/#final-steps","text":"Now that all the changes are made (be sure to save), ISLE should be ready to test. First you'll need to push these changes to your private code repository. Open a terminal - cd to the config directory you've been making the changes in... git status this will show you all the files that have been modified and ready to be added to your private repo along with handy paths for the next steps. git add /pathtoyourmodifiedfile (replace \"pathtoyourmodifiedfile\" with the path to your config directory) run these: git add apache git add fedora git add mysql git add proxy git add solr git add docker-compose.yml run git status again - everything should be in green now as all modified files have been added - if anything's still red use git add and the path to add it then run git commit -m \"initial config commit\" inside the double quotes is the commit message you can say whatever you want in this message - so for example if this is the config for your dev instance you could say that... run git push origin master this will push all your changes to the repo further changes should be made on branches for different servers or to master branch for this same server","title":"Final steps"},{"location":"04_installation_migration/migration_installation_guide/#clone-custom-configuration-to-host-server","text":"Open a terminal - ssh into your host server using the islandora user cd to /opt/ISLE/config/ because your customizations are in a private repository, you'll need to add this islandora user's id_rsa.pub key to the repository via the website. This key is found in /home/islandora/.ssh/id_rsa.pub One can simply run cat /home/islandora/.ssh/id_rsa.pub and copy the output (ensure no whitespaces or extra returns) Go to the repository web site with a browser and locate your private repository. locate the ssh key entry location (in Bitbucket this is in Settings / Access Keys / add an ssh key w/ the label islandora host server paste in the key text and click Add Key Back at your terminal command line, run git clone URLpathtoyourremoteprivaterepo.git . (replacing \"URLpathtoyourremoteprivaterepo\" with the URL to the repository provided by the website) cd into the newly cloned directory - this is a good time to check that the ISLE directory contains your yourdomain-config directory and that it reflects all the edits and customizations.","title":"Clone Custom Configuration to Host Server"},{"location":"04_installation_migration/migration_installation_guide/#spin-up-isle-containers","text":"","title":"Spin up ISLE containers!"},{"location":"04_installation_migration/migration_installation_guide/#review-or-pull-down-isle-docker-images","text":"Please Note: You may have already done this in setting up the host server manually and / or with Ansible. However it is always a good idea to review and check using the first command below. Check if all ISLE images have been downloaded docker image ls If yes, then proceed to Step 7 If no, the perform the following: docker pull islandoracollabgroup/isle-mysql:latest docker pull islandoracollabgroup/isle-fedora:latest docker pull islandoracollabgroup/isle-solr:latest docker pull islandoracollabgroup/isle-apache:latest docker pull islandoracollabgroup/isle-proxy:latest","title":"Review or pull down ISLE Docker images"},{"location":"04_installation_migration/migration_installation_guide/#spin-up-the-proxy-container","text":"cd /opt/ISLE/yourdomain-config docker-compose up -d proxy","title":"Spin up the proxy container"},{"location":"04_installation_migration/migration_installation_guide/#spin-up-the-mysql-container-and-import-production-databases","text":"cd /opt/ISLE/yourdomain-config docker-compose up -d mysql Two methods for connecting to the MySQL Database (GUI / CLI) pick one. One may use SQL GUI clients e.g. Sequel Pro, Navicat, PHPMyAdmin etc. and import the production Drupal website database(s) If the above not practical, one may connect to the MySQL container and run the following. docker exec -it isle-mysql-institution bash to connect to the container swap out institution for the correct container name. appropriate mysql commands here: consult MySQL documentation - https://dev.mysql.com/doc/refman/5.7/en/ 2a. ( optional ) Only follow this if you have not first run drush cc all and then exported the MySQL databases or if you have not exported the MySQL databases excluding the contents of any table with cache in the name. The following are STEPS, not literal commands to prepare your db for ISLE ( doing this because we've found there are errors using exported db from production because of caches - causes problems - steps below help you remove this problem ) import the production databases into the isle-mysql-institution container ( with errors being ignored ) truncate all tables that start with cache on the isle-mysql-institution container export this new database to the mysql directory on the isle host server delete all tables ( not the database itself ) on the isle-mysql-institution container Reimport the new lighter database to the isle-mysql container","title":"Spin up the mysql container and import production database(s)"},{"location":"04_installation_migration/migration_installation_guide/#spin-up-the-fedora-container-and-start-the-reindex-processes","text":"Staying within /opt/ISLE/yourdomain-config docker-compose up -d fedora * optional check if fedora is running properly e.g. http://isle-prod-project.institution:8080/manager/html docker exec -it isle-fedora-institution bash Follow the steps outlined in the Migration Reindex Process Guide Follow the steps outlined in the Reindex Fedora RI (1 of 3) section Follow the steps outlined in the Reindex SQL database (2 of 3) section Pause here before attempting the steps within the Reindex Solr (3 of 3) section. Move onto the next section in this guide, Spin up apache container .","title":"Spin up the fedora container and start the reindex processes"},{"location":"04_installation_migration/migration_installation_guide/#spin-up-apache-container","text":"Staying within /opt/ISLE/yourdomain-config docker-compose up -d apache docker exec -it isle-apache-institution bash Run the vset script cd /var/www/html ./vsets.sh Check if the site is now is running properly by opening a web browser and navigating to your new ISLE domain e.g. https://isle-prod-project.institution Please note while you may be able to see objects being displayed, metadata and search results will be empty until you run the last step in the Reindex process.","title":"Spin up apache container"},{"location":"04_installation_migration/migration_installation_guide/#spin-up-solr-container-and-complete-the-reindex-processes","text":"Staying within /opt/ISLE/yourdomain-config docker-compose up -d solr ( optional ) check if solr is running properly e.g. http://isle-prod-project.institution:8777/manager/html docker exec -it isle-fedora-institution bash NOTE FEDORA NOT SOLR! Follow the steps outlined in the Migration Reindex Process Guide Follow the steps outlined only in the Reindex Solr (3 of 3) section. ( Ensure that Tomcat and Fedora are running. ) Check the results on the site using Islandora simple search or the appropriate search method. Congratulations you should have successfully migrated your production Islandora site to ISLE!!","title":"Spin up solr container and complete the reindex processes"},{"location":"04_installation_migration/migration_merge_checklist/","text":"This section is to serve as a new checklist for the editing or merging of the copied Islandora Production server(s) data and config files to the appropriate config directory on the enduser's local laptop and ultimately copied / deployed back to the new ISLE Host Server. The suggested workflow is for endusers to review the Production file(s) first, make note of any settings and then make appropriate edits within the yourdomain-config directory to change values, add passwords or usernames etc on your local laptop with the ultimate goal of checking all results into a git repository for deploy later on the ISLE Host server. The only change is that unless otherwise directed e.g. Apache html and Fedora data . all changes should be made on the local laptop in the yourdomain-config directory. Please note as per the migration guide instructions the name of this directory shouldn't literally be \"yourdomain-config\" or \"yourdomain-data\" so replace \"yourdomain\" with the name of your intended Islandora site's domain. While this checklist will attempt to point out most of the merge challenges or pitfalls, you may encounter unique situations depending on the edits and customizations made to your Islandora environment in the past. This is a good place to reach out to the Islandora community for assistance. Please note: In some cases, some of the configuration files copied from your running production Islandora may have comments (#) in them to help guide endusers to make the appropriate edits e.g. (# enduser edit here) In most cases, many of the configuration files copied from ISLE repository to yourdomain-config will have fake or empty settings in them. Please remove, edit or enter new values as advised. Apache Compare, edit, merge or copy the following from the source directory current-production-config/apache/ to: yourdomain-config/apache/ on your local laptop. Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location html Islandora/Drupal Website current-production-config/apache/ yourdomain-data/apache/ Remote ISLE Host server settings.php Drupal settings.php file current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop site.conf Apache webserver vhost file current-production-config/apache/ reference file but do not copy Local ISLE config laptop Apache Edits html - endusers will have copied this entire directory instead to a new directory called yourdomain-data/apache/html/ on your remote ISLE host server in the appropriate storage area. settings.php - endusers will want to edit database and user names for Drupal sites to connect properly. Lines 251 -253: Change the appropriate settings for the Drupal website database, associate database user name and password. Do not change the host settings. Line 288: Recommend adding a Drupal hash value here of 25+ alpha-numeric characters Line 312: $base_url should be commented out as it isn't used due to the proxy. Apache - sites-enabled Please note that endusers will take values from the site.conf file and flow the information as needed into the to be renamed newsite-sample-ssl.conf & newsite-sample.conf files accordingly with the domain name of your choice. This file will not be copied to yourdomain-config/apache/ for any usage. Within the sites-enabled directory, rename the files newsite-sample-ssl.conf and newsite-sample.conf to your domain names - example: digital-collections.example.edu_ssl.conf digital-collections.example.edu.conf Edit the previously named newsite-sample.conf file and change lines 3 and 4 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 4 and 5 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 12, 13 and 14 to point to the location of your certs on the apache container - example: ``` SSLCertificateFile /certs/newsite-sample.pem SSLCertificateChainFile /certs/newsite-sample-interm.pem SSLCertificateKeyFile /certs/newsite-sample-key.pem ``` If there are any additional customizations required, you'll need to copy them into these two vhost files accordingly. Apache Optional Edits Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location php.ini PHP configuration file current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop php.ini - endusers can make appropriate edits within yourdomain-config/apache/php.ini to increase the upload settings, memory etc. as needed. Otherwise leaving the default values should work. Please note: an additional line will have to be added to the associated docker-compose.yml in the Apache volumes: section for this edit to work e.g. - ./apache/php.ini:/etc/php.ini Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location tmpreaper Cronjob for tmpreaper current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop tmpreaper - (optional) endusers may want to edit this tmpreaper cron job for different locations and/or times. The docker-compose.yml file will need an associated bind-mount for this change. Please note: an additional line will have to be added to the associated docker-compose.yml in the Apache volumes: section for this edit to work e.g. - ./apache/tmpreaper/cron:/etc/cron.d/tmpreaper-cron Apache - ssl-certs If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. Copy your original production SSL certificates for Apache into the apache/ssl-certs subdirectory. They will and should have different names than the examples provided below dependent on the ISLE environment you are setting up e.g. ( production, staging or development ). There can be up to 2 - 3 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem 1 x SSL Certificate Chain File e.g. newsite-sample-interm.pem This file may be optional in some setups but is generally recommended for use by the apache container when available. It will not be used by the proxy container. Please also note that the file extensions can also be: .cer , .crt or .pem Apache - ssl-certs (multi) When creating multiple environments for ISLE, please change all of the file and key names accordingly to reflect the environment e.g. adding ( -prod, -stage, -dev to file names). Later on, this process will assist in organizing proper filing of files for the proxy container and stop any situation where a file gets overwritten or improperly referenced by the wrong environment. Example: * 1 x SSL Certificate Key File e.g. `newsite-dev-key.pem` * 1 x SSL Certificate File e.g. `newsite-dev.pem` * 1 x SSL Certificate Chain File e.g. `newsite-dev-interm.pem` Fedora Compare, edit, merge or copy the following from the suggested directory current-production-config/fedora/ to: yourdomain-config/fedora/ on your local laptop. Data Description Possible Location Merge, Copy or Edit Location / Destination Copy location datastreamStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/datastreamStore Remote ISLE Host server fedora-xacml-policies Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/fedora-xacml-policies Remote ISLE Host server objectStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/objectStore Remote ISLE Host server fedora.fcfg Fedora repository config file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop fedora-users.xml Fedora users config file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop filter-drupal.xml Fedora Drupal filter file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop repository-policies Fedora Drupal filter file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop Fedora Edits The outlined contents (above) of the production Islandora Fedora data directory should be copied to a new directory called yourdomain-data/fedora/data/ on your remote ISLE host server in the appropriate storage area. Do not copy the following directories from the production Islandora fedora /usr/local/fedora/data directory. /usr/local/fedora/ data/activemq-data /usr/local/fedora/ data/resourceIndex fedora.fcfg - endusers will want to edit the following: Line: 562 (optional) to change the fedora_admin username for the fedora3 database Line: 598 (necessary) to enter the fedora_admin user password for the fedora3 database fedora-users.xml - endusers will want to edit the following: Lines 3, 8, 14 and 19: Add the appropriate passwords or users as needed. filter-drupal.xml - endusers will want to edit Line 3: Add the appropriate Drupal site database name, Drupal site database user and Drupal site database user password in between all \"\" Please note: For endusers using Drupal multi-sites, please add additional sites as guided in the example below Example <?xml version=\"1.0\" encoding=\"UTF-8\"?> <FilterDrupal_Connection> <connection server=\"mysql\" port=\"3306\" dbname=\"drupalsite1\" user=\"drupalsite1_user\" password=\"drupalsite1_user_pw\"> <sql> SELECT DISTINCT u.uid AS userid, u.name AS Name, u.pass AS Pass,r.name AS Role FROM (users u LEFT JOIN users_roles ON u.uid=users_roles.uid) LEFT JOIN role r ON r.rid=users_roles.rid WHERE u.name=? AND u.pass=?; </sql> </connection> <connection server=\"mysql\" port=\"3306\" dbname=\"drupalsite2\" user=\"drupalsite2_user\" password=\"drupalsite2_user_pw\"> <sql> SELECT DISTINCT u.uid AS userid, u.name AS Name, u.pass AS Pass,r.name AS Role FROM (users u LEFT JOIN users_roles ON u.uid=users_roles.uid) LEFT JOIN role r ON r.rid=users_roles.rid WHERE u.name=? AND u.pass=?; </sql> </connection> </FilterDrupal_Connection> fedora/repository-policies - endusers can edit the files contained within for more granular or customized Fedora user permissions or repository access. MySQL The mysql subdirectory contains all specific configurations and overrides necessary for the ISLE mysql image and resulting container to function properly with your changes. This is the Mysql database server that will contain at least two databases, one for the Islandora / Drupal website and the other for the Fedora repository. If you are running Drupal multi-sites, you'll need to create the additional users and database creation scripts. ( Optional ) Edit the Mysql configuration file my.cnf as needed otherwise leave alone. Mysql -initscripts This subdirectory houses SQL scripts necessary for a one time creation of your associated new site and fedora3 database. You'll want to rename newsite_sample_db.sql to the database or domain name of your choice. Edit the contents of newsite_sample_db.sql to create the new drupal site database and user. Line 1: Change the database name from newsite_sample_db to the database name of your choice. Line 2: Change the database user name from newsite_sample_db_user to the database user name of your choice. Line 3: At almost the end of the line, change the value of newsite_sample_db.* to the to the database name of your choice ensuring the .* remain without a space. Line 3: At the end of the line, change the value of newsite_sample_db_user' to the to the database user name of your choice ensuring the values remain with in the '' quotes without spaces. Do not alter the remaining code ( @'%';' ) beyond that point. Edit the contents of fedora3 to change the fedora_admin user password only. Line 2: Change the fedora_admin user password from newsite_sample_fedora_admin_pw to the password of your choice. It is not recommended to change anything else. Solr Compare, edit, merge or copy the following from the source directory current-production-config/solr/ to: yourdomain-config/solr/ on your local laptop. Data Description Possible Location Merge, Copy or Edit Location / Destination Copy location schema.xml Solr index config file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop solrconfig.xml Solr config file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop stopwords.txt solr webserver vhost file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop Solr Edits schema.xml Usually the first file one configures when setting up a new Solr installation The schema declares what kinds of fields there are which field should be used as the unique/primary key which fields are required how to index and search each field solrconfig.xml The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, one can configure the following: request handlers, which process requests to Solr, e.g. requests to add documents to the index or requests to return results for a query processes that \"listen\" for particular query-related events; listeners can be used to trigger the execution of special code the Request Dispatcher for managing HTTP communications the Admin Web interface parameters related to replication and duplication stopwords.txt _Using the stopwords.txt file, one can avoid the common words of a language, which do not add a significant value to any search. For example, a, an, the, you, I, am, and so on. One can specify words to be removed from the Solr search in this file line-by-line. Additional Locations: /opt/solr /usr/local/solr /var/lib/tomcat7/webapps/solr /usr/share/tomcat/webapps/solr Proxy directory If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. This directory and service will not exist on any current islandora production systems. Please pick one of the following guides to complete this configuration. If the migrated production site is to be the first or only site running on the ISLE host server, please follow the New Site Installation Guide - w/ Single ISLE Environment , ### Proxy directory section, lines 317 - 395. If the migrated production site is not the first or only site running on the ISLE host server, please follow the New Site Installation Guide - w/ multiple ISLE Environments Read the Assumptions / Prerequisites section, lines 16 -32 Read the Multiple ISLE / Islandora Environments section, lines 36 -88 All of the sections starting with Proxy directory paying particular attention to anything labelled with (multi) , lines 384 - 623","title":"Migration Merge Checklist"},{"location":"04_installation_migration/migration_merge_checklist/#apache","text":"Compare, edit, merge or copy the following from the source directory current-production-config/apache/ to: yourdomain-config/apache/ on your local laptop. Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location html Islandora/Drupal Website current-production-config/apache/ yourdomain-data/apache/ Remote ISLE Host server settings.php Drupal settings.php file current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop site.conf Apache webserver vhost file current-production-config/apache/ reference file but do not copy Local ISLE config laptop","title":"Apache"},{"location":"04_installation_migration/migration_merge_checklist/#apache-edits","text":"html - endusers will have copied this entire directory instead to a new directory called yourdomain-data/apache/html/ on your remote ISLE host server in the appropriate storage area. settings.php - endusers will want to edit database and user names for Drupal sites to connect properly. Lines 251 -253: Change the appropriate settings for the Drupal website database, associate database user name and password. Do not change the host settings. Line 288: Recommend adding a Drupal hash value here of 25+ alpha-numeric characters Line 312: $base_url should be commented out as it isn't used due to the proxy.","title":"Apache Edits"},{"location":"04_installation_migration/migration_merge_checklist/#apache-sites-enabled","text":"Please note that endusers will take values from the site.conf file and flow the information as needed into the to be renamed newsite-sample-ssl.conf & newsite-sample.conf files accordingly with the domain name of your choice. This file will not be copied to yourdomain-config/apache/ for any usage. Within the sites-enabled directory, rename the files newsite-sample-ssl.conf and newsite-sample.conf to your domain names - example: digital-collections.example.edu_ssl.conf digital-collections.example.edu.conf Edit the previously named newsite-sample.conf file and change lines 3 and 4 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 4 and 5 to point to the location of your apache logs on the container - example: ErrorLog /var/log/apache2/digital-collections.example.edu.ssl.error.log CustomLog /var/log/apache2/digital-collections.example.edu.ssl.access.log combined Edit the previously named newsite-sample-ssl.conf file and change lines 12, 13 and 14 to point to the location of your certs on the apache container - example: ``` SSLCertificateFile /certs/newsite-sample.pem SSLCertificateChainFile /certs/newsite-sample-interm.pem SSLCertificateKeyFile /certs/newsite-sample-key.pem ``` If there are any additional customizations required, you'll need to copy them into these two vhost files accordingly.","title":"Apache - sites-enabled"},{"location":"04_installation_migration/migration_merge_checklist/#apache-optional-edits","text":"Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location php.ini PHP configuration file current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop php.ini - endusers can make appropriate edits within yourdomain-config/apache/php.ini to increase the upload settings, memory etc. as needed. Otherwise leaving the default values should work. Please note: an additional line will have to be added to the associated docker-compose.yml in the Apache volumes: section for this edit to work e.g. - ./apache/php.ini:/etc/php.ini Data Description Production Data Copy Merge, Copy or Edit Location / Destination Copy location tmpreaper Cronjob for tmpreaper current-production-config/apache/ yourdomain-config/apache/ Local ISLE config laptop tmpreaper - (optional) endusers may want to edit this tmpreaper cron job for different locations and/or times. The docker-compose.yml file will need an associated bind-mount for this change. Please note: an additional line will have to be added to the associated docker-compose.yml in the Apache volumes: section for this edit to work e.g. - ./apache/tmpreaper/cron:/etc/cron.d/tmpreaper-cron","title":"Apache Optional Edits"},{"location":"04_installation_migration/migration_merge_checklist/#apache-ssl-certs","text":"If need be, please refer to the SSL certificate section of the Glossary for relevant terms to help guide installation. Copy your original production SSL certificates for Apache into the apache/ssl-certs subdirectory. They will and should have different names than the examples provided below dependent on the ISLE environment you are setting up e.g. ( production, staging or development ). There can be up to 2 - 3 files involved in this process. 1 x SSL Certificate Key File e.g. newsite-sample-key.pem This file is required. Please also note that the file extensions can also be: .key or .pem 1 x SSL Certificate File e.g. newsite-sample.pem This file is required. Please also note that the file extensions can also be: .cer , .crt or .pem 1 x SSL Certificate Chain File e.g. newsite-sample-interm.pem This file may be optional in some setups but is generally recommended for use by the apache container when available. It will not be used by the proxy container. Please also note that the file extensions can also be: .cer , .crt or .pem","title":"Apache - ssl-certs"},{"location":"04_installation_migration/migration_merge_checklist/#apache-ssl-certs-multi","text":"When creating multiple environments for ISLE, please change all of the file and key names accordingly to reflect the environment e.g. adding ( -prod, -stage, -dev to file names). Later on, this process will assist in organizing proper filing of files for the proxy container and stop any situation where a file gets overwritten or improperly referenced by the wrong environment. Example: * 1 x SSL Certificate Key File e.g. `newsite-dev-key.pem` * 1 x SSL Certificate File e.g. `newsite-dev.pem` * 1 x SSL Certificate Chain File e.g. `newsite-dev-interm.pem`","title":"Apache - ssl-certs (multi)"},{"location":"04_installation_migration/migration_merge_checklist/#fedora","text":"Compare, edit, merge or copy the following from the suggested directory current-production-config/fedora/ to: yourdomain-config/fedora/ on your local laptop. Data Description Possible Location Merge, Copy or Edit Location / Destination Copy location datastreamStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/datastreamStore Remote ISLE Host server fedora-xacml-policies Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/fedora-xacml-policies Remote ISLE Host server objectStore Entire Fedora data directory /usr/local/fedora/data/ yourdomain-data/fedora/data/objectStore Remote ISLE Host server fedora.fcfg Fedora repository config file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop fedora-users.xml Fedora users config file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop filter-drupal.xml Fedora Drupal filter file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop repository-policies Fedora Drupal filter file /usr/local/fedora/server/config/ yourdomain-config/fedora/ Local ISLE config laptop","title":"Fedora"},{"location":"04_installation_migration/migration_merge_checklist/#fedora-edits","text":"The outlined contents (above) of the production Islandora Fedora data directory should be copied to a new directory called yourdomain-data/fedora/data/ on your remote ISLE host server in the appropriate storage area. Do not copy the following directories from the production Islandora fedora /usr/local/fedora/data directory. /usr/local/fedora/ data/activemq-data /usr/local/fedora/ data/resourceIndex fedora.fcfg - endusers will want to edit the following: Line: 562 (optional) to change the fedora_admin username for the fedora3 database Line: 598 (necessary) to enter the fedora_admin user password for the fedora3 database fedora-users.xml - endusers will want to edit the following: Lines 3, 8, 14 and 19: Add the appropriate passwords or users as needed. filter-drupal.xml - endusers will want to edit Line 3: Add the appropriate Drupal site database name, Drupal site database user and Drupal site database user password in between all \"\" Please note: For endusers using Drupal multi-sites, please add additional sites as guided in the example below Example <?xml version=\"1.0\" encoding=\"UTF-8\"?> <FilterDrupal_Connection> <connection server=\"mysql\" port=\"3306\" dbname=\"drupalsite1\" user=\"drupalsite1_user\" password=\"drupalsite1_user_pw\"> <sql> SELECT DISTINCT u.uid AS userid, u.name AS Name, u.pass AS Pass,r.name AS Role FROM (users u LEFT JOIN users_roles ON u.uid=users_roles.uid) LEFT JOIN role r ON r.rid=users_roles.rid WHERE u.name=? AND u.pass=?; </sql> </connection> <connection server=\"mysql\" port=\"3306\" dbname=\"drupalsite2\" user=\"drupalsite2_user\" password=\"drupalsite2_user_pw\"> <sql> SELECT DISTINCT u.uid AS userid, u.name AS Name, u.pass AS Pass,r.name AS Role FROM (users u LEFT JOIN users_roles ON u.uid=users_roles.uid) LEFT JOIN role r ON r.rid=users_roles.rid WHERE u.name=? AND u.pass=?; </sql> </connection> </FilterDrupal_Connection> fedora/repository-policies - endusers can edit the files contained within for more granular or customized Fedora user permissions or repository access.","title":"Fedora Edits"},{"location":"04_installation_migration/migration_merge_checklist/#mysql","text":"The mysql subdirectory contains all specific configurations and overrides necessary for the ISLE mysql image and resulting container to function properly with your changes. This is the Mysql database server that will contain at least two databases, one for the Islandora / Drupal website and the other for the Fedora repository. If you are running Drupal multi-sites, you'll need to create the additional users and database creation scripts. ( Optional ) Edit the Mysql configuration file my.cnf as needed otherwise leave alone.","title":"MySQL"},{"location":"04_installation_migration/migration_merge_checklist/#mysql-initscripts","text":"This subdirectory houses SQL scripts necessary for a one time creation of your associated new site and fedora3 database. You'll want to rename newsite_sample_db.sql to the database or domain name of your choice. Edit the contents of newsite_sample_db.sql to create the new drupal site database and user. Line 1: Change the database name from newsite_sample_db to the database name of your choice. Line 2: Change the database user name from newsite_sample_db_user to the database user name of your choice. Line 3: At almost the end of the line, change the value of newsite_sample_db.* to the to the database name of your choice ensuring the .* remain without a space. Line 3: At the end of the line, change the value of newsite_sample_db_user' to the to the database user name of your choice ensuring the values remain with in the '' quotes without spaces. Do not alter the remaining code ( @'%';' ) beyond that point. Edit the contents of fedora3 to change the fedora_admin user password only. Line 2: Change the fedora_admin user password from newsite_sample_fedora_admin_pw to the password of your choice. It is not recommended to change anything else.","title":"Mysql -initscripts"},{"location":"04_installation_migration/migration_merge_checklist/#solr","text":"Compare, edit, merge or copy the following from the source directory current-production-config/solr/ to: yourdomain-config/solr/ on your local laptop. Data Description Possible Location Merge, Copy or Edit Location / Destination Copy location schema.xml Solr index config file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop solrconfig.xml Solr config file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop stopwords.txt solr webserver vhost file ../solr/collection1/conf yourdomain-config/solr/ Local ISLE config laptop","title":"Solr"},{"location":"04_installation_migration/migration_merge_checklist/#solr-edits","text":"schema.xml Usually the first file one configures when setting up a new Solr installation The schema declares what kinds of fields there are which field should be used as the unique/primary key which fields are required how to index and search each field solrconfig.xml The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, one can configure the following: request handlers, which process requests to Solr, e.g. requests to add documents to the index or requests to return results for a query processes that \"listen\" for particular query-related events; listeners can be used to trigger the execution of special code the Request Dispatcher for managing HTTP communications the Admin Web interface parameters related to replication and duplication stopwords.txt _Using the stopwords.txt file, one can avoid the common words of a language, which do not add a significant value to any search. For example, a, an, the, you, I, am, and so on. One can specify words to be removed from the Solr search in this file line-by-line. Additional Locations: /opt/solr /usr/local/solr /var/lib/tomcat7/webapps/solr /usr/share/tomcat/webapps/solr","title":"Solr Edits"},{"location":"04_installation_migration/migration_merge_checklist/#proxy-directory","text":"If need be, please refer to the Systems section of the Glossary for relevant terms to help guide installation. This directory and service will not exist on any current islandora production systems. Please pick one of the following guides to complete this configuration. If the migrated production site is to be the first or only site running on the ISLE host server, please follow the New Site Installation Guide - w/ Single ISLE Environment , ### Proxy directory section, lines 317 - 395. If the migrated production site is not the first or only site running on the ISLE host server, please follow the New Site Installation Guide - w/ multiple ISLE Environments Read the Assumptions / Prerequisites section, lines 16 -32 Read the Multiple ISLE / Islandora Environments section, lines 36 -88 All of the sections starting with Proxy directory paying particular attention to anything labelled with (multi) , lines 384 - 623","title":"Proxy directory"},{"location":"04_installation_migration/migration_reindex_process/","text":"When migrating any non-ISLE Islandora site, it is crucial to rebuild (reindex) the following three indices from the FOXML and datastream files on disk. Fedora's indices: Resource Index - The Resource Index is the Fedora module that provides the infrastructure for indexing relationships among objects and their components. SQL database - fedora3 contains information vital for the Drupal site to connect to Fedora correctly. Solr index Solr Index - Solr an open source enterprise search platform works in conjunction with the Islandora Solr module to provide a way to configure the Islandora search functions, the search results display, and the display of metadata on object pages. The index serves as a list of those objects for fast searching across large collections. You can use the command-line interactive utility fedora-rebuild.sh on the fedora container to rebuild all indices when the Fedora (not Tomcat) server is offline. Depending on the size of your repository, this entire process may take minutes (thousands of objects) or hours (millions of objects) to complete. Assumptions / Pre-Requisites All containers are currently running tomcat_admin_password = The tomcat admin password from the Fedora container. ISLE_HOST_IP = The IP address of your ISLE Host server. Shutdown Fedora Method 1: Open a browser and navigate to http://ISLE_HOST_IP:8080/manager/html User: admin Password: tomcat_admin_password Scroll down to the fedora row and on the right in the Commands column, click the stop button. Wait 20 seconds. Move onto the Reindex Fedora RI (1 of 3) section. Shutdown Fedora Method 2: tomcat_admin_password = Change this to your tomcat admin password from the Fedora container. Shell into the running fedora container * docker exec -it compass-fedora-dev bash wget \"http://admin:tomcat_admin_password:8080/manager/text/stop?path=/fedora\" -O - -q Type: exit to exit the fedora container. Move onto the Reindex Fedora RI (1 of 3) section. Reindex Fedora RI (1 of 3) Shell into the fedora container: docker exec -it compass-fedora-dev bash cd /usr/local/fedora/server/bin This command will take from 10 - 30+ mins to complete depending on the size of your Fedora collection. If it fails immediately, check the log it creates for details: tail -f /usr/local/tomcat/logs/fedora_ri.log /bin/sh fedora-rebuild.sh -r org.fcrepo.server.resourceIndex.ResourceIndexRebuilder > /usr/local/tomcat/logs/fedora_ri.log 2>&1 Stay within the fedora container and continue to the next section Reindex SQL database (2 of 3). Reindex SQL database (2 of 3) mysqlrootpassword = Change this to your MySQL root password from the MySQL container. Connect to the mysql container from the fedora container to truncate fedora3 tables. mysql -h mysql -u root -pmysqlrootpassword Please note: ^ there should be no space between the last command -p and your mysql root password. (mysqlrootpassword) The mysql prompt should now appear. You are now connected to the mysql container via the mysql client on the fedora container. Select the fedora3 database. use fedora3; The mysql prompt should now display something similar to this: MySQL [fedora3]> Display all of the tables of the fedora3 database. show tables; Example: +---------------------+ | Tables_in_fedora3 | +---------------------+ | dcDates | | doFields | | doRegistry | | fcrepoRebuildStatus | | modelDeploymentMap | | pidGen | +---------------------+ 6 rows in set (0.00 sec) Enter the following commands: truncate table dcDates; truncate table doFields; truncate table doRegistry; truncate table fcrepoRebuildStatus; truncate table modelDeploymentMap; truncate table pidGen; Return to the terminal with fedora container shelled in. exit The mysql prompt should disappear and the prompt for fedora should reappear. You've been returned to the fedora container. cd /usr/local/fedora/server/bin This command will take from 10 - 30+ mins to complete depending on the size of your Fedora collection. If it fails immediately, check the log it creates for details: tail -f /usr/local/tomcat/logs/sql_ri.log /bin/sh fedora-rebuild.sh -r org.fcrepo.server.utilities.rebuild.SQLRebuilder > /usr/local/tomcat/logs/sql_ri.log 2>&1 Stay within the fedora container and continue to the next section Reindex Solr (3 of 3). Reindex Solr (3 of 3) fgsAdmin_password = Change this to your Fedora Gsearch (fgsAdmin) password from the Fedora container. WARNING This reindex process takes the longest of all three, with up to 1 - 30 or more hours to complete depending on the size of your Fedora collection. As such, it is recommended starting a screen session prior to running the following command. Learn more about screen here Whether you use screen prior or not, shell into the fedora container: docker exec -it compass-fedora-dev bash cd /usr/local/tomcat/webapps/fedoragsearch/client /bin/sh runRESTClient.sh localhost:8080 updateIndex fromFoxmlFiles User: fgsAdmin Password: fgsAdmin_password Again this process will take up to 1 - 30 or more hours to complete depending on the size of your Fedora collection. You can tail either Fedora Gsearch or Solr logs, ( locations here ) to watch the indexing process ( if necessary ). Type exit when finished to exit the container.","title":"Migration Reindex Process"},{"location":"04_installation_migration/migration_reindex_process/#assumptions-pre-requisites","text":"All containers are currently running tomcat_admin_password = The tomcat admin password from the Fedora container. ISLE_HOST_IP = The IP address of your ISLE Host server.","title":"Assumptions / Pre-Requisites"},{"location":"04_installation_migration/migration_reindex_process/#shutdown-fedora-method-1","text":"Open a browser and navigate to http://ISLE_HOST_IP:8080/manager/html User: admin Password: tomcat_admin_password Scroll down to the fedora row and on the right in the Commands column, click the stop button. Wait 20 seconds. Move onto the Reindex Fedora RI (1 of 3) section.","title":"Shutdown Fedora Method 1:"},{"location":"04_installation_migration/migration_reindex_process/#shutdown-fedora-method-2","text":"tomcat_admin_password = Change this to your tomcat admin password from the Fedora container. Shell into the running fedora container * docker exec -it compass-fedora-dev bash wget \"http://admin:tomcat_admin_password:8080/manager/text/stop?path=/fedora\" -O - -q Type: exit to exit the fedora container. Move onto the Reindex Fedora RI (1 of 3) section.","title":"Shutdown Fedora Method 2:"},{"location":"04_installation_migration/migration_reindex_process/#reindex-fedora-ri-1-of-3","text":"Shell into the fedora container: docker exec -it compass-fedora-dev bash cd /usr/local/fedora/server/bin This command will take from 10 - 30+ mins to complete depending on the size of your Fedora collection. If it fails immediately, check the log it creates for details: tail -f /usr/local/tomcat/logs/fedora_ri.log /bin/sh fedora-rebuild.sh -r org.fcrepo.server.resourceIndex.ResourceIndexRebuilder > /usr/local/tomcat/logs/fedora_ri.log 2>&1 Stay within the fedora container and continue to the next section Reindex SQL database (2 of 3).","title":"Reindex Fedora RI (1 of 3)"},{"location":"04_installation_migration/migration_reindex_process/#reindex-sql-database-2-of-3","text":"mysqlrootpassword = Change this to your MySQL root password from the MySQL container. Connect to the mysql container from the fedora container to truncate fedora3 tables. mysql -h mysql -u root -pmysqlrootpassword Please note: ^ there should be no space between the last command -p and your mysql root password. (mysqlrootpassword) The mysql prompt should now appear. You are now connected to the mysql container via the mysql client on the fedora container. Select the fedora3 database. use fedora3; The mysql prompt should now display something similar to this: MySQL [fedora3]> Display all of the tables of the fedora3 database. show tables; Example: +---------------------+ | Tables_in_fedora3 | +---------------------+ | dcDates | | doFields | | doRegistry | | fcrepoRebuildStatus | | modelDeploymentMap | | pidGen | +---------------------+ 6 rows in set (0.00 sec) Enter the following commands: truncate table dcDates; truncate table doFields; truncate table doRegistry; truncate table fcrepoRebuildStatus; truncate table modelDeploymentMap; truncate table pidGen; Return to the terminal with fedora container shelled in. exit The mysql prompt should disappear and the prompt for fedora should reappear. You've been returned to the fedora container. cd /usr/local/fedora/server/bin This command will take from 10 - 30+ mins to complete depending on the size of your Fedora collection. If it fails immediately, check the log it creates for details: tail -f /usr/local/tomcat/logs/sql_ri.log /bin/sh fedora-rebuild.sh -r org.fcrepo.server.utilities.rebuild.SQLRebuilder > /usr/local/tomcat/logs/sql_ri.log 2>&1 Stay within the fedora container and continue to the next section Reindex Solr (3 of 3).","title":"Reindex SQL database (2 of 3)"},{"location":"04_installation_migration/migration_reindex_process/#reindex-solr-3-of-3","text":"fgsAdmin_password = Change this to your Fedora Gsearch (fgsAdmin) password from the Fedora container. WARNING This reindex process takes the longest of all three, with up to 1 - 30 or more hours to complete depending on the size of your Fedora collection. As such, it is recommended starting a screen session prior to running the following command. Learn more about screen here Whether you use screen prior or not, shell into the fedora container: docker exec -it compass-fedora-dev bash cd /usr/local/tomcat/webapps/fedoragsearch/client /bin/sh runRESTClient.sh localhost:8080 updateIndex fromFoxmlFiles User: fgsAdmin Password: fgsAdmin_password Again this process will take up to 1 - 30 or more hours to complete depending on the size of your Fedora collection. You can tail either Fedora Gsearch or Solr logs, ( locations here ) to watch the indexing process ( if necessary ). Type exit when finished to exit the container.","title":"Reindex Solr (3 of 3)"},{"location":"05_developer_docs/dev_ansible_guide/","text":"You have the choice of using Ansible to deploy the Docker Host server dependencies instead of performing manual commands on either a CentOS or Ubuntu OS. The Ansible script and configuration files can be found in the root folder of the ISLE git repo in a directory named ansible . Additionally, the Ansible script is designed to detect the chosen operating system and then install the appropriate dependencies with minimal user interaction or prior configuration. Ansible is an free open source automation platform / tool which runs on Linux, Mac or BSD, doesn\u2019t use local or remote agents and is relatively easy to setup. Ansible can help with server configuration management, application deployment, task automation and IT orchestration ( running tasks in sequence on several different servers or devices ). If you are not familiar with the Ansible, it is recommended to start with their documentation. Ansible website What is Ansible? Ansible Documentation Notes: For MacOS users using a local ISLE Host VM on their laptop or workstation, please scroll down to line 395 the section called Using Ansible on MacOS . Windows sadly as of yet cannot be used as a Ansible control machine Do not use this script if running Docker for Mac or Docker for Windows as the dependencies are not required. This script can be used with the supplied Vagrant profiles (Ubuntu or CentOS) found within the vagrant directory of the ISLE repo. Prerequisites / Assumptions Familiarity or knowledge of Ansible Ansible control workstation, laptop or server that runs only MacOs, BSD or Linux with the following: Ansible 2.2+ (choice of install methods ) openssh (2.2.x+) git (2.15.1+) python (2.7+) The ISLE project repository cloned to an appropriate location. A previously created ISLE Host Server running either of these operating systems: Ubuntu 16.04 LTS CentOS 7 An account with ssh access to the ISLE Host Server An account with password-less sudo access on the ISLE Host Server The IP of the ISLE Host server Ansible Deploy Script Explanation Within the docker_install.yml Ansible playbook, there are the following roles which perform different actions or cause different events on the ISLE Host server. Ansible Role Action / Event dependencies Installs software dependencies & tools as described above users_groups Adds users, groups and updates permissions as described above docker Installs Docker docker_compose Installs Docker Compose git_clone Clones the current ISLE git repository to /opt/ISLE docker_images Pulls down the latest ISLE Docker Images from Dockerhub.com Installs software dependencies & tools including: The Ansible script will deploy the following to the ISLE Host server: Ubuntu / Debian CentOS software-properties-common libselinux-python python-software-properties libsemanage-python -- yum-utils ntp ntp openssh-client openssh-clients rsync rsync curl curl wget wget git git zip zip unzip unzip vim vim nano nano emacs24-nox emacs htop htop apt-transport-https -- ca-certificates -- Makes ISLE Host service changes Please Note: Any of these services can be re-enabled post installation see appropriate documentation for opening ports on firewalls etc. Ubuntu / Debian CentOS enables ntp service enables ntp service disables ufw disables iptables -- sets selinux to permissive Adds users, groups and updates permissions Creates the islandora user Along with an appropriate password generates a ssh key bestows sudo password-less access Gives the islandora user the ability to run Docker & Docker Compose by adding the account to the Docker group. Disables root user access via ssh Disables use of passwords with ssh. key based access only to the ISLE Host server Installs additional software Docker Docker Compose Git clones the ISLE repo to /opt/ISLE Pulls down the most recent ISLE images Ansible script directory structure ansible \u251c\u2500\u2500 docker_install.yml \u251c\u2500\u2500 host_vars \u2502 \u251c\u2500\u2500 host_local_macos_isle_localdomain.yml \u2502 \u2514\u2500\u2500 isle-prod-project.institution.yml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles \u251c\u2500\u2500 dependencies \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 ubuntu.yml \u2502 \u251c\u2500\u2500 main.yml \u2502 \u2514\u2500\u2500 centos.yml \u251c\u2500\u2500 docker \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 install.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 docker_compose \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 install.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 docker_images \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 images_pull.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 git_clone \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 git_clone.yml \u2502 \u2514\u2500\u2500 main.yml \u2514\u2500\u2500 users_groups \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 islandora \u2514\u2500\u2500 tasks \u251c\u2500\u2500 groups.yml \u251c\u2500\u2500 main.yml \u251c\u2500\u2500 secure.yml \u251c\u2500\u2500 ssh.yml \u2514\u2500\u2500 users.yml Configure Ansible Script to deploy to ISLE Host To configure the Ansible script to deploy to one's institutional ISLE Host Server, please review and edit the following files within the ansible directory. ansible/docker_install.yml ansible/inventory ansible/host_vars/isle-prod-project.institution.yml Basically wherever isle-prod-project.institution appears as a value in these three files, please replace with the appropriate ISLE Host server fully qualified domain name ( fqdn ) e.g. yourislesite.institution.com One can open up and edit all files in a text editor e.g. Atom, Textedit, Textwrangler etc. ansible/docker_install.yml This is the Ansible playbook necessary to deploy software to the ISLE host server. At the top of the file remove isle-prod-project.institution and replace with the appropriate fqdn . ansible/inventory.yml This is the possible list of server(s) to deploy to using Ansible and its associated playbook(s). Please Note: These instructions below are repeated within the file itself. Line 7: remove isle-prod-project.institution from in between the brackets and replace with the appropriate fqdn Line 8: Add the appropriate ISLE Host server user account that has sudo passwordless permissions to the end of ansible_ssh_user= Example : ansible_ssh_user=janesmith Line 8: Add the appropriate path to this ISLE Host Server user accounts public ssh key to the end of ansible_ssh_private_key_file= Example of inventory using settings for local Ansible deploy laptop: ansible_ssh_private_key_file=/home/janesmith/.ssh/id_rsa.pub Please Note: This key is typically found on the local control (Ansible deploy laptop / workstation) system and should have been previously copied to the appropriate ISLE Host server user account's /home/islehostserver_user/.ssh/authorized_keys file. Final Example end result for inventory file with all settings above [yourislesite.institution.com] yourislesite.institution.com ansible_connection=ssh ansible_ssh_user=janesmith ansible_ssh_private_key_file=/home/janesmith/.ssh/id_rsa.pub ansible/isle-prod-project.institution.yml Copy this file and rename the copy to with the appropriate fqdn Example of how host_vars directory should now contain two files: ansible \u251c\u2500\u2500 docker_install.yml \u251c\u2500\u2500 host_vars \u2502 \u251c\u2500\u2500 isle-prod-project.institution.yml \u2502 \u2514\u2500\u2500 yourislesite.institution.com.yml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles Edit the following lines within the newly created file i.e. yourislesite.institution.com.yml and remove the comments (#) as asked Please Note: The fqdn in the inventory file should match this filename as well. Examples ONLY ( Do not enter these literal values ) Line 9: ansible_ssh_host: 192.168.1.16 This is the IP address of the ISLE Host server Line 10: ansible_ssh_user: janesmith This is the appropriate ISLE Host server user account that has sudo passwordless permissions. Line 15: pub_locale: /home/janesmith/.ssh/id_rsa.pub This is the key found on the local control (Ansible deploy laptop / workstation) system which has been previously copied to the appropriate ISLE Host server user account's /home/islehostserver_user/.ssh/authorized_keys file. Ansible commands to test connection Test if the Ansible control laptop / workstation can connect to the ISLE Host server by running these commands. On the local Ansible control laptop / workstation, open a terminal window and enter the following: cd /path/to/ISLE/repo/ansible ansible -i inventory isle-host-server -m ping Example output of above command ( IGNORE THE WARNING ) [WARNING]: Found both group and host with same name: isle-host-server isle-host-server | SUCCESS => { \"changed\": false, \"ping\": \"pong\" } Please Note: If SUCCESS doesn't appear as a value or if the wording of the prompt is in RED with \"host doesn't exist ...\", review all steps above and check the settings. Do not advance until the Example output above matches. Ansible commands for deploy To deploy to the ISLE Host Server, run this command. ansible-playbook -i inventory docker_install.yml Ansible will start displaying output within the terminal. If any turn red and the script terminates, please review the above settings and connectivity to the server. Attempt to rerun the script. QC Review checklist To ensure a successful deploy to the ISLE Server, please review the following to ensure that the deploy to the Islandora Host server was successful. Open a terminal window on the Ansible control laptop /workstation and ssh into the Islandora Host server using the appropriate enduser account setup prior to the deploy. Example : ssh enduser@isle-prod-project.institution Docker To check where Docker has been installed to, enter: which docker Example output: /usr/bin/docker To check which version of Docker has been installed, enter: docker --version Example output: Docker version 17.12.0-ce, build c97c6d6 To check if Docker is running, enter: service docker status Example output: Redirecting to /bin/systemctl status docker.service \u25cf docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: active (running) since Thu 2018-03-18 14:36:55 EST; 1 weeks 4 days ago Docs: https://docs.docker.com Main PID: 23066 (dockerd) Memory: 55.3M .... To check if the ISLE images have been downloaded on the ISLE Host server, enter: docker image ls Example output: REPOSITORY TAG IMAGE ID CREATED SIZE islandoracollabgroup/isle-fedora latest 6e2749ca2c2f 2 weeks ago 2.43GB islandoracollabgroup/isle-apache latest 82fe4ae16932 2 weeks ago 2.18GB islandoracollabgroup/isle-solr latest 7fba26c10433 2 weeks ago 784MB islandoracollabgroup/isle-mysql latest f34162f1e0f8 2 weeks ago 299MB islandoracollabgroup/isle-proxy latest 5gdc45f1a074 2 weeks ago 199MB Docker Compose To check where Docker-compose has been installed to, enter: which docker-compose Example output: /usr/local/bin/docker-compose To check which version of Docker-compose has been installed, enter: docker-compose -version Example output: docker-compose version 1.20.1, build 1719ceb Islandora user To check if the islandora user has been created, enter: cat /etc/passwd Example output: islandora:x:1002:1002::/home/islandora:/bin/bash ISLE Project directory To check if the ISLE project git repo has been cloned to /opt/ISLE , enter: ls -lh /opt/ISLE Example output: total 24K drwxr-xr-x. 3 islandora islandora 110 Jan 17 09:17 apache drwxr-xr-x. 5 islandora islandora 84 Jan 23 13:44 config -rwxr-xr-x. 1 islandora islandora 2.0K Jan 18 16:58 docker-compose.yml drwxr-xr-x. 7 islandora islandora 143 Jan 17 09:17 docs drwxr-xr-x. 7 islandora islandora 102 Jan 17 09:17 fedora -rwxr-xr-x. 1 islandora islandora 12K Jan 17 09:17 mkdocs.yml drwxr-xr-x. 3 islandora islandora 54 Jan 17 09:17 mysql drwxr-xr-x. 3 islandora islandora 54 Jan 17 09:17 proxy -rwxr-xr-x. 1 islandora islandora 4.1K Jan 17 09:17 README.md drwxr-xr-x. 4 islandora islandora 50 Jan 17 09:17 solr Once this script has finished one can: Add any appropriate public ssh keys to /home/islandora/.ssh/authorized_keys prior to attempting to ssh to the Islandora Host server as the islandora user. Add the /home/islandora/.ssh/id_rsa.pub key to any git repository contained within the Migration Guide. (Additional instructions appear in that guide if this process is unfamiliar.) Proceed to bottom of this page for next steps. Walkthrough: Using Ansible on a MacOS control machine To install Ansible on the enduser's MacOS laptop / workstation. Install Ansible via Python pip Follow here http://docs.ansible.com/ansible/latest/intro_installation.html#latest-releases-via-pip Or install Ansible via Homebrew (better) /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" brew install ansible There is a ready made Ansible script for the MacOS hosted isle.localdomain called ansible/host_vars/host_local_macos_isle_localdomain.yml Use vagrant for the ansible_ssh_user= value in the ansible/inventory file Use ~/Users/enduser/.vagrant.d/insecure_private_key for the ansible_ssh_private_key_file value in the ansible/inventory file Example [host_local_macos_isle_localdomain] host_local_macos_isle_localdomain ansible_connection=ssh ansible_ssh_user=vagrant ansible_ssh_private_key_file=/Users/enduser/.vagrant.d/insecure_private_key Line 13 in the ansible/host_vars/host_local_macos_isle_localdomain.yml file will need to be edited with the correct path to the enduser's id_rsa.pub file. Change the enduser value to the real username. ( assumes the id_rsa.pub file exists! ) Line 3 in the ansible/docker_install.yml file will need to be edited, change the value of isle-prod-project.institution to host_local_macos_isle_localdomain Once these files have been edited, open a terminal and enter: cd path_to/ISLE/ansible/ Test the connection to the ISLE Host Vagrant Ubuntu VM ansible -i inventory host_local_macos_isle_localdomain -m ping Example output of above command ( IGNORE THE WARNING ) [WARNING]: Found both group and host with same name: host_local_macos_isle_localdomain host_local_macos_isle_localdomain | SUCCESS => { \"changed\": false, \"ping\": \"pong\" } Please Note: If SUCCESS doesn't appear as a value or if the wording of the prompt is in RED with \"host doesn't exist ...\", review all steps above and check the settings. Do not advance until the Example output above matches. To deploy to the ISLE Host Server, run this command. ansible-playbook -i inventory docker_install.yml Ansible will start displaying output within the terminal. If any turn red and the script terminates, please review the above settings and connectivity to the server. Attempt to rerun the script.","title":"Ansible Guide"},{"location":"05_developer_docs/dev_ansible_guide/#prerequisites-assumptions","text":"Familiarity or knowledge of Ansible Ansible control workstation, laptop or server that runs only MacOs, BSD or Linux with the following: Ansible 2.2+ (choice of install methods ) openssh (2.2.x+) git (2.15.1+) python (2.7+) The ISLE project repository cloned to an appropriate location. A previously created ISLE Host Server running either of these operating systems: Ubuntu 16.04 LTS CentOS 7 An account with ssh access to the ISLE Host Server An account with password-less sudo access on the ISLE Host Server The IP of the ISLE Host server","title":"Prerequisites / Assumptions"},{"location":"05_developer_docs/dev_ansible_guide/#ansible-deploy-script-explanation","text":"Within the docker_install.yml Ansible playbook, there are the following roles which perform different actions or cause different events on the ISLE Host server. Ansible Role Action / Event dependencies Installs software dependencies & tools as described above users_groups Adds users, groups and updates permissions as described above docker Installs Docker docker_compose Installs Docker Compose git_clone Clones the current ISLE git repository to /opt/ISLE docker_images Pulls down the latest ISLE Docker Images from Dockerhub.com","title":"Ansible Deploy Script Explanation"},{"location":"05_developer_docs/dev_ansible_guide/#installs-software-dependencies-tools-including","text":"The Ansible script will deploy the following to the ISLE Host server: Ubuntu / Debian CentOS software-properties-common libselinux-python python-software-properties libsemanage-python -- yum-utils ntp ntp openssh-client openssh-clients rsync rsync curl curl wget wget git git zip zip unzip unzip vim vim nano nano emacs24-nox emacs htop htop apt-transport-https -- ca-certificates --","title":"Installs software dependencies &amp; tools including:"},{"location":"05_developer_docs/dev_ansible_guide/#makes-isle-host-service-changes","text":"Please Note: Any of these services can be re-enabled post installation see appropriate documentation for opening ports on firewalls etc. Ubuntu / Debian CentOS enables ntp service enables ntp service disables ufw disables iptables -- sets selinux to permissive","title":"Makes ISLE Host service changes"},{"location":"05_developer_docs/dev_ansible_guide/#adds-users-groups-and-updates-permissions","text":"Creates the islandora user Along with an appropriate password generates a ssh key bestows sudo password-less access Gives the islandora user the ability to run Docker & Docker Compose by adding the account to the Docker group. Disables root user access via ssh Disables use of passwords with ssh. key based access only to the ISLE Host server","title":"Adds users, groups and updates permissions"},{"location":"05_developer_docs/dev_ansible_guide/#installs-additional-software","text":"Docker Docker Compose Git clones the ISLE repo to /opt/ISLE Pulls down the most recent ISLE images","title":"Installs additional software"},{"location":"05_developer_docs/dev_ansible_guide/#ansible-script-directory-structure","text":"ansible \u251c\u2500\u2500 docker_install.yml \u251c\u2500\u2500 host_vars \u2502 \u251c\u2500\u2500 host_local_macos_isle_localdomain.yml \u2502 \u2514\u2500\u2500 isle-prod-project.institution.yml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles \u251c\u2500\u2500 dependencies \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 ubuntu.yml \u2502 \u251c\u2500\u2500 main.yml \u2502 \u2514\u2500\u2500 centos.yml \u251c\u2500\u2500 docker \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 install.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 docker_compose \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 install.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 docker_images \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 images_pull.yml \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 git_clone \u2502 \u2514\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 git_clone.yml \u2502 \u2514\u2500\u2500 main.yml \u2514\u2500\u2500 users_groups \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 islandora \u2514\u2500\u2500 tasks \u251c\u2500\u2500 groups.yml \u251c\u2500\u2500 main.yml \u251c\u2500\u2500 secure.yml \u251c\u2500\u2500 ssh.yml \u2514\u2500\u2500 users.yml","title":"Ansible script directory structure"},{"location":"05_developer_docs/dev_ansible_guide/#configure-ansible-script-to-deploy-to-isle-host","text":"To configure the Ansible script to deploy to one's institutional ISLE Host Server, please review and edit the following files within the ansible directory. ansible/docker_install.yml ansible/inventory ansible/host_vars/isle-prod-project.institution.yml Basically wherever isle-prod-project.institution appears as a value in these three files, please replace with the appropriate ISLE Host server fully qualified domain name ( fqdn ) e.g. yourislesite.institution.com One can open up and edit all files in a text editor e.g. Atom, Textedit, Textwrangler etc.","title":"Configure Ansible Script to deploy to ISLE Host"},{"location":"05_developer_docs/dev_ansible_guide/#ansibledocker_installyml","text":"This is the Ansible playbook necessary to deploy software to the ISLE host server. At the top of the file remove isle-prod-project.institution and replace with the appropriate fqdn .","title":"ansible/docker_install.yml"},{"location":"05_developer_docs/dev_ansible_guide/#ansibleinventoryyml","text":"This is the possible list of server(s) to deploy to using Ansible and its associated playbook(s). Please Note: These instructions below are repeated within the file itself. Line 7: remove isle-prod-project.institution from in between the brackets and replace with the appropriate fqdn Line 8: Add the appropriate ISLE Host server user account that has sudo passwordless permissions to the end of ansible_ssh_user= Example : ansible_ssh_user=janesmith Line 8: Add the appropriate path to this ISLE Host Server user accounts public ssh key to the end of ansible_ssh_private_key_file= Example of inventory using settings for local Ansible deploy laptop: ansible_ssh_private_key_file=/home/janesmith/.ssh/id_rsa.pub Please Note: This key is typically found on the local control (Ansible deploy laptop / workstation) system and should have been previously copied to the appropriate ISLE Host server user account's /home/islehostserver_user/.ssh/authorized_keys file. Final Example end result for inventory file with all settings above [yourislesite.institution.com] yourislesite.institution.com ansible_connection=ssh ansible_ssh_user=janesmith ansible_ssh_private_key_file=/home/janesmith/.ssh/id_rsa.pub","title":"ansible/inventory.yml"},{"location":"05_developer_docs/dev_ansible_guide/#ansibleisle-prod-projectinstitutionyml","text":"Copy this file and rename the copy to with the appropriate fqdn Example of how host_vars directory should now contain two files: ansible \u251c\u2500\u2500 docker_install.yml \u251c\u2500\u2500 host_vars \u2502 \u251c\u2500\u2500 isle-prod-project.institution.yml \u2502 \u2514\u2500\u2500 yourislesite.institution.com.yml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles Edit the following lines within the newly created file i.e. yourislesite.institution.com.yml and remove the comments (#) as asked Please Note: The fqdn in the inventory file should match this filename as well. Examples ONLY ( Do not enter these literal values ) Line 9: ansible_ssh_host: 192.168.1.16 This is the IP address of the ISLE Host server Line 10: ansible_ssh_user: janesmith This is the appropriate ISLE Host server user account that has sudo passwordless permissions. Line 15: pub_locale: /home/janesmith/.ssh/id_rsa.pub This is the key found on the local control (Ansible deploy laptop / workstation) system which has been previously copied to the appropriate ISLE Host server user account's /home/islehostserver_user/.ssh/authorized_keys file.","title":"ansible/isle-prod-project.institution.yml"},{"location":"05_developer_docs/dev_ansible_guide/#ansible-commands-to-test-connection","text":"Test if the Ansible control laptop / workstation can connect to the ISLE Host server by running these commands. On the local Ansible control laptop / workstation, open a terminal window and enter the following: cd /path/to/ISLE/repo/ansible ansible -i inventory isle-host-server -m ping Example output of above command ( IGNORE THE WARNING ) [WARNING]: Found both group and host with same name: isle-host-server isle-host-server | SUCCESS => { \"changed\": false, \"ping\": \"pong\" } Please Note: If SUCCESS doesn't appear as a value or if the wording of the prompt is in RED with \"host doesn't exist ...\", review all steps above and check the settings. Do not advance until the Example output above matches.","title":"Ansible commands to test connection"},{"location":"05_developer_docs/dev_ansible_guide/#ansible-commands-for-deploy","text":"To deploy to the ISLE Host Server, run this command. ansible-playbook -i inventory docker_install.yml Ansible will start displaying output within the terminal. If any turn red and the script terminates, please review the above settings and connectivity to the server. Attempt to rerun the script.","title":"Ansible commands for deploy"},{"location":"05_developer_docs/dev_ansible_guide/#qc-review-checklist","text":"To ensure a successful deploy to the ISLE Server, please review the following to ensure that the deploy to the Islandora Host server was successful. Open a terminal window on the Ansible control laptop /workstation and ssh into the Islandora Host server using the appropriate enduser account setup prior to the deploy. Example : ssh enduser@isle-prod-project.institution","title":"QC Review checklist"},{"location":"05_developer_docs/dev_ansible_guide/#docker","text":"To check where Docker has been installed to, enter: which docker Example output: /usr/bin/docker To check which version of Docker has been installed, enter: docker --version Example output: Docker version 17.12.0-ce, build c97c6d6 To check if Docker is running, enter: service docker status Example output: Redirecting to /bin/systemctl status docker.service \u25cf docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: active (running) since Thu 2018-03-18 14:36:55 EST; 1 weeks 4 days ago Docs: https://docs.docker.com Main PID: 23066 (dockerd) Memory: 55.3M .... To check if the ISLE images have been downloaded on the ISLE Host server, enter: docker image ls Example output: REPOSITORY TAG IMAGE ID CREATED SIZE islandoracollabgroup/isle-fedora latest 6e2749ca2c2f 2 weeks ago 2.43GB islandoracollabgroup/isle-apache latest 82fe4ae16932 2 weeks ago 2.18GB islandoracollabgroup/isle-solr latest 7fba26c10433 2 weeks ago 784MB islandoracollabgroup/isle-mysql latest f34162f1e0f8 2 weeks ago 299MB islandoracollabgroup/isle-proxy latest 5gdc45f1a074 2 weeks ago 199MB","title":"Docker"},{"location":"05_developer_docs/dev_ansible_guide/#docker-compose","text":"To check where Docker-compose has been installed to, enter: which docker-compose Example output: /usr/local/bin/docker-compose To check which version of Docker-compose has been installed, enter: docker-compose -version Example output: docker-compose version 1.20.1, build 1719ceb","title":"Docker Compose"},{"location":"05_developer_docs/dev_ansible_guide/#islandora-user","text":"To check if the islandora user has been created, enter: cat /etc/passwd Example output: islandora:x:1002:1002::/home/islandora:/bin/bash","title":"Islandora user"},{"location":"05_developer_docs/dev_ansible_guide/#isle-project-directory","text":"To check if the ISLE project git repo has been cloned to /opt/ISLE , enter: ls -lh /opt/ISLE Example output: total 24K drwxr-xr-x. 3 islandora islandora 110 Jan 17 09:17 apache drwxr-xr-x. 5 islandora islandora 84 Jan 23 13:44 config -rwxr-xr-x. 1 islandora islandora 2.0K Jan 18 16:58 docker-compose.yml drwxr-xr-x. 7 islandora islandora 143 Jan 17 09:17 docs drwxr-xr-x. 7 islandora islandora 102 Jan 17 09:17 fedora -rwxr-xr-x. 1 islandora islandora 12K Jan 17 09:17 mkdocs.yml drwxr-xr-x. 3 islandora islandora 54 Jan 17 09:17 mysql drwxr-xr-x. 3 islandora islandora 54 Jan 17 09:17 proxy -rwxr-xr-x. 1 islandora islandora 4.1K Jan 17 09:17 README.md drwxr-xr-x. 4 islandora islandora 50 Jan 17 09:17 solr Once this script has finished one can: Add any appropriate public ssh keys to /home/islandora/.ssh/authorized_keys prior to attempting to ssh to the Islandora Host server as the islandora user. Add the /home/islandora/.ssh/id_rsa.pub key to any git repository contained within the Migration Guide. (Additional instructions appear in that guide if this process is unfamiliar.) Proceed to bottom of this page for next steps.","title":"ISLE Project directory"},{"location":"05_developer_docs/dev_ansible_guide/#walkthrough-using-ansible-on-a-macos-control-machine","text":"To install Ansible on the enduser's MacOS laptop / workstation. Install Ansible via Python pip Follow here http://docs.ansible.com/ansible/latest/intro_installation.html#latest-releases-via-pip Or install Ansible via Homebrew (better) /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" brew install ansible There is a ready made Ansible script for the MacOS hosted isle.localdomain called ansible/host_vars/host_local_macos_isle_localdomain.yml Use vagrant for the ansible_ssh_user= value in the ansible/inventory file Use ~/Users/enduser/.vagrant.d/insecure_private_key for the ansible_ssh_private_key_file value in the ansible/inventory file Example [host_local_macos_isle_localdomain] host_local_macos_isle_localdomain ansible_connection=ssh ansible_ssh_user=vagrant ansible_ssh_private_key_file=/Users/enduser/.vagrant.d/insecure_private_key Line 13 in the ansible/host_vars/host_local_macos_isle_localdomain.yml file will need to be edited with the correct path to the enduser's id_rsa.pub file. Change the enduser value to the real username. ( assumes the id_rsa.pub file exists! ) Line 3 in the ansible/docker_install.yml file will need to be edited, change the value of isle-prod-project.institution to host_local_macos_isle_localdomain Once these files have been edited, open a terminal and enter: cd path_to/ISLE/ansible/ Test the connection to the ISLE Host Vagrant Ubuntu VM ansible -i inventory host_local_macos_isle_localdomain -m ping Example output of above command ( IGNORE THE WARNING ) [WARNING]: Found both group and host with same name: host_local_macos_isle_localdomain host_local_macos_isle_localdomain | SUCCESS => { \"changed\": false, \"ping\": \"pong\" } Please Note: If SUCCESS doesn't appear as a value or if the wording of the prompt is in RED with \"host doesn't exist ...\", review all steps above and check the settings. Do not advance until the Example output above matches. To deploy to the ISLE Host Server, run this command. ansible-playbook -i inventory docker_install.yml Ansible will start displaying output within the terminal. If any turn red and the script terminates, please review the above settings and connectivity to the server. Attempt to rerun the script.","title":"Walkthrough: Using Ansible on a MacOS control machine"},{"location":"05_developer_docs/dev_build_guide/","text":"Caution : This guide is recommended for ISLE maintainers or Developers only and not for end-users. ISLE maintainers are to follow this guide to build the five Docker ISLE images using the docker-compose-build.yml file. Developers can follow this guide if they have edited their Dockerfiles with custom software and they then can push to their own Docker image repository. These images will contain the necessary base code, scripts and files to run the default sample isle.localdomain . This test ISLE / Islandora environment ( isle.localdomain ) includes an un-themed Drupal website and empty Fedora repository for endusers to develop code, test ingests, test metadata, update fields in SOLR indexing and otherwise \"kick the tires\" on ISLE prior for further usages e.g. creating a new ISLE production site or migrating a current Islandora production site to ISLE. While this checklist will attempt to point out most of the usage challenges or pitfalls, ISLE assumes no responsibility or liability in this matter should an enduser have customizations beyond what this guide outlines. Please note: There is a Glossary with relevant terms to help guide installation. Assumptions / Prerequisites Laptop / workstation that conforms to the specifications outlined in the Host Server Specifications This image build site guide is designed for a local laptop / workstation that has already followed the appropriate setup and configuration instructions in the Test ISLE section of the Install Start Here guide. Instructions below assume a MacOS or Linux laptop or workstation. Windows users may have to adjust / swap out various tools as needed. The ISLE project has been cloned from the ISLE project repository using the master branch. Do not build ISLE images with untested and developmental code. Only stable releases please. Having a cleaned up system prior to any build is key. Ensure that all local development containers, volumes and images associated with the build are deleted. Otherwise previously unaltered data or configurations could break or alter negatively the new images. ISLE maintainers, Developers have pre-existing knowledge or familiarity with Dockerfiles , the Docker Build process and pushing Docker images to repositories. Dockerfiles , their editing process and compositions are familiar or known concepts. ISLE maintainers should already have access to the ISLE Dockerhub image repository. Developers should have already setup their own separate Docker image repository. e.g. Dockerhub following that site's instructions. Developers are free to mix official ISLE images with your own custom image build. Best practice would be to create new Dockerfiles that use the official ISLE images as the base image to build from. Step 1: Ensure there are no local ISLE Docker images present If performing a brand new image build, the ISLE maintainer will need to ensure there are no previous image builds or cached build data. docker image ls Remove any ISLE images by selecting their IMAGE ID Example: docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE islandoracollabgroup/isle-proxy 1.13 7cbd80c8b043 13 days ago 109MB islandoracollabgroup/isle-proxy latest 7cbd80c8b043 13 days ago 109MB islandoracollabgroup/isle-apache 2.4 ba6505e7a428 13 days ago 2.25GB islandoracollabgroup/isle-apache latest ba6505e7a428 13 days ago 2.25GB islandoracollabgroup/isle-apache <none> 9bc727f301b8 2 weeks ago 2.25GB islandoracollabgroup/isle-proxy <none> 23cb1c73c232 2 weeks ago 109MB docker image rm -f 7cbd80c8b043 docker image rm -f ba6505e7a428 docker image rm -f 7cbd80c8b043 docker image rm -f 9bc727f301b8 docker image rm -f 23cb1c73c232 Step 2: Rename the docker-compose.yml file Rename the docker-compose.yml file to docker-compose.bak Step 3: Rename the docker-compose-build.yml file Rename the docker-compose-build.yml file to docker-compose.yml Step 3a: Alternative for non-ISLE maintainers only e.g. Developers For non-ISLE maintainers only e.g. Developers (only) you'll need to change the following lines in the newly renamed docker-compose.yml file. image: islandoracollabgroup/isle-mysql:latest image: islandoracollabgroup/isle-fedora:latest image: islandoracollabgroup/isle-apache:latest image: islandoracollabgroup/isle-solr:latest image: islandoracollabgroup/isle-proxy:latest to image: yourdockerimagerepo_orgname/isle-mysql:latest image: yourdockerimagerepo_orgname/isle-fedora:latest image: yourdockerimagerepo_orgname/isle-apache:latest image: yourdockerimagerepo_orgname/isle-solr:latest image: yourdockerimagerepo_orgname/isle-proxy:latest Change only the images you need to rebuild or customize. Step 4: Build the images in this suggested order Please perform these steps one at time. If any errors occur during the build process, troubleshoot and edit the associated Dockerfile. docker-compose build mysql docker-compose build fedora docker-compose build apache docker-compose build proxy docker-compose build solr Step 5: Tag the resulting images This renamed docker-compose-build.yml file will tag all builds by default with the latest tag. Review the current tags found on the Docker Containers & Images Specifications Page. Should the software version change, update this document with the new tags. You will need to tag each image further as needed. There are always two tags for every image, e.g. latest and the specific version of the primary software package used on the image or container. It is possible there will be more tags for different image versions in the future. For example if the installed proxy nginx software changes from 1.13 to 1.14 , change or add the new tag of 1.14 To learn more about tagging, read the official Docker tag documentation. To tag images: docker image ls ( to see the new IMAGE IDs ) docker tag IMAGE ID image/TAG IMAGE ID is the 12-character identification string for the image (listed from the Docker images command), and TAG is our newly created versioning tag. So our command to tag a new proxy image would be: docker tag 7cbd80c8b043 islandoracollabgroup/isle-proxy:1.13 Please note: your IMAGE ID will be different than the examples above. Developers, please note you are welcome to use tags that are useful for your institution e.g. docker tag 7cbd80c8b043 yourdockerimagerepo_orgname/isle-proxy:1.13 Step 6: Push the images to the image repository Please note: These steps assume use of Dockerhub. If you use a different Docker image repository, you'll need to change the following steps per their specific instructions. docker login Example output: Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one. Username (username_here): Enter your Dockerhub username Enter your Dockerhub user password. Push the images one at a time. Please note: Depending on your Internet connection's upload speed this process may take several hours. docker push islandoracollabgroup/isle-apache:latest docker push islandoracollabgroup/isle-fedora:latest docker push islandoracollabgroup/isle-mysql:latest docker push islandoracollabgroup/isle-proxy:latest docker push islandoracollabgroup/isle-solr:latest Repeat the process with any additional tags. Please note: Depending on your Internet connection's upload speed this process may take several minutes. docker push islandoracollabgroup/isle-apache:2.4 docker push islandoracollabgroup/isle-fedora:3.8.1 docker push islandoracollabgroup/isle-mysql:5.6 docker push islandoracollabgroup/isle-proxy:1.13 docker push islandoracollabgroup/isle-solr:4.10.4 Step 7: Rename the docker-compose-build.yml file Rename the docker-compose.yml file to docker-compose-build.yml Step 8: Rename the docker-compose.yml file Rename the docker-compose.bak file to docker-compose.yml Steps below are mandatory for any ISLE maintainer but optional (though recommended) for any Developer. Step 9: Delete all recently built and pushed ISLE images on local laptop docker image ls Example commands to repeat for each type of image. docker rm -f IMAGE ID islandoracollabgroup/TAG docker rm -f 7cbd80c8b043 islandoracollabgroup/isle-proxy:1.13 Step 10: Test the images pushed. Pull down the newly pushed images. docker pull islandoracollabgroup/isle-apache:latest docker pull islandoracollabgroup/isle-fedora:latest docker pull islandoracollabgroup/isle-mysql:latest docker pull islandoracollabgroup/isle-proxy:latest docker pull islandoracollabgroup/isle-solr:latest Follow the instructions within the docker-compose.yml file or within the Test Site Installation Guide to start up containers and install the ISLE Test Site ( isle.localdomain ). Ensure that all components, connections etc are working, otherwise troubleshoot as required, making the appropriate fixes to the associated Dockerfiles, pushing changes to the ISLE project git repository and then REPEATING this entire build and push process. Always test prior and post to ensure there are no issues pushed to endusers.","title":"Build Guide"},{"location":"05_developer_docs/dev_build_guide/#assumptions-prerequisites","text":"Laptop / workstation that conforms to the specifications outlined in the Host Server Specifications This image build site guide is designed for a local laptop / workstation that has already followed the appropriate setup and configuration instructions in the Test ISLE section of the Install Start Here guide. Instructions below assume a MacOS or Linux laptop or workstation. Windows users may have to adjust / swap out various tools as needed. The ISLE project has been cloned from the ISLE project repository using the master branch. Do not build ISLE images with untested and developmental code. Only stable releases please. Having a cleaned up system prior to any build is key. Ensure that all local development containers, volumes and images associated with the build are deleted. Otherwise previously unaltered data or configurations could break or alter negatively the new images. ISLE maintainers, Developers have pre-existing knowledge or familiarity with Dockerfiles , the Docker Build process and pushing Docker images to repositories. Dockerfiles , their editing process and compositions are familiar or known concepts. ISLE maintainers should already have access to the ISLE Dockerhub image repository. Developers should have already setup their own separate Docker image repository. e.g. Dockerhub following that site's instructions. Developers are free to mix official ISLE images with your own custom image build. Best practice would be to create new Dockerfiles that use the official ISLE images as the base image to build from.","title":"Assumptions / Prerequisites"},{"location":"05_developer_docs/dev_build_guide/#step-1-ensure-there-are-no-local-isle-docker-images-present","text":"If performing a brand new image build, the ISLE maintainer will need to ensure there are no previous image builds or cached build data. docker image ls Remove any ISLE images by selecting their IMAGE ID Example: docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE islandoracollabgroup/isle-proxy 1.13 7cbd80c8b043 13 days ago 109MB islandoracollabgroup/isle-proxy latest 7cbd80c8b043 13 days ago 109MB islandoracollabgroup/isle-apache 2.4 ba6505e7a428 13 days ago 2.25GB islandoracollabgroup/isle-apache latest ba6505e7a428 13 days ago 2.25GB islandoracollabgroup/isle-apache <none> 9bc727f301b8 2 weeks ago 2.25GB islandoracollabgroup/isle-proxy <none> 23cb1c73c232 2 weeks ago 109MB docker image rm -f 7cbd80c8b043 docker image rm -f ba6505e7a428 docker image rm -f 7cbd80c8b043 docker image rm -f 9bc727f301b8 docker image rm -f 23cb1c73c232","title":"Step 1: Ensure there are no local ISLE Docker images present"},{"location":"05_developer_docs/dev_build_guide/#step-2-rename-the-docker-composeyml-file","text":"Rename the docker-compose.yml file to docker-compose.bak","title":"Step 2: Rename the docker-compose.yml file"},{"location":"05_developer_docs/dev_build_guide/#step-3-rename-the-docker-compose-buildyml-file","text":"Rename the docker-compose-build.yml file to docker-compose.yml","title":"Step 3: Rename the docker-compose-build.yml file"},{"location":"05_developer_docs/dev_build_guide/#step-3a-alternative-for-non-isle-maintainers-only-eg-developers","text":"For non-ISLE maintainers only e.g. Developers (only) you'll need to change the following lines in the newly renamed docker-compose.yml file. image: islandoracollabgroup/isle-mysql:latest image: islandoracollabgroup/isle-fedora:latest image: islandoracollabgroup/isle-apache:latest image: islandoracollabgroup/isle-solr:latest image: islandoracollabgroup/isle-proxy:latest to image: yourdockerimagerepo_orgname/isle-mysql:latest image: yourdockerimagerepo_orgname/isle-fedora:latest image: yourdockerimagerepo_orgname/isle-apache:latest image: yourdockerimagerepo_orgname/isle-solr:latest image: yourdockerimagerepo_orgname/isle-proxy:latest Change only the images you need to rebuild or customize.","title":"Step 3a: Alternative for non-ISLE maintainers only e.g. Developers"},{"location":"05_developer_docs/dev_build_guide/#step-4-build-the-images-in-this-suggested-order","text":"Please perform these steps one at time. If any errors occur during the build process, troubleshoot and edit the associated Dockerfile. docker-compose build mysql docker-compose build fedora docker-compose build apache docker-compose build proxy docker-compose build solr","title":"Step 4: Build the images in this suggested order"},{"location":"05_developer_docs/dev_build_guide/#step-5-tag-the-resulting-images","text":"This renamed docker-compose-build.yml file will tag all builds by default with the latest tag. Review the current tags found on the Docker Containers & Images Specifications Page. Should the software version change, update this document with the new tags. You will need to tag each image further as needed. There are always two tags for every image, e.g. latest and the specific version of the primary software package used on the image or container. It is possible there will be more tags for different image versions in the future. For example if the installed proxy nginx software changes from 1.13 to 1.14 , change or add the new tag of 1.14 To learn more about tagging, read the official Docker tag documentation. To tag images: docker image ls ( to see the new IMAGE IDs ) docker tag IMAGE ID image/TAG IMAGE ID is the 12-character identification string for the image (listed from the Docker images command), and TAG is our newly created versioning tag. So our command to tag a new proxy image would be: docker tag 7cbd80c8b043 islandoracollabgroup/isle-proxy:1.13 Please note: your IMAGE ID will be different than the examples above. Developers, please note you are welcome to use tags that are useful for your institution e.g. docker tag 7cbd80c8b043 yourdockerimagerepo_orgname/isle-proxy:1.13","title":"Step 5: Tag the resulting images"},{"location":"05_developer_docs/dev_build_guide/#step-6-push-the-images-to-the-image-repository","text":"Please note: These steps assume use of Dockerhub. If you use a different Docker image repository, you'll need to change the following steps per their specific instructions. docker login Example output: Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one. Username (username_here): Enter your Dockerhub username Enter your Dockerhub user password. Push the images one at a time. Please note: Depending on your Internet connection's upload speed this process may take several hours. docker push islandoracollabgroup/isle-apache:latest docker push islandoracollabgroup/isle-fedora:latest docker push islandoracollabgroup/isle-mysql:latest docker push islandoracollabgroup/isle-proxy:latest docker push islandoracollabgroup/isle-solr:latest Repeat the process with any additional tags. Please note: Depending on your Internet connection's upload speed this process may take several minutes. docker push islandoracollabgroup/isle-apache:2.4 docker push islandoracollabgroup/isle-fedora:3.8.1 docker push islandoracollabgroup/isle-mysql:5.6 docker push islandoracollabgroup/isle-proxy:1.13 docker push islandoracollabgroup/isle-solr:4.10.4","title":"Step 6: Push the images to the image repository"},{"location":"05_developer_docs/dev_build_guide/#step-7-rename-the-docker-compose-buildyml-file","text":"Rename the docker-compose.yml file to docker-compose-build.yml","title":"Step 7: Rename the docker-compose-build.yml file"},{"location":"05_developer_docs/dev_build_guide/#step-8-rename-the-docker-composeyml-file","text":"Rename the docker-compose.bak file to docker-compose.yml Steps below are mandatory for any ISLE maintainer but optional (though recommended) for any Developer.","title":"Step 8: Rename the docker-compose.yml file"},{"location":"05_developer_docs/dev_build_guide/#step-9-delete-all-recently-built-and-pushed-isle-images-on-local-laptop","text":"docker image ls Example commands to repeat for each type of image. docker rm -f IMAGE ID islandoracollabgroup/TAG docker rm -f 7cbd80c8b043 islandoracollabgroup/isle-proxy:1.13","title":"Step 9: Delete all recently built and pushed ISLE images on local laptop"},{"location":"05_developer_docs/dev_build_guide/#step-10-test-the-images-pushed","text":"Pull down the newly pushed images. docker pull islandoracollabgroup/isle-apache:latest docker pull islandoracollabgroup/isle-fedora:latest docker pull islandoracollabgroup/isle-mysql:latest docker pull islandoracollabgroup/isle-proxy:latest docker pull islandoracollabgroup/isle-solr:latest Follow the instructions within the docker-compose.yml file or within the Test Site Installation Guide to start up containers and install the ISLE Test Site ( isle.localdomain ). Ensure that all components, connections etc are working, otherwise troubleshoot as required, making the appropriate fixes to the associated Dockerfiles, pushing changes to the ISLE project git repository and then REPEATING this entire build and push process. Always test prior and post to ensure there are no issues pushed to endusers.","title":"Step 10: Test the images pushed."},{"location":"05_developer_docs/dev_documentation_editing_local/","text":"Overview Run the mkdocs software Edit documentation files locally Commit changes to git Push committed changes to the online ISLE Github.com git repository Create pull request for review on ISLE Github.com Assumptions / Prerequisites mkdocs and mkdocs-material theme are installed following the Installing Mkdocs documentation. The ISLE Documentation project directory has been cloned to the enduser's laptop / workstation in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE-Documentation.git Familiarity or comfortability with git and cli commands. Enduser has a web browser opened to this URL: http://127.0.0.1:8000/ Enduser has a terminal open with mkdocs serve running. Create a new git branch As there is a review process of any new changes to the ISLE code or documentation projects by the Maintainers, using git pull requests are ideal to avoid issues of missing materials, inappropriately edited files or incorrect overwrites of critical data. While mkdocs serve is running in the terminal, open up a new terminal or terminal tab and cd to pathto/ISLE-Documentation project directory You will now create a new git branch which will allow you to make changes without fear of losing the original code / file versions kept in master . The new branch name can be anything you like but we suggest that you use a convention that identifies you clearly e.g. githubusername-docs-fix2 or janedoe-doc-fixes1 git checkout -b githubusername-docs-fix2 Proceed to edit or create new files as necessary using a text editor of your choice. Adding new pages If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Create a new empty file in the docs/05_developer_docs directory e.g. dev_building_giant_robots.md Open up the mkdocs.yml file in a text editor of your choice. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Developer Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': '05_developer_docs/dev_building_giant_robots.md' - 'Developer Docs': - 'Building Giant ISLE Robots': '05_developer_docs/dev_building_giant_robots.md' - 'Contributing to Project': '05_developer_docs/dev_contributing_to_project.md' - 'Documentation Overview': '05_developer_docs/dev_documentation_overview.md' The enduser can now review the contents of this new page at http://127.0.0.1:8000/05_developer_docs/dev_building_giant_robots/ Edit the contents of dev_building_giant_robots.md and save the file each time. The associated webpage will refresh with the new changes. Commit changes to git Once finished with adding all new pages and editing files, it is time to add everything to git and then push to the remote ISLE githbu.com repo for review by ISLE Maintainers. Git status Within the open terminal, enter git status The example git status output below displays that several files have been modified (edited or changed) and that there is a new file called dev_building_giant_robots.md has been created. git status On branch githubusername-docs-fix2 Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: docs/06_specifications/specs_diagram_network.md modified: docs/Glossary.md modified: mkdocs.yml Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/05_developer_docs/dev_building_giant_robots.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Git add files You now need to add these changed / new files to git. git add docs/06_specifications/specs_diagram_network.md git add docs/Glossary.md git add mkdocs.yml git add docs/05_developer_docs/dev_building_giant_robots.md Git commit with message Now it is time to package up all these additions with a git commit command. Please ensure that you commit with a descriptive message of changes etc. git commit -m \"Tweaked some specs in specs_diagram_network.md. Updated the Glossary with more terms. Made new Building Giant Robots page. I love big robots. Added new files and titles to mkdocs.yml \" Git push to ISLE Github repository git push origin githubusername-docs-fix2 Create a pull request on ISLE Github.com repo In order for the ISLE Maintainers to review suggested changes a \"pull request\" will need to be created. This process is a way for Maintainers to see a summary of the suggested changes to be made with any helpful comments and a catalog of potential differences between the original files and the new ones. If you run into trouble, this Github.com support page may be of use: https://help.github.com/articles/creating-a-pull-request/ On GitHub, navigate to the main page of the ISLE-Documentation repository. In the \"Branch\" menu, choose the branch that contains your commits e.g. githubusername-docs-fix2 To the right of the Branch menu, click New pull request . Use the base branch dropdown menu to select the branch you'd like to merge your changes into ( master ), then use the compare branch drop-down menu to choose the topic branch you made your changes in.( githubusername-docs-fix2 ) base:master <--- compare:githubusername-docs-fix2 Type a title and description for your pull request. Click the green Create pull request button at the bottom. This pull request should now appear in the Pull Requests section of the ISLE Repo, ready for review, commentary or inclusion by the ISLE Maintainers.","title":"Documentation Editing - Local"},{"location":"05_developer_docs/dev_documentation_editing_local/#overview","text":"Run the mkdocs software Edit documentation files locally Commit changes to git Push committed changes to the online ISLE Github.com git repository Create pull request for review on ISLE Github.com","title":"Overview"},{"location":"05_developer_docs/dev_documentation_editing_local/#assumptions-prerequisites","text":"mkdocs and mkdocs-material theme are installed following the Installing Mkdocs documentation. The ISLE Documentation project directory has been cloned to the enduser's laptop / workstation in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE-Documentation.git Familiarity or comfortability with git and cli commands. Enduser has a web browser opened to this URL: http://127.0.0.1:8000/ Enduser has a terminal open with mkdocs serve running.","title":"Assumptions / Prerequisites"},{"location":"05_developer_docs/dev_documentation_editing_local/#create-a-new-git-branch","text":"As there is a review process of any new changes to the ISLE code or documentation projects by the Maintainers, using git pull requests are ideal to avoid issues of missing materials, inappropriately edited files or incorrect overwrites of critical data. While mkdocs serve is running in the terminal, open up a new terminal or terminal tab and cd to pathto/ISLE-Documentation project directory You will now create a new git branch which will allow you to make changes without fear of losing the original code / file versions kept in master . The new branch name can be anything you like but we suggest that you use a convention that identifies you clearly e.g. githubusername-docs-fix2 or janedoe-doc-fixes1 git checkout -b githubusername-docs-fix2 Proceed to edit or create new files as necessary using a text editor of your choice.","title":"Create a new git branch"},{"location":"05_developer_docs/dev_documentation_editing_local/#adding-new-pages","text":"If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Create a new empty file in the docs/05_developer_docs directory e.g. dev_building_giant_robots.md Open up the mkdocs.yml file in a text editor of your choice. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Developer Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': '05_developer_docs/dev_building_giant_robots.md' - 'Developer Docs': - 'Building Giant ISLE Robots': '05_developer_docs/dev_building_giant_robots.md' - 'Contributing to Project': '05_developer_docs/dev_contributing_to_project.md' - 'Documentation Overview': '05_developer_docs/dev_documentation_overview.md' The enduser can now review the contents of this new page at http://127.0.0.1:8000/05_developer_docs/dev_building_giant_robots/ Edit the contents of dev_building_giant_robots.md and save the file each time. The associated webpage will refresh with the new changes.","title":"Adding new pages"},{"location":"05_developer_docs/dev_documentation_editing_local/#commit-changes-to-git","text":"Once finished with adding all new pages and editing files, it is time to add everything to git and then push to the remote ISLE githbu.com repo for review by ISLE Maintainers.","title":"Commit changes to git"},{"location":"05_developer_docs/dev_documentation_editing_local/#git-status","text":"Within the open terminal, enter git status The example git status output below displays that several files have been modified (edited or changed) and that there is a new file called dev_building_giant_robots.md has been created. git status On branch githubusername-docs-fix2 Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: docs/06_specifications/specs_diagram_network.md modified: docs/Glossary.md modified: mkdocs.yml Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/05_developer_docs/dev_building_giant_robots.md no changes added to commit (use \"git add\" and/or \"git commit -a\")","title":"Git status"},{"location":"05_developer_docs/dev_documentation_editing_local/#git-add-files","text":"You now need to add these changed / new files to git. git add docs/06_specifications/specs_diagram_network.md git add docs/Glossary.md git add mkdocs.yml git add docs/05_developer_docs/dev_building_giant_robots.md","title":"Git add files"},{"location":"05_developer_docs/dev_documentation_editing_local/#git-commit-with-message","text":"Now it is time to package up all these additions with a git commit command. Please ensure that you commit with a descriptive message of changes etc. git commit -m \"Tweaked some specs in specs_diagram_network.md. Updated the Glossary with more terms. Made new Building Giant Robots page. I love big robots. Added new files and titles to mkdocs.yml \"","title":"Git commit with message"},{"location":"05_developer_docs/dev_documentation_editing_local/#git-push-to-isle-github-repository","text":"git push origin githubusername-docs-fix2","title":"Git push to ISLE Github repository"},{"location":"05_developer_docs/dev_documentation_editing_local/#create-a-pull-request-on-isle-githubcom-repo","text":"In order for the ISLE Maintainers to review suggested changes a \"pull request\" will need to be created. This process is a way for Maintainers to see a summary of the suggested changes to be made with any helpful comments and a catalog of potential differences between the original files and the new ones. If you run into trouble, this Github.com support page may be of use: https://help.github.com/articles/creating-a-pull-request/ On GitHub, navigate to the main page of the ISLE-Documentation repository. In the \"Branch\" menu, choose the branch that contains your commits e.g. githubusername-docs-fix2 To the right of the Branch menu, click New pull request . Use the base branch dropdown menu to select the branch you'd like to merge your changes into ( master ), then use the compare branch drop-down menu to choose the topic branch you made your changes in.( githubusername-docs-fix2 ) base:master <--- compare:githubusername-docs-fix2 Type a title and description for your pull request. Click the green Create pull request button at the bottom. This pull request should now appear in the Pull Requests section of the ISLE Repo, ready for review, commentary or inclusion by the ISLE Maintainers.","title":"Create a pull request on ISLE Github.com repo"},{"location":"05_developer_docs/dev_documentation_editing_online/","text":"Overview Navigate to online ISLE-Documentation repo Edit existing pages Adding new pages Updating mkdocs.yml Commit changes using a new branch Create pull request for review Please note: You'll need to create separate pull requests for each type of change whether editing or adding new pages with a mkdocs.yml file update. Using the online editor means you can only do one thing at a time. If you need to edit more than one file or want to create more than one new page of content, it is recommended to instead follow the steps contained within the Documentation Editing - Local Guide. Navigate to online ISLE-Documentation repo In a web browser navigate to https://github.com/Islandora-Collaboration-Group/ISLE-Documentation Edit existing pages Click into the docs directory and navigate to the appropriate .md file you would like to edit. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Adding new pages Please note: If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation after adding the new page. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Click into the docs/05_developer_docs directory On the right hand side of the page, a navigation bar that will display Create new file | Upload files | Find File History , click the Create new file button. In the empty Name your file... field at the top of the page, enter dev_building_giant_robots.md Enter the appropriate content to the page. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Updating mkdocs If you have added a new page to the Documentation, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation. Click into the mkdocs.yml file. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Developer Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': '05_developer_docs/dev_building_giant_robots.md' - 'Developer Docs': - 'Building Giant ISLE Robots': '05_developer_docs/dev_building_giant_robots.md' - 'Contributing to Project': '05_developer_docs/dev_contributing_to_project.md' - 'Documentation Overview': '05_developer_docs/dev_documentation_overview.md' When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Commit changes When finished editing, adding or updating, scroll down to the Commit changes section. In the first empty field, enter a short description of the file edited e.g. Update Glossary.md In the second larger empty field, enter a larger description of the edits made to the file. Two to five sentences should suffice. Once finished, select the second radio button at the bottom Its label displays: Create a new branch for this commit and start a pull request Change the branch name as needed or leave as the default. Click the green Propose File Change DO NOT SELECT THE 1ST RADIO BUTTON - Commit directly to the master branch as this will cause issues though it is selected by default. Create pull request for review The \"Open a pull request\" page should now appear along with text like The change you just made was written to a new branch named githubusername-docs-fix2. Create a pull request below to propose these changes. The first and second text fields may contain part of the short description. Either keep the default text or change accordingly. Click the green Create pull request button. This pull request should now appear in the Pull Requests section of the ISLE Repo, ready for review, commentary or inclusion by the ISLE Maintainers.","title":"Documentation Editing - Online"},{"location":"05_developer_docs/dev_documentation_editing_online/#overview","text":"Navigate to online ISLE-Documentation repo Edit existing pages Adding new pages Updating mkdocs.yml Commit changes using a new branch Create pull request for review Please note: You'll need to create separate pull requests for each type of change whether editing or adding new pages with a mkdocs.yml file update. Using the online editor means you can only do one thing at a time. If you need to edit more than one file or want to create more than one new page of content, it is recommended to instead follow the steps contained within the Documentation Editing - Local Guide.","title":"Overview"},{"location":"05_developer_docs/dev_documentation_editing_online/#navigate-to-online-isle-documentation-repo","text":"In a web browser navigate to https://github.com/Islandora-Collaboration-Group/ISLE-Documentation","title":"Navigate to online ISLE-Documentation repo"},{"location":"05_developer_docs/dev_documentation_editing_online/#edit-existing-pages","text":"Click into the docs directory and navigate to the appropriate .md file you would like to edit. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Edit existing pages"},{"location":"05_developer_docs/dev_documentation_editing_online/#adding-new-pages","text":"Please note: If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation after adding the new page. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Click into the docs/05_developer_docs directory On the right hand side of the page, a navigation bar that will display Create new file | Upload files | Find File History , click the Create new file button. In the empty Name your file... field at the top of the page, enter dev_building_giant_robots.md Enter the appropriate content to the page. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Adding new pages"},{"location":"05_developer_docs/dev_documentation_editing_online/#updating-mkdocs","text":"If you have added a new page to the Documentation, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE-Documentation project directory in order for the page to show up in the documentation. Click into the mkdocs.yml file. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Developer Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': '05_developer_docs/dev_building_giant_robots.md' - 'Developer Docs': - 'Building Giant ISLE Robots': '05_developer_docs/dev_building_giant_robots.md' - 'Contributing to Project': '05_developer_docs/dev_contributing_to_project.md' - 'Documentation Overview': '05_developer_docs/dev_documentation_overview.md' When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Updating mkdocs"},{"location":"05_developer_docs/dev_documentation_editing_online/#commit-changes","text":"When finished editing, adding or updating, scroll down to the Commit changes section. In the first empty field, enter a short description of the file edited e.g. Update Glossary.md In the second larger empty field, enter a larger description of the edits made to the file. Two to five sentences should suffice. Once finished, select the second radio button at the bottom Its label displays: Create a new branch for this commit and start a pull request Change the branch name as needed or leave as the default. Click the green Propose File Change DO NOT SELECT THE 1ST RADIO BUTTON - Commit directly to the master branch as this will cause issues though it is selected by default.","title":"Commit changes"},{"location":"05_developer_docs/dev_documentation_editing_online/#create-pull-request-for-review","text":"The \"Open a pull request\" page should now appear along with text like The change you just made was written to a new branch named githubusername-docs-fix2. Create a pull request below to propose these changes. The first and second text fields may contain part of the short description. Either keep the default text or change accordingly. Click the green Create pull request button. This pull request should now appear in the Pull Requests section of the ISLE Repo, ready for review, commentary or inclusion by the ISLE Maintainers.","title":"Create pull request for review"},{"location":"05_developer_docs/dev_documentation_mkdocs/","text":"Assumptions / Prerequisites Python 2.7+ or higher is installed on the enduser's laptop / workstation The ISLE Documentation project directory has been cloned to the enduser's laptop / workstation in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE-Documentation.git Familiarity or comfortability with git and cli commands. Step 1. Install mkdocs Please follow the instructions found here: http://www.mkdocs.org/#installation Example: (All OS) sudo -H pip install mkdocs Step 2. Install the mkdocs-material theme The ISLE Documentation Theme can be found here: https://github.com/squidfunk/mkdocs-material Example: (All OS) sudo -H pip install mkdocs-material Step 3. Run the mkdocs software Open a terminal and cd to pathto/ISLE-Documentation project directory mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 180310 15:50:39 server:283] Serving on http://127.0.0.1:8000 [I 180310 15:50:39 handlers:60] Start watching changes [I 180310 15:50:39 handlers:62] Start detecting changes [I 180310 15:50:42 handlers:133] Browser Connected: http://127.0.0.1:8000/ Open up a browser and navigate to http://127.0.0.1:8000/ It is critical for this terminal to keep running as mkdocs will report file changes and any potential issues. To review changes in real time via the browser Use the terminal output for debugging issues or missing files, links etc. To stop mkdocs , click the Cntrl and c key at the same time. (Cntrl-C)","title":"Installing Mkdocs"},{"location":"05_developer_docs/dev_documentation_mkdocs/#assumptions-prerequisites","text":"Python 2.7+ or higher is installed on the enduser's laptop / workstation The ISLE Documentation project directory has been cloned to the enduser's laptop / workstation in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE-Documentation.git Familiarity or comfortability with git and cli commands.","title":"Assumptions / Prerequisites"},{"location":"05_developer_docs/dev_documentation_mkdocs/#step-1-install-mkdocs","text":"Please follow the instructions found here: http://www.mkdocs.org/#installation Example: (All OS) sudo -H pip install mkdocs","title":"Step 1. Install mkdocs"},{"location":"05_developer_docs/dev_documentation_mkdocs/#step-2-install-the-mkdocs-material-theme","text":"The ISLE Documentation Theme can be found here: https://github.com/squidfunk/mkdocs-material Example: (All OS) sudo -H pip install mkdocs-material","title":"Step 2. Install the mkdocs-material theme"},{"location":"05_developer_docs/dev_documentation_mkdocs/#step-3-run-the-mkdocs-software","text":"Open a terminal and cd to pathto/ISLE-Documentation project directory mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 180310 15:50:39 server:283] Serving on http://127.0.0.1:8000 [I 180310 15:50:39 handlers:60] Start watching changes [I 180310 15:50:39 handlers:62] Start detecting changes [I 180310 15:50:42 handlers:133] Browser Connected: http://127.0.0.1:8000/ Open up a browser and navigate to http://127.0.0.1:8000/ It is critical for this terminal to keep running as mkdocs will report file changes and any potential issues. To review changes in real time via the browser Use the terminal output for debugging issues or missing files, links etc. To stop mkdocs , click the Cntrl and c key at the same time. (Cntrl-C)","title":"Step 3. Run the mkdocs software"},{"location":"05_developer_docs/dev_documentation_overview/","text":"The ISLE project uses mkdocs a static site generator designed for building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file. The mkdocs software then creates static HTML pages for hosting on Github Pages. This software can also be used locally on an enduser's laptop or workstation for review and editing of materials. Please note there are two key elements to the ISLE Documentation. ISLE Documentation Github.com Pages (static HTML): Used by endusers for Documentation Clean, crisp nicely formatted hosted ISLE Documentation with navigation. https://islandora-collaboration-group.github.io/ISLE-Documentation/ ISLE Documentation Github.com Repository (Markdown files): Used by ISLE Maintainers to create and manage ISLE Documentation Markdown files ( .md ) stored in an online git repository that when rendered by the mkdocs software produce the above mentioned nicely formatted static HTML pages. https://github.com/Islandora-Collaboration-Group/ISLE-Documentation Please refer to the Documentation section of the Glossary if terms used are not clear. A very handy primer for writing documentation using MkDocs has been written here: http://www.mkdocs.org/user-guide/writing-your-docs/ Project Directory structure \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 01_installation_host_server \u2502 \u251c\u2500\u2500 02_installation_development \u2502 \u251c\u2500\u2500 03_installation_new_site \u2502 \u251c\u2500\u2500 04_installation_migration \u2502 \u251c\u2500\u2500 05_developer_docs \u2502 \u251c\u2500\u2500 06_specifications \u2502 \u251c\u2500\u2500 Previous_Structure_For_Merging \u2502 \u251c\u2500\u2500 about.md \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 glossary.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml Directory or file Description README.md Description of the documentation project contents and how to use them docs where all documentation sections and topical pages are kept about.md Description of the ISLE project, its maintainers and this documentation repository assets Image or logo files used in documentation glossary.md A list of terms used in documentation index.md The homepage (first page of the documentation mkdocs.yml YAML file that acts as the section and page directory Sections and Pages Within the docs directory, there are 6 major topical sections. All sections are have numbered prefixes e.g. 01_ , 02_ to indicate order of documentation progression or narrative. Sections contain relevant topics and pages. All pages have relevant prefixes to their sections. Page file names may differ from their Page titles in the mkdocs.yml file. All topic of the page short and concise to one or two keywords Please keep all filenames lowercase Please ensure that all files are Markdown ( .md ) files otherwise the documentation system will fail. Section Page Prefix All topics related to 01_installation_host_server host_server_ Host server installation 02_installation_development ild_ ISLE test site installation ( isle.localdomain ) 03_installation_new_site new_site_ New Islandora site installation in ISLE 04_installation_migration migration_ Migrating an existing production Islandora site to ISLE 05_developer_docs dev_ Documentation or development of ISLE 06_specifications specs_ Systems or software specifications of ISLE","title":"Documentation Overview"},{"location":"05_developer_docs/dev_documentation_overview/#project-directory-structure","text":"\u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 01_installation_host_server \u2502 \u251c\u2500\u2500 02_installation_development \u2502 \u251c\u2500\u2500 03_installation_new_site \u2502 \u251c\u2500\u2500 04_installation_migration \u2502 \u251c\u2500\u2500 05_developer_docs \u2502 \u251c\u2500\u2500 06_specifications \u2502 \u251c\u2500\u2500 Previous_Structure_For_Merging \u2502 \u251c\u2500\u2500 about.md \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 glossary.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml Directory or file Description README.md Description of the documentation project contents and how to use them docs where all documentation sections and topical pages are kept about.md Description of the ISLE project, its maintainers and this documentation repository assets Image or logo files used in documentation glossary.md A list of terms used in documentation index.md The homepage (first page of the documentation mkdocs.yml YAML file that acts as the section and page directory","title":"Project Directory structure"},{"location":"05_developer_docs/dev_documentation_overview/#sections-and-pages","text":"Within the docs directory, there are 6 major topical sections. All sections are have numbered prefixes e.g. 01_ , 02_ to indicate order of documentation progression or narrative. Sections contain relevant topics and pages. All pages have relevant prefixes to their sections. Page file names may differ from their Page titles in the mkdocs.yml file. All topic of the page short and concise to one or two keywords Please keep all filenames lowercase Please ensure that all files are Markdown ( .md ) files otherwise the documentation system will fail. Section Page Prefix All topics related to 01_installation_host_server host_server_ Host server installation 02_installation_development ild_ ISLE test site installation ( isle.localdomain ) 03_installation_new_site new_site_ New Islandora site installation in ISLE 04_installation_migration migration_ Migrating an existing production Islandora site to ISLE 05_developer_docs dev_ Documentation or development of ISLE 06_specifications specs_ Systems or software specifications of ISLE","title":"Sections and Pages"},{"location":"05_developer_docs/dev_example_user_story/","text":"This page left intentionally blank, pending full community documentation for this process.","title":"Example User Story"},{"location":"05_developer_docs/dev_policies/","text":"This page left intentionally blank, pending full community documentation for this process.","title":"Dev policies"},{"location":"05_developer_docs/dev_release_process/","text":"This page left intentionally blank, pending full community documentation for this process.","title":"Release process"},{"location":"05_developer_docs/dev_testing_guide/","text":"This page left intentionally blank, pending full community documentation for this process.","title":"Testing Guide"},{"location":"06_specifications/specs_diagram_network/","text":"","title":"Diagram of network and connections"},{"location":"06_specifications/specs_docker_containers_images/","text":"ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-apache isle-apache Docker Tag latest, 2.4 uses the official Docker base image Apache 2.4 /var/log/apache2/ ubuntu:14.04 Djatoka 1.1 Drupal 7.5x+ Islandora 7.x-1.1x OpenJDK JDK 8.x Oracle Java JDK 8.x PHP 5.6 ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-fedora isle-fedora Docker Tag latest, 3.8.1 uses the official Docker base image Djatoka 1.1 /usr/local/tomcat/logs/djatoka.log tomcat:8.0-jre8 Drupal filter 3.8.1 Fedora 3.8.1 /usr/local/fedora/server/logs/fedora.log Gsearch DG Patched (2.8.x) /usr/local/fedora/server/logs/fedoragsearch.daily.log GSearch Extensions 0.1.3 Islandora Transforms (XSLTs) latest XSLTs from DG repo MySQL (client) 5.6 OpenJDK JDK 8.x Oracle Java JDK 8.x Tomcat 8.x /usr/local/tomcat/logs/ ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-mysql isle-mysql Docker Tag latest, 5.6 uses the official Docker base image MySQL (server) 5.6 /var/log/mysql/ mysql:5.6 ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-solr isle-solr Docker Tag latest, 4.10.4 uses the official Docker base image OpenJDK JDK 8.x tomcat:8.0-jre8 Solr 4.10.4 /usr/local/tomcat/logs/solr.log Tomcat 8.x /usr/local/tomcat/logs/ ISLE Image Container Software / Service Version Logs Path on Container islandoracollabgroup/isle-proxy isle-proxy Docker Tag latest, 1.13 uses the official Docker base image Nginx 1.13 nginx:latest","title":"Docker Containers & Images"},{"location":"06_specifications/specs_dockerfiles/","text":"The ISLE Images are created by the use of Dockerfiles, text documents that contain all the commands an ISLE maintainer could call on the command line to assemble an image. Using docker build users e.g. ISLE maintainers or Developers can create an automated build that executes several command-line instructions in succession. Assumptions / Prerequisites ISLE maintainers, Developers have pre-existing knowledge or familiarity with Dockerfile Dockerfiles , their editing process and compositions are familiar or known concepts. Dockerfile locations These files can be found within the cloned ISLE project directory. Each subdirectory is grouped by the image / container software type and each contains a respective Dockerfile. apache fedora mysql proxy solr \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ansible \u251c\u2500\u2500 apache \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 isle-newsite-sample \u251c\u2500\u2500 docker-compose-build.yml \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 fedora \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 mysql \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 proxy \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 solr \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u2514\u2500\u2500 vagrant Dockerfile conventions Making changes within these files will alter the contents and functionality of the ISLE images. Ensure that each Dockerfile does not have a file suffix or extension. Each command needs to be terminated with a \\ unless it is the final command. Each new command or action added will increase the size of the image once built. Attempt to balance size with functionality. All ISLE images use official Docker build images. Review the Docker Containers & Images Specifications Page for a listing of those builds. Dockerfile composition Following standard Docker convention , all ISLE Dockerfiles have similar structures. Examples displayed are from the Apache Dockerfile FROM command indicating which official Docker image is used as the base build. The Apache image uses two base images to first compile ffmpeg and ghostscript and then copying the resulting binaries and libraries to a new clean base image so that the development tools are not installed on the final image. Reduces size. FROM ubuntu:14.04 AS ffmpeg_base is the first base image used. FROM ubuntu:14.04 is the second base image used. LABEL - For ISLE maintainers to version control image descriptions, functionality and additional meta-data. ( optional ) RUN - Execute commands e.g. RUN apt-get update etc. COPY - Within each ISLE image directory there are additional files or subdirectories are copied from the local laptop to the image itself. e.g. COPY envinit.sh /opt/adore-djatoka-1.1/bin/envinit.sh ENV - sets any environmental variables necessary for software to run or be configured properly. ENV JAVA_HOME=/usr/lib/jvm/java-8-oracle \\ JRE_HOME=/usr/lib/jvm/java-8-oracle/jre \\ PATH=$PATH:$HOME/.composer/vendor/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/jre/bin \\ KAKADU_LIBRARY_PATH=/opt/adore-djatoka-1.1/lib/Linux-x86-64 \\ KAKADU_HOME=/opt/adore-djatoka-1.1/lib/Linux-x86-64 VOLUME - Exposes a volume for data necessary for the build to continue. e.g. VOLUME /var/www/html EXPOSE - Opens up ports (80,443) on the temporary build containers created and to persist in further usage. Can be overridden by any docker-compose.yml file ENTRYPOINT - Allows you to configure a container that will run as an executable. Within the apache Dockerfile , the server is told to \"run\" using the apache2ctl utility by this last line: ENTRYPOINT [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"] Dockerfile commenting For ISLE Maintainers when possible it is highly recommended that all sections be commented appropriately to explain functionality or actions to all Developers looking to customize or curious endusers. Example: ### # Update apt RUN apt-get update ### # Add software to provide add-apt-repository RUN apt-get install -y software-properties-common \\ python-software-properties","title":"Dockerfiles"},{"location":"06_specifications/specs_dockerfiles/#assumptions-prerequisites","text":"ISLE maintainers, Developers have pre-existing knowledge or familiarity with Dockerfile Dockerfiles , their editing process and compositions are familiar or known concepts.","title":"Assumptions / Prerequisites"},{"location":"06_specifications/specs_dockerfiles/#dockerfile-locations","text":"These files can be found within the cloned ISLE project directory. Each subdirectory is grouped by the image / container software type and each contains a respective Dockerfile. apache fedora mysql proxy solr \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ansible \u251c\u2500\u2500 apache \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 isle-newsite-sample \u251c\u2500\u2500 docker-compose-build.yml \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 fedora \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 mysql \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 proxy \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u251c\u2500\u2500 solr \u2502 \u251c\u2500\u2500 Dockerfile | \u2514\u2500\u2500 ... \u2514\u2500\u2500 vagrant","title":"Dockerfile locations"},{"location":"06_specifications/specs_dockerfiles/#dockerfile-conventions","text":"Making changes within these files will alter the contents and functionality of the ISLE images. Ensure that each Dockerfile does not have a file suffix or extension. Each command needs to be terminated with a \\ unless it is the final command. Each new command or action added will increase the size of the image once built. Attempt to balance size with functionality. All ISLE images use official Docker build images. Review the Docker Containers & Images Specifications Page for a listing of those builds.","title":"Dockerfile conventions"},{"location":"06_specifications/specs_dockerfiles/#dockerfile-composition","text":"Following standard Docker convention , all ISLE Dockerfiles have similar structures. Examples displayed are from the Apache Dockerfile FROM command indicating which official Docker image is used as the base build. The Apache image uses two base images to first compile ffmpeg and ghostscript and then copying the resulting binaries and libraries to a new clean base image so that the development tools are not installed on the final image. Reduces size. FROM ubuntu:14.04 AS ffmpeg_base is the first base image used. FROM ubuntu:14.04 is the second base image used. LABEL - For ISLE maintainers to version control image descriptions, functionality and additional meta-data. ( optional ) RUN - Execute commands e.g. RUN apt-get update etc. COPY - Within each ISLE image directory there are additional files or subdirectories are copied from the local laptop to the image itself. e.g. COPY envinit.sh /opt/adore-djatoka-1.1/bin/envinit.sh ENV - sets any environmental variables necessary for software to run or be configured properly. ENV JAVA_HOME=/usr/lib/jvm/java-8-oracle \\ JRE_HOME=/usr/lib/jvm/java-8-oracle/jre \\ PATH=$PATH:$HOME/.composer/vendor/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/jre/bin \\ KAKADU_LIBRARY_PATH=/opt/adore-djatoka-1.1/lib/Linux-x86-64 \\ KAKADU_HOME=/opt/adore-djatoka-1.1/lib/Linux-x86-64 VOLUME - Exposes a volume for data necessary for the build to continue. e.g. VOLUME /var/www/html EXPOSE - Opens up ports (80,443) on the temporary build containers created and to persist in further usage. Can be overridden by any docker-compose.yml file ENTRYPOINT - Allows you to configure a container that will run as an executable. Within the apache Dockerfile , the server is told to \"run\" using the apache2ctl utility by this last line: ENTRYPOINT [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]","title":"Dockerfile composition"},{"location":"06_specifications/specs_dockerfiles/#dockerfile-commenting","text":"For ISLE Maintainers when possible it is highly recommended that all sections be commented appropriately to explain functionality or actions to all Developers looking to customize or curious endusers. Example: ### # Update apt RUN apt-get update ### # Add software to provide add-apt-repository RUN apt-get install -y software-properties-common \\ python-software-properties","title":"Dockerfile commenting"},{"location":"06_specifications/specs_supported_drupal_modules_matrix/","text":"Please find below a list o all involved Drupal and Islandora Modules on the test site isle.locadomain . Package Name Type Status Version Administration Actions permissions (VBO) (actions_permissions) Module Not installed 7.x-3.4 Administration Administration Development tools (admin_devel) Module Not installed 7.x-3.0-rc5 Administration Administration menu (admin_menu) Module Not installed 7.x-3.0-rc5 Administration Administration menu Toolbar style (admin_menu_toolbar) Module Not installed 7.x-3.0-rc5 Chaos tool suite Bulk Export (bulk_export) Module Not installed 7.x-1.14 Chaos tool suite Chaos tools (ctools) Module Enabled 7.x-1.14 Chaos tool suite Chaos Tools (CTools) AJAX Example (ctools_ajax_sample) Module Not installed 7.x-1.14 Chaos tool suite Chaos Tools (CTools) Plugin Example (ctools_plugin_example) Module Not installed 7.x-1.14 Chaos tool suite Custom content panes (ctools_custom_content) Module Not installed 7.x-1.14 Chaos tool suite Custom rulesets (ctools_access_ruleset) Module Not installed 7.x-1.14 Chaos tool suite Page manager (page_manager) Module Not installed 7.x-1.14 Chaos tool suite Stylizer (stylizer) Module Not installed 7.x-1.14 Chaos tool suite Term Depth access (term_depth) Module Not installed 7.x-1.14 Chaos tool suite Views content panes (views_content) Module Not installed 7.x-1.14 Core Aggregator (aggregator) Module Not installed 7.57 Core Block (block) Module Enabled 7.57 Core Blog (blog) Module Not installed 7.57 Core Book (book) Module Not installed 7.57 Core Color (color) Module Enabled 7.57 Core Comment (comment) Module Enabled 7.57 Core Contact (contact) Module Not installed 7.57 Core Content translation (translation) Module Not installed 7.57 Core Contextual links (contextual) Module Enabled 7.57 Core Dashboard (dashboard) Module Enabled 7.57 Core Database logging (dblog) Module Enabled 7.57 Core Field (field) Module Enabled 7.57 Core Field SQL storage (field_sql_storage) Module Enabled 7.57 Core Field UI (field_ui) Module Enabled 7.57 Core File (file) Module Enabled 7.57 Core Filter (filter) Module Enabled 7.57 Core Forum (forum) Module Not installed 7.57 Core Help (help) Module Enabled 7.57 Core Image (image) Module Enabled 7.57 Core List (list) Module Enabled 7.57 Core Locale (locale) Module Not installed 7.57 Core Menu (menu) Module Enabled 7.57 Core Node (node) Module Enabled 7.57 Core Number (number) Module Enabled 7.57 Core OpenID (openid) Module Not installed 7.57 Core Options (options) Module Enabled 7.57 Core Overlay (overlay) Module Enabled 7.57 Core Path (path) Module Enabled 7.57 Core PHP filter (php) Module Not installed 7.57 Core Poll (poll) Module Not installed 7.57 Core RDF (rdf) Module Enabled 7.57 Core Search (search) Module Enabled 7.57 Core Shortcut (shortcut) Module Enabled 7.57 Core Statistics (statistics) Module Not installed 7.57 Core Syslog (syslog) Module Not installed 7.57 Core System (system) Module Enabled 7.57 Core Taxonomy (taxonomy) Module Enabled 7.57 Core Testing (simpletest) Module Not installed 7.57 Core Text (text) Module Enabled 7.57 Core Toolbar (toolbar) Module Enabled 7.57 Core Tracker (tracker) Module Not installed 7.57 Core Trigger (trigger) Module Not installed 7.57 Core Update manager (update) Module Enabled 7.57 Core User (user) Module Enabled 7.57 Date/Time Date (date) Module Not installed 7.x-2.10 Date/Time Date All Day (date_all_day) Module Not installed 7.x-2.10 Date/Time Date API (date_api) Module Enabled 7.x-2.10 Date/Time Date Context (date_context) Module Not installed 7.x-2.10 Date/Time Date Picker (datepicker) Module Enabled 7.x-1.0 Date/Time Date Picker Block (datepicker_block) Module Not installed 7.x-1.0 Date/Time Date Picker Views (datepicker_views) Module Enabled 7.x-1.0 Date/Time Date Popup (date_popup) Module Enabled 7.x-2.10 Date/Time Date Repeat API (date_repeat) Module Not installed 7.x-2.10 Date/Time Date Repeat Field (date_repeat_field) Module Not installed 7.x-2.10 Date/Time Date Tools (date_tools) Module Not installed 7.x-2.10 Date/Time Date Views (date_views) Module Enabled 7.x-2.10 Development Devel (devel) Module Not installed 7.x-1.5 Development Devel generate (devel_generate) Module Not installed 7.x-1.5 Development Devel node access (devel_node_access) Module Not installed 7.x-1.5 Development Nodequeue generate (nodequeue_generate) Module Not installed 7.x-2.1 Features Date Migration Example (date_migrate_example) Module Not installed 7.x-2.10 Features Features (features) Module Not installed 7.x-2.10 Features extra FE Block (fe_block) Module Not installed 7.x-1.0 Features extra FE Date (fe_date) Module Not installed 7.x-1.0 Features extra FE Nodequeue (fe_nodequeue) Module Not installed 7.x-1.0 Features extra FE Profile (fe_profile) Module Not installed 7.x-1.0 Fields Entity Reference (entityreference) Module Not installed 7.x-1.5 Fields Entity Reference Behavior Example (entityreference_behavior_example) Module Not installed 7.x-1.5 Fields Field Group (field_group) Module Enabled 7.x-1.6 Fields Link (link) Module Not installed 7.x-1.4 Islandora Compound Object Zip File Importer Module Not installed 7.x-dev (islandora_compound_object_zip_importer) Islandora Islandora (islandora) Module Enabled 7.x-dev Islandora Islandora Book Batch (islandora_book_batch) Module Enabled 7.x-dev Islandora Islandora Entities CSV Import (islandora_entities_csv_import) Module Enabled 7.x-dev Islandora Islandora Multi Importer (islandora_multi_importer) Module Enabled Islandora Islandora Newspaper Batch (islandora_newspaper_batch) Module Enabled 7.x-dev Islandora Islandora Populator (islandora_populator) Module Enabled 7.x-dev Islandora Islandora Solr Facet Pages (islandora_solr_facet_pages) Module Enabled 7.x-dev Islandora Islandora Solr Metadata (islandora_solr_metadata) Module Enabled 7.x-dev Islandora Islandora Webform (islandora_webform) Module Enabled 7.x-1.4-rc1 Islandora Islandora Webform Ingest (islandora_webform_ingest) Module Enabled Islandora Islandora XSLT Populator (islandora_xslt_populator) Module Not installed 7.x-dev Islandora Dependencies Islandora Form - Fieldpanel element (islandora_form_fieldpanel) Module Enabled 7.x-dev Islandora Dependencies Islandora XML Form API (xml_form_api) Module Enabled 7.x-dev Islandora Dependencies Islandora XML Form Elements (xml_form_elements) Module Enabled 7.x-dev Islandora Dependencies Islandora XML Schema API (xml_schema_api) Module Enabled 7.x-dev Islandora Dependencies Objective Forms (objective_forms) Module Enabled 7.x-dev Islandora Dependencies PHP Lib (php_lib) Module Enabled 7.x-dev Islandora Search Islandora Solr (islandora_solr) Module Enabled 7.x-dev Islandora Search Islandora Solr display profiles (islandora_solr_config) Module Enabled 7.x-dev Islandora Search Islandora Solr Views (islandora_solr_views) Module Enabled 7.x-dev Islandora Solution Packs Bibutils (bibutils) Module Enabled 7.x-dev Islandora Solution Packs Citation Exporter (citation_exporter) Module Enabled 7.x-dev Islandora Solution Packs Citeproc (citeproc) Module Enabled 7.x-dev Islandora Solution Packs DOI Importer (doi_importer) Module Enabled 7.x-dev Islandora Solution Packs DOI Populator (doi_populator) Module Not installed 7.x-dev Islandora Solution Packs EndNote XML Populator (endnotexml_populator) Module Not installed 7.x-dev Islandora Solution Packs EndNoteXML Importer (endnotexml_importer) Module Enabled 7.x-dev Islandora Solution Packs Islandora Audio (islandora_audio) Module Enabled 7.x-dev Islandora Solution Packs Islandora basic collection (islandora_basic_collection) Module Enabled 7.x-dev Islandora Solution Packs Islandora basic image (islandora_basic_image) Module Enabled 7.x-dev Islandora Solution Packs Islandora Bibliography (islandora_bibliography) Module Enabled 7.x-dev Islandora Solution Packs Islandora Book Solution Pack (islandora_book) Module Enabled 7.x-dev Islandora Solution Packs Islandora compound object (islandora_compound_object) Module Enabled 7.x-dev Islandora Solution Packs Islandora Disk Image Solution Pack (islandora_disk_image) Module Enabled 7.x-dev Islandora Solution Packs Islandora DOI (islandora_doi) Module Enabled 7.x-dev Islandora Solution Packs Islandora EndNote XML (islandora_endnotexml) Module Enabled 7.x-dev Islandora Solution Packs Islandora Entities (islandora_entities) Module Enabled 7.x-dev Islandora Solution Packs Islandora example simple text (islandora_example_simple_text) Module Not installed 7.x-dev Islandora Solution Packs Islandora Google Scholar (islandora_google_scholar) Module Enabled 7.x-dev Islandora Solution Packs Islandora Large Image Solution Pack (islandora_large_image) Module Enabled 7.x-dev Islandora Solution Packs Islandora newspaper (islandora_newspaper) Module Enabled 7.x-dev Islandora Solution Packs Islandora Paged Content (islandora_paged_content) Module Enabled 7.x-dev Islandora Solution Packs Islandora PDF (islandora_pdf) Module Enabled 7.x-dev Islandora Solution Packs Islandora PMID (islandora_pmid) Module Enabled 7.x-dev Islandora Solution Packs Islandora RIS (islandora_ris) Module Enabled 7.x-dev Islandora Solution Packs Islandora Scholar (islandora_scholar) Module Enabled 7.x-dev Islandora Solution Packs Islandora Scholar Embargo (islandora_scholar_embargo) Module Enabled 7.x-dev Islandora Solution Packs Islandora Video Solution Pack (islandora_video) Module Enabled 7.x-dev Islandora Solution Packs Islandora Web ARChive Solution Pack (islandora_web_archive) Module Enabled 7.x-dev Islandora Solution Packs PMID Populator (pmid_populator) Module Not installed 7.x-dev Islandora Solution Packs Pubmed Importer (pmid_importer) Module Enabled 7.x-dev Islandora Solution Packs RIS Importer (ris_importer) Module Enabled 7.x-dev Islandora Solution Packs RIS Populator (ris_populator) Module Not installed 7.x-dev Islandora Tools CSL (csl) Module Enabled 7.x-dev Islandora Tools Islandora Altmetrics Badge (islandora_altmetrics) Module Enabled Islandora Tools Islandora Badges (islandora_badges) Module Enabled Islandora Tools Islandora BagIt (islandora_bagit) Module Enabled 7.x-dev Islandora Tools Islandora Batch (islandora_batch) Module Enabled 7.x-dev Islandora Tools Islandora Batch Importer (islandora_importer) Module Enabled 7.x-dev Islandora Tools Islandora Batch Report (islandora_batch_report) Module Enabled 7.x-dev Islandora Tools Islandora Bookmark (islandora_bookmark) Module Enabled 7.x-dev Islandora Tools Islandora Bookmark CSV Exports (islandora_bookmark_csv_exports) Module Not installed 7.x-dev Islandora Tools Islandora Checksum (islandora_checksum) Module Not installed 7.x-dev Islandora Tools Islandora Checksum Checker (islandora_checksum_checker) Module Not installed 7.x-dev Islandora Tools Islandora FITS (islandora_fits) Module Enabled 7.x-dev Islandora Tools Islandora Image Annotation (islandora_image_annotation) Module Not installed Islandora Tools Islandora MARCXML (islandora_marcxml) Module Enabled 7.x-dev Islandora Tools Islandora oaDOI (islandora_oadoi) Module Not installed Islandora Tools Islandora OAI Provider (islandora_oai) Module Enabled 7.x-dev Islandora Tools Islandora OCR (islandora_ocr) Module Enabled 7.x-dev Islandora Tools Islandora pathauto (islandora_pathauto) Module Enabled 7.x-dev Islandora Tools Islandora PREMIS (islandora_premis) Module Enabled 7.x-dev Islandora Tools Islandora Scopus Badge (islandora_scopus) Module Not installed Islandora Tools Islandora Simple Workflow (islandora_simple_workflow) Module Enabled 7.x-dev Islandora Tools Islandora Sync (islandora_sync) Module Not installed Islandora Tools Islandora Usage Stats (islandora_usage_stats) Module Enabled 7.x-dev Islandora Tools Islandora Web of Science Badge (islandora_wos) Module Not installed Islandora Tools Islandora Xacml Api (islandora_xacml_api) Module Enabled 7.x-dev Islandora Tools Islandora XACML Editor (islandora_xacml_editor) Module Enabled 7.x-dev Islandora Tools Islandora XML Form Builder (xml_form_builder) Module Enabled 7.x-dev Islandora Tools Islandora XML Forms (xml_forms) Module Enabled 7.x-dev Islandora Tools Islandora XML sitemap (islandora_xmlsitemap) Module Enabled 7.x-dev Islandora Tools Zip File Importer (zip_importer) Module Enabled 7.x-dev Islandora Viewers Islandora Internet Archive BookReader Module Enabled 7.x-dev (islandora_internet_archive_bookreader) Islandora Viewers Islandora JW Player (islandora_jwplayer) Module Enabled 7.x-dev Islandora Viewers Islandora OpenSeadragon (islandora_openseadragon) Module Enabled 7.x-dev Islandora Viewers Islandora pdf.js (islandora_pdfjs) Module Enabled 7.x-dev Islandora Viewers Islandora video.js (islandora_videojs) Module Enabled 7.x-dev Multilingual - Panels translation (i18n_panels) Module Not installed 7.x-3.9 Internationalization Multilingual - Rules translation (rules_i18n) Module Not installed 7.x-2.10 Internationalization Nodequeue Nodequeue (nodequeue) Module Not installed 7.x-2.1 Nodequeue Nodequeue Service (nodequeue_service) Module Not installed 7.x-2.1 Nodequeue Smartqueue taxonomy (smartqueue) Module Not installed 7.x-2.1 Other Colorbox (colorbox) Module Enabled 7.x-2.13 Other Entity API (entity) Module Enabled 7.x-1.9 Other Entity tokens (entity_token) Module Enabled 7.x-1.9 Other Entity view modes (entity_view_mode) Module Not installed 7.x-1.0-rc1 Other Environment indicator (environment_indicator) Module Not installed 7.x-2.9 Other Environment indicator variables (environment_indicator_variable) Module Not installed 7.x-2.9 Other ImageMagick (imagemagick) Module Enabled 7.x-1.0 Other ImageMagick Advanced (imagemagick_advanced) Module Not installed 7.x-1.0 Other Islandora Sync Field Collection (islandora_sync_field_collection) Module Not installed Other Islandora Sync Relation (islandora_sync_relation) Module Not installed Other Libraries (libraries) Module Enabled 7.x-2.3 Other Pathauto (pathauto) Module Enabled 7.x-1.3 Other Stage File Proxy (stage_file_proxy) Module Not installed 7.x-1.7 Other Strongarm (strongarm) Module Not installed 7.x-2.0 Other Token (token) Module Enabled 7.x-1.7 Panels Mini panels (panels_mini) Module Not installed 7.x-3.9 Panels Panel nodes (panels_node) Module Not installed 7.x-3.9 Panels Panels (panels) Module Not installed 7.x-3.9 Panels Panels In-Place Editor (panels_ipe) Module Not installed 7.x-3.9 Rules Rules (rules) Module Enabled 7.x-2.10 Rules Rules Scheduler (rules_scheduler) Module Not installed 7.x-2.10 Rules Rules UI (rules_admin) Module Not installed 7.x-2.10 Statistics Google Analytics (googleanalytics) Module Not installed 7.x-2.4 Testing Features Extra test feature (features_extra_test) Module Not installed 7.x-1.0 User interface jQuery Update (jquery_update) Module Enabled 7.x-2.7 Views Views (views) Module Enabled 7.x-3.18 Views Views Bulk Operations (views_bulk_operations) Module Not installed 7.x-3.4 Views Views Data Export (views_data_export) Module Enabled 7.x-3.2 Views Views Slideshow (views_slideshow) Module Not installed 7.x-3.9 Views Views Slideshow Simple Pager (views_slideshow_simple_pager) Module Not installed 7.x-3.9 Views Views Slideshow: Cycle (views_slideshow_cycle) Module Not installed 7.x-3.9 Views Views UI (views_ui) Module Enabled 7.x-3.18 Webform Webform (webform) Module Enabled 7.x-4.16 Webform Webform AJAX (webform_ajax) Module Enabled 7.x-1.1 Webform Webform Bonus Pack (webform_bonus) Module Enabled 7.x-3.x-dev Webform Webform Digest (webform_digest) Module Not installed 7.x-3.x-dev Webform Webform to Google Docs (webform_to_gdocs) Module Not installed 7.x-4.3 Webform Webform Workflow (webform_workflow) Module Not installed 7.x-1.0-alpha2 XML sitemap XML sitemap (xmlsitemap) Module Enabled 7.x-2.3 XML sitemap XML sitemap custom (xmlsitemap_custom) Module Enabled 7.x-2.3 XML sitemap XML sitemap engines (xmlsitemap_engines) Module Not installed 7.x-2.3 XML sitemap XML sitemap internationalization (xmlsitemap_i18n) Module Not installed 7.x-2.3 XML sitemap XML sitemap menu (xmlsitemap_menu) Module Not installed 7.x-2.3 XML sitemap XML sitemap node (xmlsitemap_node) Module Not installed 7.x-2.3 XML sitemap XML sitemap taxonomy (xmlsitemap_taxonomy) Module Not installed 7.x-2.3 XML sitemap XML sitemap user (xmlsitemap_user) Module Not installed 7.x-2.3 Core Bartik (bartik) Theme Enabled 7.57 Core Garland (garland) Theme Disabled 7.57 Core Seven (seven) Theme Enabled 7.57 Core Stark (stark) Theme Disabled 7.57","title":"Supported Drupal Modules on Test Site Matrix"},{"location":"06_specifications/specs_supported_software_matrix/","text":"Software Version Software Website Apache 2.4 https://httpd.apache.org/ Djatoka 1.1 https://sourceforge.net/projects/djatoka/ Drupal 7.5x+ https://www.drupal.org/ Drupal filter 3.8.1 https://github.com/Islandora/islandora_drupal_filter Fedora 3.8.1 http://fedorarepository.org/ Gsearch 2.8.x https://github.com/discoverygarden/gsearch GSearch Extensions 0.1.3 https://github.com/discoverygarden/dgi_gsearch_extensions Islandora 7.x-1.1x https://github.com/Islandora/islandora Islandora Transforms (XSLTs) latest https://github.com/discoverygarden/islandora_transforms MySQL 5.6 https://www.mysql.com/ Nginx 1.13 https://www.nginx.com/ OpenJDK JDK 8.x http://openjdk.java.net/ Oracle Java JDK 8.x http://www.oracle.com/technetwork/java/javase/overview/index.html PHP 5.6 http://www.php.net/ Solr 4.10.4 http://lucene.apache.org/solr/ Tomcat 8.x http://tomcat.apache.org/","title":"Supported ISLE Software Matrix"},{"location":"07_appendices/editing-the-hosts-file/","text":"Below are instructions on how to edit the hosts file to connect to ISLE on a test system. Mac or Ubuntu Desktop Using Virtualbox VM (non-Vagrant) From the instructions in setting up the Virtualbox VM on your OS (MacOS, Ubuntu or Windows), the IP used to setup the Host-Only network was 10.10.10.130 Add the value of 10.10.10.130 isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain to the laptop / workstation's /etc/hosts file. For endusers running MacOS and Ubuntu Desktop: Open a terminal on the local laptop Enter: sudo nano /etc/hosts For endusers familiar with editing files on the command line, vim or alternative tools can be used in lieu of nano Enter the laptop enduser password Add the values below the 127.0.0.1 entry in the /etc/hosts file. 10.10.10.130 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Example 127.0.0.1 localhost 10.10.10.130 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file. Mac or Ubuntu Using Docker Docker For Mac If you are using Docker For Mac, then use the IP address of 127.0.0.1 to resolve to localhost and to the isle.localdomain localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain domain names Open a terminal on the local laptop Enter: sudo nano /etc/hosts For endusers familiar with editing files on the command line, vim or alternative tools can be used in lieu of nano Enter the laptop enduser password Add the values next to the 127.0.0.1 localhost entry in the /etc/hosts file. 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain with a space in between the entries. Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file. Windows Using Docker For endusers running Windows 10: Press the Windows key. Type Notepad in the search field. In the search results, right-click Notepad and select Run as administrator . From Notepad , open the following file: C:\\Windows\\System32\\Drivers\\etc\\hosts Add the values next to the 127.0.0.1 localhost entry in the /etc/hosts file. 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain with a space in between the entries. Click File > Save to save your changes. Windows Using Virtualbox VM (non-Vagrant) For endusers running Windows 10: Press the Windows key. Type Notepad in the search field. In the search results, right-click Notepad and select Run as administrator . From Notepad , open the following file: C:\\Windows\\System32\\Drivers\\etc\\hosts Add the values below the 127.0.0.1 entry in the /etc/hosts file. 10.10.10.130 isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Click File > Save to save your changes.","title":"Editing the /ect/hosts file"},{"location":"07_appendices/editing-the-hosts-file/#mac-or-ubuntu-desktop-using-virtualbox-vm-non-vagrant","text":"From the instructions in setting up the Virtualbox VM on your OS (MacOS, Ubuntu or Windows), the IP used to setup the Host-Only network was 10.10.10.130 Add the value of 10.10.10.130 isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain to the laptop / workstation's /etc/hosts file. For endusers running MacOS and Ubuntu Desktop: Open a terminal on the local laptop Enter: sudo nano /etc/hosts For endusers familiar with editing files on the command line, vim or alternative tools can be used in lieu of nano Enter the laptop enduser password Add the values below the 127.0.0.1 entry in the /etc/hosts file. 10.10.10.130 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Example 127.0.0.1 localhost 10.10.10.130 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file.","title":"Mac or Ubuntu Desktop Using Virtualbox VM (non-Vagrant)"},{"location":"07_appendices/editing-the-hosts-file/#mac-or-ubuntu-using-docker","text":"Docker For Mac If you are using Docker For Mac, then use the IP address of 127.0.0.1 to resolve to localhost and to the isle.localdomain localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain domain names Open a terminal on the local laptop Enter: sudo nano /etc/hosts For endusers familiar with editing files on the command line, vim or alternative tools can be used in lieu of nano Enter the laptop enduser password Add the values next to the 127.0.0.1 localhost entry in the /etc/hosts file. 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain with a space in between the entries. Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file.","title":"Mac or Ubuntu Using Docker"},{"location":"07_appendices/editing-the-hosts-file/#windows-using-docker","text":"For endusers running Windows 10: Press the Windows key. Type Notepad in the search field. In the search results, right-click Notepad and select Run as administrator . From Notepad , open the following file: C:\\Windows\\System32\\Drivers\\etc\\hosts Add the values next to the 127.0.0.1 localhost entry in the /etc/hosts file. 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain with a space in between the entries. Click File > Save to save your changes.","title":"Windows Using Docker"},{"location":"07_appendices/editing-the-hosts-file/#windows-using-virtualbox-vm-non-vagrant","text":"For endusers running Windows 10: Press the Windows key. Type Notepad in the search field. In the search results, right-click Notepad and select Run as administrator . From Notepad , open the following file: C:\\Windows\\System32\\Drivers\\etc\\hosts Add the values below the 127.0.0.1 entry in the /etc/hosts file. 10.10.10.130 isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain Click File > Save to save your changes.","title":"Windows Using Virtualbox VM (non-Vagrant)"},{"location":"07_appendices/installing-module-with-composer/","text":"Installing a Module with Composer Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Composer. Composer is a PHP package/dependency manager employed in Drupal 8 and many other PHP-based applications. Some Drupal 7, and subsequently Islandora 7.x, modules may also employ Composer to assist with installation and module management. Composer is included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container (see open-terminal-in-running-container.md ) to use it. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, Composer should not be run as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Composer is installed and accessible by entering composer --version , and you should see something like this in response: Composer version 1.6.3 2018-01-31 16:28:17 . Example: Islandora Multi-Importer The Islandora Multi-Importer (https://github.com/mnylc/islandora_multi_importer) module uses Composer for installation. The remainder of this guide will demonstrate how to install and enable the Islandora Multi-Importer or IMI . The installation instructions for the IMI module tell us to do the following in the container shell: cd /var/www/html/sites/all/modules git clone https://github.com/mnylc/islandora_multi_importer cd islandora_multi_importer/ composer install If all goes as planned your container now has the Islandora_Multi-Importer installed, but not enabled. To enable the module use Drush like so: drush en islandora_multi_importer -y It's also a good idea to flush Drupal's cache after installing and enabling new modules. You can also do this using Drush like so: drush cc all Other modules which use Composer for installation can be obtained in a similar manner. Persistent Changes Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. IMI's compose specification builds all of the module's components in subdirectories below /var/www/html , and the effect is that IMI will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Installing a Drupal Module with Composer"},{"location":"07_appendices/installing-module-with-composer/#installing-a-module-with-composer","text":"Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Composer. Composer is a PHP package/dependency manager employed in Drupal 8 and many other PHP-based applications. Some Drupal 7, and subsequently Islandora 7.x, modules may also employ Composer to assist with installation and module management. Composer is included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container (see open-terminal-in-running-container.md ) to use it. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, Composer should not be run as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Composer is installed and accessible by entering composer --version , and you should see something like this in response: Composer version 1.6.3 2018-01-31 16:28:17 .","title":"Installing a Module with Composer"},{"location":"07_appendices/installing-module-with-composer/#example-islandora-multi-importer","text":"The Islandora Multi-Importer (https://github.com/mnylc/islandora_multi_importer) module uses Composer for installation. The remainder of this guide will demonstrate how to install and enable the Islandora Multi-Importer or IMI . The installation instructions for the IMI module tell us to do the following in the container shell: cd /var/www/html/sites/all/modules git clone https://github.com/mnylc/islandora_multi_importer cd islandora_multi_importer/ composer install If all goes as planned your container now has the Islandora_Multi-Importer installed, but not enabled. To enable the module use Drush like so: drush en islandora_multi_importer -y It's also a good idea to flush Drupal's cache after installing and enabling new modules. You can also do this using Drush like so: drush cc all Other modules which use Composer for installation can be obtained in a similar manner.","title":"Example: Islandora Multi-Importer"},{"location":"07_appendices/installing-module-with-composer/#persistent-changes","text":"Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. IMI's compose specification builds all of the module's components in subdirectories below /var/www/html , and the effect is that IMI will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Persistent Changes"},{"location":"07_appendices/installing-module-with-drush/","text":"Installing a Module with Drush (and Git) Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Drush, and in some cases, Git. This technique works, in Islandora version 7.x, for most Drupal and Islandora modules. Drush , a \"Command Line Shell for Drupal\", provides convenient means of installing, configuring, and maintaining a Drupal site (like Islandora). Please see http://www.drush.org/ for much more detail regarding Drush. Git is a version control tool that I hope all readers of this document are already familiar with. If you are not, please consider studying up on it at https://git-scm.com/. Drush and Git are included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container (see open-terminal-in-running-container.md ) to use them. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, most Drush and Git operations should not be performed as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Drush is installed and accessible by entering drush --version , and you should see something like this in response: Drush Version : 7.4.0 . Likewise, you can confirm that Git is installed and working by entering git --version , and you should see something like this in response: git version 1.9.1 . Two Kinds of Drush Module Installations There may be many kinds of modules that can be installed and configured using Drush, but the most popular are: Drupal Contributed Modules - These are modules developed specifically for Drupal and made available from a repository maintained by Drupal.org. Documentation for all such Drupal 7.x modules can be found at https://www.drupal.org/docs/7/modules. Note that all modules are version-specific, so you can find Drupal 8.x module documentation at https://www.drupal.org/docs/8/modules. Non-Contributed Modules - Modules that are not offered to, or accepted by, Drupal.org may reside in repositories maintained by the module's author and/or maintainer. Most Islandora-specific modules take this form. These two kinds of modules generally employ different techniques for installation and maintenance. One example of each is presented in the sections that follow. Example: Devel - A Drupal Contributed Module Devel is a Drupal contributed module maintained and distributed by Drupal.org. Its stated purpose, taken directly from the module's README file is: \"...contains helper functions and pages for Drupal developers and inquisitive admins...\". The installation instructions for Devel simply tell us to \"install as usual\", that is generally true of most Drupal.org contributed modules, and the process is extremely simple using Drush. From a terminal in the container shell: cd /var/www/html/web/sites/default drush dl devel drush en devel drush cc all In this command sequence, the cd /var/www/html/sites/default command sets our working directory to correspond with the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The drush dl devel command instructs our container to download, dl is Drush shorthand for 'download', the module identified as devel . Drush will automatically determine where to put the downloaded module, but it may prompt you for confirmation of location depending on your circumstances. The third command, drush en devel , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as devel . This command, as specified, must be run from a particular working directory so that Drush can determine in which Drupal/Islandora site the module should be applied. Like the dl command, drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Example: Oral Histories Solution Pack - A Non-Contrib Islandora Module According to its README.md file, the Oral Histories Solution Pack (https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories) \"Provides a content model for Oral Histories and a viewer for displaying timed text content (XML or WebVTT) alongside video and audio files.\" The remainder of this guide will demonstrate how to install and enable the Oral Histories Solution Pack inside your running Apache container using Git and Drush. The full installation instructions for the Oral Histories Solution Pack are relatively complex since there are a number of dependencies, and some necessary Solr configuration in order to be fully functional. Please see https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories/blob/7.x/README.md for complete details. To begin the process of downloading, installing and configuring the Oral History Solution Pack do the following at the terminal inside your container: cd /var/www/html/sites/all/modules/contrib git clone https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories.git cd /var/www/html/sites/default drush en islandora_oralhistories -y drush cc all In this command sequence, the cd /var/www/html/sites/all/modules/contrib command sets our working directory to correspond with the location where we want our module to reside. The git clone... command downloads the Oral History solution pack code from its repository on Github. If all goes smoothly this step will create a new islandora_solution_pack_oralhistories directory. The cd /var/www/html/sites/default command sets our working directory to the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The command, drush en islandora_oralhistories -y , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as islandora_oralhistories . This command, as specified, must be run from a particular working directory so that Drush can determine in which Drupal/Islandora site the module should be applied. Note that drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Other modules which use Git and Drush for installation can be obtained in a similar manner. Persistent Changes Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. Devel and Islandora_Oral_History_Solution_Pack , like most modules, build all of the module's components and dependencies in subdirectories below /var/www/html , and the effect is that these modules will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Installing a Drupal Module with Drush"},{"location":"07_appendices/installing-module-with-drush/#installing-a-module-with-drush-and-git","text":"Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Drush, and in some cases, Git. This technique works, in Islandora version 7.x, for most Drupal and Islandora modules. Drush , a \"Command Line Shell for Drupal\", provides convenient means of installing, configuring, and maintaining a Drupal site (like Islandora). Please see http://www.drush.org/ for much more detail regarding Drush. Git is a version control tool that I hope all readers of this document are already familiar with. If you are not, please consider studying up on it at https://git-scm.com/. Drush and Git are included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container (see open-terminal-in-running-container.md ) to use them. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, most Drush and Git operations should not be performed as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Drush is installed and accessible by entering drush --version , and you should see something like this in response: Drush Version : 7.4.0 . Likewise, you can confirm that Git is installed and working by entering git --version , and you should see something like this in response: git version 1.9.1 .","title":"Installing a Module with Drush (and Git)"},{"location":"07_appendices/installing-module-with-drush/#two-kinds-of-drush-module-installations","text":"There may be many kinds of modules that can be installed and configured using Drush, but the most popular are: Drupal Contributed Modules - These are modules developed specifically for Drupal and made available from a repository maintained by Drupal.org. Documentation for all such Drupal 7.x modules can be found at https://www.drupal.org/docs/7/modules. Note that all modules are version-specific, so you can find Drupal 8.x module documentation at https://www.drupal.org/docs/8/modules. Non-Contributed Modules - Modules that are not offered to, or accepted by, Drupal.org may reside in repositories maintained by the module's author and/or maintainer. Most Islandora-specific modules take this form. These two kinds of modules generally employ different techniques for installation and maintenance. One example of each is presented in the sections that follow.","title":"Two Kinds of Drush Module Installations"},{"location":"07_appendices/installing-module-with-drush/#example-devel-a-drupal-contributed-module","text":"Devel is a Drupal contributed module maintained and distributed by Drupal.org. Its stated purpose, taken directly from the module's README file is: \"...contains helper functions and pages for Drupal developers and inquisitive admins...\". The installation instructions for Devel simply tell us to \"install as usual\", that is generally true of most Drupal.org contributed modules, and the process is extremely simple using Drush. From a terminal in the container shell: cd /var/www/html/web/sites/default drush dl devel drush en devel drush cc all In this command sequence, the cd /var/www/html/sites/default command sets our working directory to correspond with the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The drush dl devel command instructs our container to download, dl is Drush shorthand for 'download', the module identified as devel . Drush will automatically determine where to put the downloaded module, but it may prompt you for confirmation of location depending on your circumstances. The third command, drush en devel , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as devel . This command, as specified, must be run from a particular working directory so that Drush can determine in which Drupal/Islandora site the module should be applied. Like the dl command, drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more.","title":"Example: Devel - A Drupal Contributed Module"},{"location":"07_appendices/installing-module-with-drush/#example-oral-histories-solution-pack-a-non-contrib-islandora-module","text":"According to its README.md file, the Oral Histories Solution Pack (https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories) \"Provides a content model for Oral Histories and a viewer for displaying timed text content (XML or WebVTT) alongside video and audio files.\" The remainder of this guide will demonstrate how to install and enable the Oral Histories Solution Pack inside your running Apache container using Git and Drush. The full installation instructions for the Oral Histories Solution Pack are relatively complex since there are a number of dependencies, and some necessary Solr configuration in order to be fully functional. Please see https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories/blob/7.x/README.md for complete details. To begin the process of downloading, installing and configuring the Oral History Solution Pack do the following at the terminal inside your container: cd /var/www/html/sites/all/modules/contrib git clone https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories.git cd /var/www/html/sites/default drush en islandora_oralhistories -y drush cc all In this command sequence, the cd /var/www/html/sites/all/modules/contrib command sets our working directory to correspond with the location where we want our module to reside. The git clone... command downloads the Oral History solution pack code from its repository on Github. If all goes smoothly this step will create a new islandora_solution_pack_oralhistories directory. The cd /var/www/html/sites/default command sets our working directory to the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The command, drush en islandora_oralhistories -y , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as islandora_oralhistories . This command, as specified, must be run from a particular working directory so that Drush can determine in which Drupal/Islandora site the module should be applied. Note that drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Other modules which use Git and Drush for installation can be obtained in a similar manner.","title":"Example: Oral Histories Solution Pack - A Non-Contrib Islandora Module"},{"location":"07_appendices/installing-module-with-drush/#persistent-changes","text":"Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. Devel and Islandora_Oral_History_Solution_Pack , like most modules, build all of the module's components and dependencies in subdirectories below /var/www/html , and the effect is that these modules will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Persistent Changes"},{"location":"07_appendices/open-terminal-in-running-container/","text":"Opening a Terminal/Shell Inside a Running Container At times you may find it necessary to open a terminal window or 'shell' inside a running container. In ISLE this will usually involve the 'Apache' container. In a terminal window on your host , enter docker ps to show a list of all running containers. Each container's NAME should appear in the right-most column of the output. In an isle.localdomain environment the name of the Apache container will be ' isle-apache-ld '. In other configurations the container name may be different. Use docker exec -it isle-apache-ld bash , where 'isle-apache-ld' represents the name of the target container, to open a bash shell inside the isle-apache-ld container. No password will be required. If successful, your terminal prompt will look something like this: root@dd9ee02aa718:/# .","title":"Opening a Terminal in a Running Container"},{"location":"07_appendices/open-terminal-in-running-container/#opening-a-terminalshell-inside-a-running-container","text":"At times you may find it necessary to open a terminal window or 'shell' inside a running container. In ISLE this will usually involve the 'Apache' container. In a terminal window on your host , enter docker ps to show a list of all running containers. Each container's NAME should appear in the right-most column of the output. In an isle.localdomain environment the name of the Apache container will be ' isle-apache-ld '. In other configurations the container name may be different. Use docker exec -it isle-apache-ld bash , where 'isle-apache-ld' represents the name of the target container, to open a bash shell inside the isle-apache-ld container. No password will be required. If successful, your terminal prompt will look something like this: root@dd9ee02aa718:/# .","title":"Opening a Terminal/Shell Inside a Running Container"},{"location":"07_appendices/redhat/","text":"Note about Red Hat (warning) At this time, Red Hat Enterprise Server 7 has been tested but there is a distinct lack of clarity as to what version of Docker is running and/or is supported. It appears that unless a license for Docker EE is purchased, the project owners do not recommend using Red Hat at this time due to unanticipated cost. Currently ISLE has only been built, tested and supported using the free edition of Docker Community Edition ( docker-ce ). Challenge 1: Docker Community Edition not clearly supported on or by Red Hat https://docs.docker.com/install/ (see matrix) https://www.docker.com/community-edition Challenge 2: Red Hat seems to direct endusers to pay for Docker EE license instead of using Docker Community Edition https://www.docker.com/enterprise-edition Challenge 3: Choices for alternate free Docker versions supported by Red Hat are not clear in features comparison or support roadmap. https://docs.docker.com/release-notes/docker-ce/ https://access.redhat.com/articles/2317361","title":"Note/Warning about installing on Redhat"},{"location":"07_appendices/redhat/#note-about-red-hat-warning","text":"At this time, Red Hat Enterprise Server 7 has been tested but there is a distinct lack of clarity as to what version of Docker is running and/or is supported. It appears that unless a license for Docker EE is purchased, the project owners do not recommend using Red Hat at this time due to unanticipated cost. Currently ISLE has only been built, tested and supported using the free edition of Docker Community Edition ( docker-ce ). Challenge 1: Docker Community Edition not clearly supported on or by Red Hat https://docs.docker.com/install/ (see matrix) https://www.docker.com/community-edition Challenge 2: Red Hat seems to direct endusers to pay for Docker EE license instead of using Docker Community Edition https://www.docker.com/enterprise-edition Challenge 3: Choices for alternate free Docker versions supported by Red Hat are not clear in features comparison or support roadmap. https://docs.docker.com/release-notes/docker-ce/ https://access.redhat.com/articles/2317361","title":"Note about Red Hat (warning)"},{"location":"07_appendices/sample-it-department-request/","text":"Sample IT Department Request Letter Dear IT Dept, Our digital collections team will be testing a Docker implementation of the Islandora digital repository system called ISLE . We require access to a server meeting the following specifications: Ubuntu 18.04 LTS or CentOS 7.x running on a server or VM Minimum 2 CPU's (w/1-4 cores each) Sufficient HD or attached storage to hold your collection 30 - 50GB for the Server OS & overhead 16 - 32 GB of RAM Our team will either need root access, or a user called \"islandora\" that has sudo privileges. We will need the following software which we can install following the instructions at this link Git, Docker, Docker-Compose, openssl, git, htop, ntp, curl Thank you, Requesting Dept.","title":"Sample IT Department Request Letter"},{"location":"07_appendices/sample-it-department-request/#sample-it-department-request-letter","text":"Dear IT Dept, Our digital collections team will be testing a Docker implementation of the Islandora digital repository system called ISLE . We require access to a server meeting the following specifications: Ubuntu 18.04 LTS or CentOS 7.x running on a server or VM Minimum 2 CPU's (w/1-4 cores each) Sufficient HD or attached storage to hold your collection 30 - 50GB for the Server OS & overhead 16 - 32 GB of RAM Our team will either need root access, or a user called \"islandora\" that has sudo privileges. We will need the following software which we can install following the instructions at this link Git, Docker, Docker-Compose, openssl, git, htop, ntp, curl Thank you, Requesting Dept.","title":"Sample IT Department Request Letter"},{"location":"07_appendices/update_isle/","text":"Add Instructions here","title":"Update isle"},{"location":"08_about/about/","text":"Islandora Enterprise (ISLE) is a new project in development that will address two of the most significant pain-points in Islandora: installation and maintenance. Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. ISLE is an orchestrated group of Docker containers to be run on a server, laptop or cloud instance with a minimal suite of tools enabling an efficient deploy and release of an updated production-ready Islandora environment. ISLE functions as both an initial installer and maintenance updater with the ability to build new production, staging and sandbox environments as distributable, lightweight and fast \u201ccontainers\u201d in a Docker Engine environment. This process allows folks to choose between hosting: locally on a laptop for development work on site in an institutional data center in a cloud environment such as ( Amazon Web Services ). ISLE\u2019s production-ready platform will be updated monthly with: critical security patches full stack software updates a suite of commonly installed features and solution packs. ISLE is designed to be an evolving but trusted environment to help create a managed process for migrating to the next major release of Islandora (termed CLAW). Project Overview ISLE public repository: https://github.com/Islandora-Collaboration-Group/ISLE How does it work? ISLE separates an institution\u2019s customizations from core code, and moves that core code into containers that are easily updated, simplifying and largely automating the process of installation and updates/maintenance of Islandora. ISLE also bundles together the best shared modules into a common, production-ready and security-hardened platform. Why is it needed? Islandora is a powerful digital repository comprised of more than 80 different open-source software libraries. This complex ecosystem makes Islandora difficult and expensive to install, maintain and customize. ISLE lowers the barrier to entry for new schools while allowing existing institutions to reallocate funds towards development or ingestion instead of maintenance. High Level Objective To deliver a secure and production-ready Islandora stack (\u201cISLE\u201d) that reduces the involved support time and effort for installation, maintenance and customization. ISLE Functional Definition By ISLE, it is meant a system that will: Function as both an initial installer and maintenance updater for Islandora stacks with up-to-date components suitable for use as staging, development or production environments, as well as for use on personal computers for development work. Consist of a public, tagged set of Docker containers. Include use of an orchestration tool such as Docker Composer. Allow for the replacement of older containers with newer versions. Be updated to include new component security patch releases within one calendar month. Support institution-specific customizations (XSLTs/Islandora Transforms, Solr, schemas, config.xml, MODS configurations/forms, XACML policies) able to persist through container upgrades and replacements. These will be stored in a git repository and a mechanism will be provided to reintegrate with the installed Docker containers as part of an upgrade. Support for either institutional hosting or Amazon Web Services (AWS) for the Docker host server. Support data store flexibility on institutional hosting or an AWS cloud environment. Encompass critical security patches, and full stack software updates, plus dependencies for commonly installed features and all available solution packs. Include an integrated ISLE/Islandora test suite (expected to utilize TravisCI) to be utilized, developed in conjunction with the Islandora Foundation and the current Islandora release managers Include documentation that covers end usage, a how-to guide to set up an initial ISLE installation, a how-to guide for an established installation to upgrade containers to the latest versions, and a functional description of mechanics, administrative system management and the process for future ISLE development ISLE Documents ISLE Executive Summary (a concise overview in plain English) ISLE Specifications (based on the older, now closed, ISLE MVP doc) ISLE Supporters (list of institutions)","title":"About ISLE"},{"location":"08_about/about/#project-overview","text":"ISLE public repository: https://github.com/Islandora-Collaboration-Group/ISLE","title":"Project Overview"},{"location":"08_about/about/#how-does-it-work","text":"ISLE separates an institution\u2019s customizations from core code, and moves that core code into containers that are easily updated, simplifying and largely automating the process of installation and updates/maintenance of Islandora. ISLE also bundles together the best shared modules into a common, production-ready and security-hardened platform.","title":"How does it work?"},{"location":"08_about/about/#why-is-it-needed","text":"Islandora is a powerful digital repository comprised of more than 80 different open-source software libraries. This complex ecosystem makes Islandora difficult and expensive to install, maintain and customize. ISLE lowers the barrier to entry for new schools while allowing existing institutions to reallocate funds towards development or ingestion instead of maintenance.","title":"Why is it needed?"},{"location":"08_about/about/#high-level-objective","text":"To deliver a secure and production-ready Islandora stack (\u201cISLE\u201d) that reduces the involved support time and effort for installation, maintenance and customization.","title":"High Level Objective"},{"location":"08_about/about/#isle-functional-definition","text":"By ISLE, it is meant a system that will: Function as both an initial installer and maintenance updater for Islandora stacks with up-to-date components suitable for use as staging, development or production environments, as well as for use on personal computers for development work. Consist of a public, tagged set of Docker containers. Include use of an orchestration tool such as Docker Composer. Allow for the replacement of older containers with newer versions. Be updated to include new component security patch releases within one calendar month. Support institution-specific customizations (XSLTs/Islandora Transforms, Solr, schemas, config.xml, MODS configurations/forms, XACML policies) able to persist through container upgrades and replacements. These will be stored in a git repository and a mechanism will be provided to reintegrate with the installed Docker containers as part of an upgrade. Support for either institutional hosting or Amazon Web Services (AWS) for the Docker host server. Support data store flexibility on institutional hosting or an AWS cloud environment. Encompass critical security patches, and full stack software updates, plus dependencies for commonly installed features and all available solution packs. Include an integrated ISLE/Islandora test suite (expected to utilize TravisCI) to be utilized, developed in conjunction with the Islandora Foundation and the current Islandora release managers Include documentation that covers end usage, a how-to guide to set up an initial ISLE installation, a how-to guide for an established installation to upgrade containers to the latest versions, and a functional description of mechanics, administrative system management and the process for future ISLE development","title":"ISLE Functional Definition"},{"location":"08_about/about/#isle-documents","text":"ISLE Executive Summary (a concise overview in plain English) ISLE Specifications (based on the older, now closed, ISLE MVP doc) ISLE Supporters (list of institutions)","title":"ISLE Documents"},{"location":"08_about/about_maintainers/","text":"This page left intentionally blank, pending full community documentation for this process.","title":"About maintainers"},{"location":"08_about/contributing_to_project/","text":"How to contribute to ISLE For more information about ISLE, help with installation or to contribute to the project: Islandora ISLE Interest Group meetings are open to everybody! Schedule is every other Wednesday at 3:00pm EST. Subscribe to Islandora ISLE Google group (public) for updates, meeting announcements, and technical support For details about how ISLE came into being please read the ISLE Executive Summary (a concise overview in plain English)","title":"Contributing to Project"},{"location":"08_about/contributing_to_project/#how-to-contribute-to-isle","text":"For more information about ISLE, help with installation or to contribute to the project: Islandora ISLE Interest Group meetings are open to everybody! Schedule is every other Wednesday at 3:00pm EST. Subscribe to Islandora ISLE Google group (public) for updates, meeting announcements, and technical support For details about how ISLE came into being please read the ISLE Executive Summary (a concise overview in plain English)","title":"How to contribute to ISLE"},{"location":"09_release_notes/release_notes/","text":"","title":"Release Notes"}]}